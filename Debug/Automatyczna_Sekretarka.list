
Automatyczna_Sekretarka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08010e04  08010e04  00020e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011334  08011334  00030494  2**0
                  CONTENTS
  4 .ARM          00000008  08011334  08011334  00021334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801133c  0801133c  00030494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801133c  0801133c  0002133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011340  08011340  00021340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000494  20000000  08011344  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc0  20000494  080117d8  00030494  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006054  080117d8  00036054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030494  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e69  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000529c  00000000  00000000  0005832d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  0005d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0005e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c700  00000000  00000000  0005fb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018acf  00000000  00000000  0007c278  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ed56  00000000  00000000  00094d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  00123a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  00123b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010dec 	.word	0x08010dec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	08010dec 	.word	0x08010dec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2f>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000610:	bf24      	itt	cs
 8000612:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000616:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800061a:	d90d      	bls.n	8000638 <__aeabi_d2f+0x30>
 800061c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000620:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000624:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800062c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000630:	bf08      	it	eq
 8000632:	f020 0001 	biceq.w	r0, r0, #1
 8000636:	4770      	bx	lr
 8000638:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800063c:	d121      	bne.n	8000682 <__aeabi_d2f+0x7a>
 800063e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000642:	bfbc      	itt	lt
 8000644:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000648:	4770      	bxlt	lr
 800064a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000652:	f1c2 0218 	rsb	r2, r2, #24
 8000656:	f1c2 0c20 	rsb	ip, r2, #32
 800065a:	fa10 f30c 	lsls.w	r3, r0, ip
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	bf18      	it	ne
 8000664:	f040 0001 	orrne.w	r0, r0, #1
 8000668:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800066c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000670:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000674:	ea40 000c 	orr.w	r0, r0, ip
 8000678:	fa23 f302 	lsr.w	r3, r3, r2
 800067c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000680:	e7cc      	b.n	800061c <__aeabi_d2f+0x14>
 8000682:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000686:	d107      	bne.n	8000698 <__aeabi_d2f+0x90>
 8000688:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800068c:	bf1e      	ittt	ne
 800068e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000692:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000696:	4770      	bxne	lr
 8000698:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800069c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <__aeabi_uldivmod>:
 80006a8:	b953      	cbnz	r3, 80006c0 <__aeabi_uldivmod+0x18>
 80006aa:	b94a      	cbnz	r2, 80006c0 <__aeabi_uldivmod+0x18>
 80006ac:	2900      	cmp	r1, #0
 80006ae:	bf08      	it	eq
 80006b0:	2800      	cmpeq	r0, #0
 80006b2:	bf1c      	itt	ne
 80006b4:	f04f 31ff 	movne.w	r1, #4294967295
 80006b8:	f04f 30ff 	movne.w	r0, #4294967295
 80006bc:	f000 b972 	b.w	80009a4 <__aeabi_idiv0>
 80006c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006c8:	f000 f806 	bl	80006d8 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4770      	bx	lr

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9e08      	ldr	r6, [sp, #32]
 80006de:	4604      	mov	r4, r0
 80006e0:	4688      	mov	r8, r1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14b      	bne.n	800077e <__udivmoddi4+0xa6>
 80006e6:	428a      	cmp	r2, r1
 80006e8:	4615      	mov	r5, r2
 80006ea:	d967      	bls.n	80007bc <__udivmoddi4+0xe4>
 80006ec:	fab2 f282 	clz	r2, r2
 80006f0:	b14a      	cbz	r2, 8000706 <__udivmoddi4+0x2e>
 80006f2:	f1c2 0720 	rsb	r7, r2, #32
 80006f6:	fa01 f302 	lsl.w	r3, r1, r2
 80006fa:	fa20 f707 	lsr.w	r7, r0, r7
 80006fe:	4095      	lsls	r5, r2
 8000700:	ea47 0803 	orr.w	r8, r7, r3
 8000704:	4094      	lsls	r4, r2
 8000706:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800070a:	0c23      	lsrs	r3, r4, #16
 800070c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000710:	fa1f fc85 	uxth.w	ip, r5
 8000714:	fb0e 8817 	mls	r8, lr, r7, r8
 8000718:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800071c:	fb07 f10c 	mul.w	r1, r7, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d909      	bls.n	8000738 <__udivmoddi4+0x60>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f107 30ff 	add.w	r0, r7, #4294967295
 800072a:	f080 811b 	bcs.w	8000964 <__udivmoddi4+0x28c>
 800072e:	4299      	cmp	r1, r3
 8000730:	f240 8118 	bls.w	8000964 <__udivmoddi4+0x28c>
 8000734:	3f02      	subs	r7, #2
 8000736:	442b      	add	r3, r5
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000740:	fb0e 3310 	mls	r3, lr, r0, r3
 8000744:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000748:	fb00 fc0c 	mul.w	ip, r0, ip
 800074c:	45a4      	cmp	ip, r4
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x8c>
 8000750:	192c      	adds	r4, r5, r4
 8000752:	f100 33ff 	add.w	r3, r0, #4294967295
 8000756:	f080 8107 	bcs.w	8000968 <__udivmoddi4+0x290>
 800075a:	45a4      	cmp	ip, r4
 800075c:	f240 8104 	bls.w	8000968 <__udivmoddi4+0x290>
 8000760:	3802      	subs	r0, #2
 8000762:	442c      	add	r4, r5
 8000764:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000768:	eba4 040c 	sub.w	r4, r4, ip
 800076c:	2700      	movs	r7, #0
 800076e:	b11e      	cbz	r6, 8000778 <__udivmoddi4+0xa0>
 8000770:	40d4      	lsrs	r4, r2
 8000772:	2300      	movs	r3, #0
 8000774:	e9c6 4300 	strd	r4, r3, [r6]
 8000778:	4639      	mov	r1, r7
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0xbe>
 8000782:	2e00      	cmp	r6, #0
 8000784:	f000 80eb 	beq.w	800095e <__udivmoddi4+0x286>
 8000788:	2700      	movs	r7, #0
 800078a:	e9c6 0100 	strd	r0, r1, [r6]
 800078e:	4638      	mov	r0, r7
 8000790:	4639      	mov	r1, r7
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f783 	clz	r7, r3
 800079a:	2f00      	cmp	r7, #0
 800079c:	d147      	bne.n	800082e <__udivmoddi4+0x156>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0xd0>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80fa 	bhi.w	800099c <__udivmoddi4+0x2c4>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0303 	sbc.w	r3, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	4698      	mov	r8, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d0e0      	beq.n	8000778 <__udivmoddi4+0xa0>
 80007b6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ba:	e7dd      	b.n	8000778 <__udivmoddi4+0xa0>
 80007bc:	b902      	cbnz	r2, 80007c0 <__udivmoddi4+0xe8>
 80007be:	deff      	udf	#255	; 0xff
 80007c0:	fab2 f282 	clz	r2, r2
 80007c4:	2a00      	cmp	r2, #0
 80007c6:	f040 808f 	bne.w	80008e8 <__udivmoddi4+0x210>
 80007ca:	1b49      	subs	r1, r1, r5
 80007cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d0:	fa1f f885 	uxth.w	r8, r5
 80007d4:	2701      	movs	r7, #1
 80007d6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007da:	0c23      	lsrs	r3, r4, #16
 80007dc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb08 f10c 	mul.w	r1, r8, ip
 80007e8:	4299      	cmp	r1, r3
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x124>
 80007ec:	18eb      	adds	r3, r5, r3
 80007ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x122>
 80007f4:	4299      	cmp	r1, r3
 80007f6:	f200 80cd 	bhi.w	8000994 <__udivmoddi4+0x2bc>
 80007fa:	4684      	mov	ip, r0
 80007fc:	1a59      	subs	r1, r3, r1
 80007fe:	b2a3      	uxth	r3, r4
 8000800:	fbb1 f0fe 	udiv	r0, r1, lr
 8000804:	fb0e 1410 	mls	r4, lr, r0, r1
 8000808:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800080c:	fb08 f800 	mul.w	r8, r8, r0
 8000810:	45a0      	cmp	r8, r4
 8000812:	d907      	bls.n	8000824 <__udivmoddi4+0x14c>
 8000814:	192c      	adds	r4, r5, r4
 8000816:	f100 33ff 	add.w	r3, r0, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x14a>
 800081c:	45a0      	cmp	r8, r4
 800081e:	f200 80b6 	bhi.w	800098e <__udivmoddi4+0x2b6>
 8000822:	4618      	mov	r0, r3
 8000824:	eba4 0408 	sub.w	r4, r4, r8
 8000828:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800082c:	e79f      	b.n	800076e <__udivmoddi4+0x96>
 800082e:	f1c7 0c20 	rsb	ip, r7, #32
 8000832:	40bb      	lsls	r3, r7
 8000834:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000838:	ea4e 0e03 	orr.w	lr, lr, r3
 800083c:	fa01 f407 	lsl.w	r4, r1, r7
 8000840:	fa20 f50c 	lsr.w	r5, r0, ip
 8000844:	fa21 f30c 	lsr.w	r3, r1, ip
 8000848:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800084c:	4325      	orrs	r5, r4
 800084e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000852:	0c2c      	lsrs	r4, r5, #16
 8000854:	fb08 3319 	mls	r3, r8, r9, r3
 8000858:	fa1f fa8e 	uxth.w	sl, lr
 800085c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000860:	fb09 f40a 	mul.w	r4, r9, sl
 8000864:	429c      	cmp	r4, r3
 8000866:	fa02 f207 	lsl.w	r2, r2, r7
 800086a:	fa00 f107 	lsl.w	r1, r0, r7
 800086e:	d90b      	bls.n	8000888 <__udivmoddi4+0x1b0>
 8000870:	eb1e 0303 	adds.w	r3, lr, r3
 8000874:	f109 30ff 	add.w	r0, r9, #4294967295
 8000878:	f080 8087 	bcs.w	800098a <__udivmoddi4+0x2b2>
 800087c:	429c      	cmp	r4, r3
 800087e:	f240 8084 	bls.w	800098a <__udivmoddi4+0x2b2>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4473      	add	r3, lr
 8000888:	1b1b      	subs	r3, r3, r4
 800088a:	b2ad      	uxth	r5, r5
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000898:	fb00 fa0a 	mul.w	sl, r0, sl
 800089c:	45a2      	cmp	sl, r4
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x1da>
 80008a0:	eb1e 0404 	adds.w	r4, lr, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	d26b      	bcs.n	8000982 <__udivmoddi4+0x2aa>
 80008aa:	45a2      	cmp	sl, r4
 80008ac:	d969      	bls.n	8000982 <__udivmoddi4+0x2aa>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4474      	add	r4, lr
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ba:	eba4 040a 	sub.w	r4, r4, sl
 80008be:	454c      	cmp	r4, r9
 80008c0:	46c2      	mov	sl, r8
 80008c2:	464b      	mov	r3, r9
 80008c4:	d354      	bcc.n	8000970 <__udivmoddi4+0x298>
 80008c6:	d051      	beq.n	800096c <__udivmoddi4+0x294>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d069      	beq.n	80009a0 <__udivmoddi4+0x2c8>
 80008cc:	ebb1 050a 	subs.w	r5, r1, sl
 80008d0:	eb64 0403 	sbc.w	r4, r4, r3
 80008d4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008d8:	40fd      	lsrs	r5, r7
 80008da:	40fc      	lsrs	r4, r7
 80008dc:	ea4c 0505 	orr.w	r5, ip, r5
 80008e0:	e9c6 5400 	strd	r5, r4, [r6]
 80008e4:	2700      	movs	r7, #0
 80008e6:	e747      	b.n	8000778 <__udivmoddi4+0xa0>
 80008e8:	f1c2 0320 	rsb	r3, r2, #32
 80008ec:	fa20 f703 	lsr.w	r7, r0, r3
 80008f0:	4095      	lsls	r5, r2
 80008f2:	fa01 f002 	lsl.w	r0, r1, r2
 80008f6:	fa21 f303 	lsr.w	r3, r1, r3
 80008fa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008fe:	4338      	orrs	r0, r7
 8000900:	0c01      	lsrs	r1, r0, #16
 8000902:	fbb3 f7fe 	udiv	r7, r3, lr
 8000906:	fa1f f885 	uxth.w	r8, r5
 800090a:	fb0e 3317 	mls	r3, lr, r7, r3
 800090e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000912:	fb07 f308 	mul.w	r3, r7, r8
 8000916:	428b      	cmp	r3, r1
 8000918:	fa04 f402 	lsl.w	r4, r4, r2
 800091c:	d907      	bls.n	800092e <__udivmoddi4+0x256>
 800091e:	1869      	adds	r1, r5, r1
 8000920:	f107 3cff 	add.w	ip, r7, #4294967295
 8000924:	d22f      	bcs.n	8000986 <__udivmoddi4+0x2ae>
 8000926:	428b      	cmp	r3, r1
 8000928:	d92d      	bls.n	8000986 <__udivmoddi4+0x2ae>
 800092a:	3f02      	subs	r7, #2
 800092c:	4429      	add	r1, r5
 800092e:	1acb      	subs	r3, r1, r3
 8000930:	b281      	uxth	r1, r0
 8000932:	fbb3 f0fe 	udiv	r0, r3, lr
 8000936:	fb0e 3310 	mls	r3, lr, r0, r3
 800093a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800093e:	fb00 f308 	mul.w	r3, r0, r8
 8000942:	428b      	cmp	r3, r1
 8000944:	d907      	bls.n	8000956 <__udivmoddi4+0x27e>
 8000946:	1869      	adds	r1, r5, r1
 8000948:	f100 3cff 	add.w	ip, r0, #4294967295
 800094c:	d217      	bcs.n	800097e <__udivmoddi4+0x2a6>
 800094e:	428b      	cmp	r3, r1
 8000950:	d915      	bls.n	800097e <__udivmoddi4+0x2a6>
 8000952:	3802      	subs	r0, #2
 8000954:	4429      	add	r1, r5
 8000956:	1ac9      	subs	r1, r1, r3
 8000958:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800095c:	e73b      	b.n	80007d6 <__udivmoddi4+0xfe>
 800095e:	4637      	mov	r7, r6
 8000960:	4630      	mov	r0, r6
 8000962:	e709      	b.n	8000778 <__udivmoddi4+0xa0>
 8000964:	4607      	mov	r7, r0
 8000966:	e6e7      	b.n	8000738 <__udivmoddi4+0x60>
 8000968:	4618      	mov	r0, r3
 800096a:	e6fb      	b.n	8000764 <__udivmoddi4+0x8c>
 800096c:	4541      	cmp	r1, r8
 800096e:	d2ab      	bcs.n	80008c8 <__udivmoddi4+0x1f0>
 8000970:	ebb8 0a02 	subs.w	sl, r8, r2
 8000974:	eb69 020e 	sbc.w	r2, r9, lr
 8000978:	3801      	subs	r0, #1
 800097a:	4613      	mov	r3, r2
 800097c:	e7a4      	b.n	80008c8 <__udivmoddi4+0x1f0>
 800097e:	4660      	mov	r0, ip
 8000980:	e7e9      	b.n	8000956 <__udivmoddi4+0x27e>
 8000982:	4618      	mov	r0, r3
 8000984:	e795      	b.n	80008b2 <__udivmoddi4+0x1da>
 8000986:	4667      	mov	r7, ip
 8000988:	e7d1      	b.n	800092e <__udivmoddi4+0x256>
 800098a:	4681      	mov	r9, r0
 800098c:	e77c      	b.n	8000888 <__udivmoddi4+0x1b0>
 800098e:	3802      	subs	r0, #2
 8000990:	442c      	add	r4, r5
 8000992:	e747      	b.n	8000824 <__udivmoddi4+0x14c>
 8000994:	f1ac 0c02 	sub.w	ip, ip, #2
 8000998:	442b      	add	r3, r5
 800099a:	e72f      	b.n	80007fc <__udivmoddi4+0x124>
 800099c:	4638      	mov	r0, r7
 800099e:	e708      	b.n	80007b2 <__udivmoddi4+0xda>
 80009a0:	4637      	mov	r7, r6
 80009a2:	e6e9      	b.n	8000778 <__udivmoddi4+0xa0>

080009a4 <__aeabi_idiv0>:
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <Info_UART>:
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
// Funkcja do szybkiego debugowania z wykorzystaniem UART
void Info_UART(char *info) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) info, strlen(info), HAL_MAX_DELAY); // tryb blokujacy
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fc15 	bl	80001e0 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <Info_UART+0x28>)
 80009c2:	f005 fc74 	bl	80062ae <HAL_UART_Transmit>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000718 	.word	0x20000718

080009d4 <HAL_GPIO_EXTI_Callback>:

// Przerwanie pochodzace od przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Blue_Button_Pin) {
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10d      	bne.n	8000a00 <HAL_GPIO_EXTI_Callback+0x2c>
		Info_UART("Wcisnieto przycisk\r\n");
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x34>)
 80009e6:	f7ff ffdf 	bl	80009a8 <Info_UART>

		// Zatrzymanie nagrywania gdy jest wlaczone
		if (recordingStatus == STATUS_RECORDING_ACTIVE) {
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d103      	bne.n	80009fa <HAL_GPIO_EXTI_Callback+0x26>
			recordingStatus = STATUS_RECORDING_INACTIVE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
		else {
			recordingStatus = STATUS_RECORDING_ACTIVE;
		}

	}
}
 80009f8:	e002      	b.n	8000a00 <HAL_GPIO_EXTI_Callback+0x2c>
			recordingStatus = STATUS_RECORDING_ACTIVE;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08010e04 	.word	0x08010e04
 8000a0c:	200004b4 	.word	0x200004b4

08000a10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a14:	f001 f9aa 	bl	8001d6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a18:	f000 f878 	bl	8000b0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a1c:	f000 f98e 	bl	8000d3c <MX_GPIO_Init>
	MX_DMA_Init();
 8000a20:	f000 f96c 	bl	8000cfc <MX_DMA_Init>
	MX_CRC_Init();
 8000a24:	f000 f8f6 	bl	8000c14 <MX_CRC_Init>
	MX_I2S2_Init();
 8000a28:	f000 f910 	bl	8000c4c <MX_I2S2_Init>
	MX_FATFS_Init();
 8000a2c:	f006 ffec 	bl	8007a08 <MX_FATFS_Init>
	MX_PDM2PCM_Init();
 8000a30:	f00c fdda 	bl	800d5e8 <MX_PDM2PCM_Init>
	MX_USB_HOST_Init();
 8000a34:	f00c fe02 	bl	800d63c <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 8000a38:	f000 f936 	bl	8000ca8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	Info_UART("-----------------------------------------\r\n");
 8000a3c:	4829      	ldr	r0, [pc, #164]	; (8000ae4 <main+0xd4>)
 8000a3e:	f7ff ffb3 	bl	80009a8 <Info_UART>
	Info_UART("Start programu\r\n");
 8000a42:	4829      	ldr	r0, [pc, #164]	; (8000ae8 <main+0xd8>)
 8000a44:	f7ff ffb0 	bl	80009a8 <Info_UART>

	// Inicjalizacja peryferiow potrzebnych do nagrywania dzwieku
	//BSP_AUDIO_IN_Init(AUDIO_IN_FREQUENCY, AUDIO_RESOLUTION, NUMBER_OF_CHANNELS);
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000a50:	f000 fa14 	bl	8000e7c <BSP_AUDIO_IN_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <main+0x52>
	DEFAULT_AUDIO_IN_BIT_RESOLUTION,
	DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK)
		Info_UART("NIE UDALO SIE ZAINICJALIZAOWAC AUDIO_IN\ (wav_recorder.c)\r\n");
 8000a5a:	4824      	ldr	r0, [pc, #144]	; (8000aec <main+0xdc>)
 8000a5c:	f7ff ffa4 	bl	80009a8 <Info_UART>
 8000a60:	e002      	b.n	8000a68 <main+0x58>
	else
		Info_UART("Zainicjalizowano AUDIO_IN \r\n");
 8000a62:	4823      	ldr	r0, [pc, #140]	; (8000af0 <main+0xe0>)
 8000a64:	f7ff ffa0 	bl	80009a8 <Info_UART>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000a68:	f00c fe0e 	bl	800d688 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */

		if (Appli_state == APPLICATION_READY) {
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <main+0xe4>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d12c      	bne.n	8000ace <main+0xbe>
			Info_UART("Zewnetrzna pamiec USB podlaczona\r\n\r\n");
 8000a74:	4820      	ldr	r0, [pc, #128]	; (8000af8 <main+0xe8>)
 8000a76:	f7ff ff97 	bl	80009a8 <Info_UART>
			while (Appli_state == APPLICATION_READY) {
 8000a7a:	e023      	b.n	8000ac4 <main+0xb4>

				//Info_UART("Czekam na sygnal do nagrywania...\r\n");

				if (recordingStatus == STATUS_RECORDING_ACTIVE) {
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <main+0xec>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d11f      	bne.n	8000ac4 <main+0xb4>
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8a:	481d      	ldr	r0, [pc, #116]	; (8000b00 <main+0xf0>)
 8000a8c:	f002 f8ee 	bl	8002c6c <HAL_GPIO_WritePin>
					WavRecordingProcess(recordsCounter);
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <main+0xf4>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fe7d 	bl	8001794 <WavRecordingProcess>
					StopRecording();
 8000a9a:	f000 fe73 	bl	8001784 <StopRecording>
					HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	4816      	ldr	r0, [pc, #88]	; (8000b00 <main+0xf0>)
 8000aa6:	f002 f8e1 	bl	8002c6c <HAL_GPIO_WritePin>
					if (++recordsCounter >= MAX_RECORDS) // maksymalnie 10 nagran, REC0 - REC9
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <main+0xf4>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <main+0xf4>)
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <main+0xf4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	d902      	bls.n	8000ac4 <main+0xb4>
						recordsCounter = 0;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <main+0xf4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
			while (Appli_state == APPLICATION_READY) {
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <main+0xe4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d0d7      	beq.n	8000a7c <main+0x6c>
 8000acc:	e7cc      	b.n	8000a68 <main+0x58>
				}
			}
		} else {
			Info_UART("Podlacz pamiec USB\r\n");
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <main+0xf8>)
 8000ad0:	f7ff ff6a 	bl	80009a8 <Info_UART>
			while (Appli_state != APPLICATION_READY) {
 8000ad4:	e001      	b.n	8000ada <main+0xca>
				MX_USB_HOST_Process();
 8000ad6:	f00c fdd7 	bl	800d688 <MX_USB_HOST_Process>
			while (Appli_state != APPLICATION_READY) {
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <main+0xe4>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d1f9      	bne.n	8000ad6 <main+0xc6>
		MX_USB_HOST_Process();
 8000ae2:	e7c1      	b.n	8000a68 <main+0x58>
 8000ae4:	08010e1c 	.word	0x08010e1c
 8000ae8:	08010e48 	.word	0x08010e48
 8000aec:	08010e5c 	.word	0x08010e5c
 8000af0:	08010e98 	.word	0x08010e98
 8000af4:	200006a4 	.word	0x200006a4
 8000af8:	08010eb8 	.word	0x08010eb8
 8000afc:	200004b4 	.word	0x200004b4
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	200004b1 	.word	0x200004b1
 8000b08:	08010ee0 	.word	0x08010ee0

08000b0c <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09a      	sub	sp, #104	; 0x68
 8000b10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b16:	2230      	movs	r2, #48	; 0x30
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00f f835 	bl	800fb8a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <SystemClock_Config+0x100>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <SystemClock_Config+0x100>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <SystemClock_Config+0x100>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <SystemClock_Config+0x104>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a2a      	ldr	r2, [pc, #168]	; (8000c10 <SystemClock_Config+0x104>)
 8000b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <SystemClock_Config+0x104>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000b92:	2360      	movs	r3, #96	; 0x60
 8000b94:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fd44 	bl	8005630 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xa6>
		Error_Handler();
 8000bae:	f000 f961 	bl	8000e74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2103      	movs	r1, #3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 ff9e 	bl	8005b10 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xd2>
		Error_Handler();
 8000bda:	f000 f94b 	bl	8000e74 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000be2:	23c0      	movs	r3, #192	; 0xc0
 8000be4:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8000be6:	2304      	movs	r3, #4
 8000be8:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 f97e 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xf6>
		Error_Handler();
 8000bfe:	f000 f939 	bl	8000e74 <Error_Handler>
	}
}
 8000c02:	bf00      	nop
 8000c04:	3768      	adds	r7, #104	; 0x68
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_CRC_Init+0x30>)
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_CRC_Init+0x34>)
 8000c1c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <MX_CRC_Init+0x30>)
 8000c20:	f001 fa49 	bl	80020b6 <HAL_CRC_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_CRC_Init+0x1a>
		Error_Handler();
 8000c2a:	f000 f923 	bl	8000e74 <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <MX_CRC_Init+0x30>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <MX_CRC_Init+0x30>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0201 	orr.w	r2, r2, #1
 8000c3c:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200006b0 	.word	0x200006b0
 8000c48:	40023000 	.word	0x40023000

08000c4c <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <MX_I2S2_Init+0x58>)
 8000c54:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5c:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c72:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000c76:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_I2S2_Init+0x54>)
 8000c8c:	f003 fd12 	bl	80046b4 <HAL_I2S_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2S2_Init+0x4e>
		Error_Handler();
 8000c96:	f000 f8ed 	bl	8000e74 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000758 	.word	0x20000758
 8000ca4:	40003800 	.word	0x40003800

08000ca8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_USART2_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cb8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f005 fa98 	bl	8006214 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000cea:	f000 f8c3 	bl	8000e74 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000718 	.word	0x20000718
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_DMA_Init+0x3c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <MX_DMA_Init+0x3c>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_DMA_Init+0x3c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	200e      	movs	r0, #14
 8000d24:	f001 f991 	bl	800204a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d28:	200e      	movs	r0, #14
 8000d2a:	f001 f9aa 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a3a      	ldr	r2, [pc, #232]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a2c      	ldr	r2, [pc, #176]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_GPIO_Init+0x124>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4820      	ldr	r0, [pc, #128]	; (8000e64 <MX_GPIO_Init+0x128>)
 8000de4:	f001 ff42 	bl	8002c6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000dee:	481e      	ldr	r0, [pc, #120]	; (8000e68 <MX_GPIO_Init+0x12c>)
 8000df0:	f001 ff3c 	bl	8002c6c <HAL_GPIO_WritePin>
	LED_Green_Pin | LED_Orange_Pin | LED_Red_Pin | LED_Blue_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4816      	ldr	r0, [pc, #88]	; (8000e64 <MX_GPIO_Init+0x128>)
 8000e0c:	f001 fdac 	bl	8002968 <HAL_GPIO_Init>

	/*Configure GPIO pin : Blue_Button_Pin */
	GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_GPIO_Init+0x130>)
 8000e16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_GPIO_Init+0x134>)
 8000e24:	f001 fda0 	bl	8002968 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_Green_Pin LED_Orange_Pin LED_Red_Pin LED_Blue_Pin */
	GPIO_InitStruct.Pin = LED_Green_Pin | LED_Orange_Pin | LED_Red_Pin
 8000e28:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e2c:	617b      	str	r3, [r7, #20]
			| LED_Blue_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <MX_GPIO_Init+0x12c>)
 8000e42:	f001 fd91 	bl	8002968 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f001 f8fd 	bl	800204a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e50:	2006      	movs	r0, #6
 8000e52:	f001 f916 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020800 	.word	0x40020800
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	10110000 	.word	0x10110000
 8000e70:	40020000 	.word	0x40020000

08000e74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e7a:	e7fe      	b.n	8000e7a <Error_Handler+0x6>

08000e7c <BSP_AUDIO_IN_Init>:
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 * @param  BitRes: Audio Bit resolution.
 * @param  ChnlNbr: Audio Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	/* Configure PLL clock */
	BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <BSP_AUDIO_IN_Init+0x4c>)
 8000e8e:	f000 f8d1 	bl	8001034 <BSP_AUDIO_IN_ClockConfig>

	/* Configure the PDM library */
	/* On STM32F411E-Discovery a single microphone is mounted, samples are duplicated
	 to make stereo audio streams */
	PDMDecoder_Init(AudioFreq, ChnlNbr, 2);
 8000e92:	2202      	movs	r2, #2
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 f9b2 	bl	8001200 <PDMDecoder_Init>

	/* Configure the I2S peripheral */
	hAudioInI2s.Instance = I2S2;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <BSP_AUDIO_IN_Init+0x4c>)
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <BSP_AUDIO_IN_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET) {
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <BSP_AUDIO_IN_Init+0x4c>)
 8000ea4:	f003 ffe6 	bl	8004e74 <HAL_I2S_GetState>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <BSP_AUDIO_IN_Init+0x3a>
		/* Initialize the I2S Msp: this __weak function can be rewritten by the application */
		BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <BSP_AUDIO_IN_Init+0x4c>)
 8000eb2:	f000 f8ef 	bl	8001094 <BSP_AUDIO_IN_MspInit>
	}

	/* Configure the I2S2 */
	I2S2_Init(AudioFreq);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 fa3c 	bl	8001334 <I2S2_Init>

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000844 	.word	0x20000844
 8000ecc:	40003800 	.word	0x40003800

08000ed0 <BSP_AUDIO_IN_Record>:
 * @brief  Starts audio recording.
 * @param  pbuf: Main buffer pointer for the recorded data storing
 * @param  size: Current size of the recorded buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Record(uint16_t *pbuf, uint32_t size) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	uint32_t ret = AUDIO_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]

	/* Start the process receive DMA */
	HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <BSP_AUDIO_IN_Record+0x2c>)
 8000ee8:	f003 fd24 	bl	8004934 <HAL_I2S_Receive_DMA>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

	return ret;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	b2db      	uxtb	r3, r3
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000844 	.word	0x20000844

08000f00 <BSP_AUDIO_IN_Stop>:

/**
 * @brief  Stops audio recording.
 */
uint8_t BSP_AUDIO_IN_Stop(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	uint32_t ret = AUDIO_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	607b      	str	r3, [r7, #4]

	/* Call the Media layer pause function */
	HAL_I2S_DMAStop(&hAudioInI2s);
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <BSP_AUDIO_IN_Stop+0x20>)
 8000f0c:	f003 fdce 	bl	8004aac <HAL_I2S_DMAStop>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]

	return ret;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000844 	.word	0x20000844

08000f24 <BSP_AUDIO_IN_PDMToPCM>:
 * @brief  Converts audio format from PDM to PCM.
 * @param  PDMBuf: Pointer to data PDM buffer
 * @param  PCMBuf: Pointer to data PCM buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0a4      	sub	sp, #144	; 0x90
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	uint16_t AppPDM[INTERNAL_BUFF_SIZE / 2];
	uint32_t index = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/* PDM Demux */
	for (index = 0; index < INTERNAL_BUFF_SIZE / 2; index++) {
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f3a:	e020      	b.n	8000f7e <BSP_AUDIO_IN_PDMToPCM+0x5a>
		AppPDM[index] = HTONS(PDMBuf[index]);
 8000f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	440b      	add	r3, r1
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000f6e:	440b      	add	r3, r1
 8000f70:	f823 2c84 	strh.w	r2, [r3, #-132]
	for (index = 0; index < INTERNAL_BUFF_SIZE / 2; index++) {
 8000f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f82:	2b3f      	cmp	r3, #63	; 0x3f
 8000f84:	d9da      	bls.n	8000f3c <BSP_AUDIO_IN_PDMToPCM+0x18>
	}

	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000f8c:	e019      	b.n	8000fc2 <BSP_AUDIO_IN_PDMToPCM+0x9e>
		/* PDM to PCM filter */
		PDM_Filter((uint8_t*) &AppPDM[index], (uint16_t*) &(PCMBuf[index]),
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	18d0      	adds	r0, r2, r3
 8000f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	18d1      	adds	r1, r2, r3
 8000fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fa8:	224c      	movs	r2, #76	; 0x4c
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <BSP_AUDIO_IN_PDMToPCM+0xe4>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f00e fd4a 	bl	800fa4c <PDM_Filter>
	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8000fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0e1      	beq.n	8000f8e <BSP_AUDIO_IN_PDMToPCM+0x6a>
				&PDM_FilterHandler[index]);
	}

	/* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
	for (index = 0; index < PCM_OUT_SIZE; index++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000fd0:	e011      	b.n	8000ff6 <BSP_AUDIO_IN_PDMToPCM+0xd2>
		PCMBuf[(index << 1) + 1] = PCMBuf[index << 1];
 8000fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	441a      	add	r2, r3
 8000fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	440b      	add	r3, r1
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	801a      	strh	r2, [r3, #0]
	for (index = 0; index < PCM_OUT_SIZE; index++) {
 8000fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	d9e9      	bls.n	8000fd2 <BSP_AUDIO_IN_PDMToPCM+0xae>
	}

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3790      	adds	r7, #144	; 0x90
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200007ac 	.word	0x200007ac

0800100c <HAL_I2S_RxCpltCallback>:

/**
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	/* Call the record update function to get the next buffer to fill and its size (size is ignored) */
	BSP_AUDIO_IN_TransferComplete_CallBack();
 8001014:	f000 fdf8 	bl	8001c08 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_I2S_RxHalfCpltCallback>:

/**
 * @brief  Rx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001028:	f000 fe32 	bl	8001c90 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <BSP_AUDIO_IN_ClockConfig>:
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 * @note   This API is called by BSP_AUDIO_IN_Init()
 *         Being __weak it can be overwritten by the application
 */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s,
		uint32_t AudioFreq, void *Params) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;

	/* Enable PLLI2S clock */
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4618      	mov	r0, r3
 8001046:	f005 f845 	bl	80060d4 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	if ((AudioFreq & 0x7) == 0) {
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10d      	bne.n	8001070 <BSP_AUDIO_IN_ClockConfig+0x3c>
		/* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
		/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
		/* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001054:	2301      	movs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SM = 8;
 8001058:	2308      	movs	r3, #8
 800105a:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = 192;
 800105c:	23c0      	movs	r3, #192	; 0xc0
 800105e:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = 6;
 8001060:	2306      	movs	r3, #6
 8001062:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f004 ff43 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PLLI2S.PLLI2SM = 8;
		rccclkinit.PLLI2S.PLLI2SN = 290;
		rccclkinit.PLLI2S.PLLI2SR = 2;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 800106e:	e00d      	b.n	800108c <BSP_AUDIO_IN_ClockConfig+0x58>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SM = 8;
 8001074:	2308      	movs	r3, #8
 8001076:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SN = 290;
 8001078:	f44f 7391 	mov.w	r3, #290	; 0x122
 800107c:	61bb      	str	r3, [r7, #24]
		rccclkinit.PLLI2S.PLLI2SR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	61fb      	str	r3, [r7, #28]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	4618      	mov	r0, r3
 8001088:	f004 ff34 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <BSP_AUDIO_IN_MspInit>:
/**
 * @brief  BSP AUDIO IN MSP Init.
 * @param  hi2s: I2S handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sRx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the I2S2 peripheral clock */
	I2S2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]

	/* Enable I2S GPIO clocks */
	I2S2_SCK_GPIO_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
	I2S2_MOSI_GPIO_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

	/* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28

	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
 80010fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001102:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8001104:	2305      	movs	r3, #5
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	4833      	ldr	r0, [pc, #204]	; (80011dc <BSP_AUDIO_IN_MspInit+0x148>)
 8001110:	f001 fc2a 	bl	8002968 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S2_MOSI_PIN;
 8001114:	2308      	movs	r3, #8
 8001116:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8001118:	2305      	movs	r3, #5
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	482f      	ldr	r0, [pc, #188]	; (80011e0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8001124:	f001 fc20 	bl	8002968 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	I2S2_DMAx_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 8001132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <BSP_AUDIO_IN_MspInit+0x144>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

	if (hi2s->Instance == I2S2) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a26      	ldr	r2, [pc, #152]	; (80011e4 <BSP_AUDIO_IN_MspInit+0x150>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d137      	bne.n	80011be <BSP_AUDIO_IN_MspInit+0x12a>
		/* Configure the hdma_i2sRx handle parameters */
		hdma_i2sRx.Init.Channel = I2S2_DMAx_CHANNEL;
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
		hdma_i2sRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
		hdma_i2sRx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
		hdma_i2sRx.Init.MemInc = DMA_MINC_ENABLE;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001166:	611a      	str	r2, [r3, #16]
		hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 800116a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116e:	615a      	str	r2, [r3, #20]
		hdma_i2sRx.Init.MemDataAlignment = I2S2_DMAx_MEM_DATA_SIZE;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001176:	619a      	str	r2, [r3, #24]
		hdma_i2sRx.Init.Mode = DMA_CIRCULAR;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 800117a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800117e:	61da      	str	r2, [r3, #28]
		hdma_i2sRx.Init.Priority = DMA_PRIORITY_HIGH;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001182:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001186:	621a      	str	r2, [r3, #32]
		hdma_i2sRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sRx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001190:	2203      	movs	r2, #3
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sRx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 8001196:	2200      	movs	r2, #0
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sRx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 800119c:	2200      	movs	r2, #0
 800119e:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <BSP_AUDIO_IN_MspInit+0x158>)
 80011a4:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sRx);
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 80011b4:	f001 f84a 	bl	800224c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sRx);
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <BSP_AUDIO_IN_MspInit+0x154>)
 80011ba:	f000 ff99 	bl	80020f0 <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	210f      	movs	r1, #15
 80011c2:	200e      	movs	r0, #14
 80011c4:	f000 ff41 	bl	800204a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ);
 80011c8:	200e      	movs	r0, #14
 80011ca:	f000 ff5a 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40003800 	.word	0x40003800
 80011e8:	200004b8 	.word	0x200004b8
 80011ec:	40026058 	.word	0x40026058

080011f0 <BSP_AUDIO_IN_Error_Callback>:
}

/**
 * @brief  Audio IN Error callback function.
 */
__weak void BSP_AUDIO_IN_Error_Callback(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <PDMDecoder_Init>:
 * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
 * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
 *         Number of audio channels (1: mono; 2: stereo)
 */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn,
		uint32_t ChnlNbrOut) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

	/* Enable CRC peripheral to unlock the PDM library */
	__HAL_RCC_CRC_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	4b42      	ldr	r3, [pc, #264]	; (8001320 <PDMDecoder_Init+0x120>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a41      	ldr	r2, [pc, #260]	; (8001320 <PDMDecoder_Init+0x120>)
 800121a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <PDMDecoder_Init+0x120>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]

	for (index = 0; index < ChnlNbrIn; index++) {
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e06e      	b.n	8001310 <PDMDecoder_Init+0x110>
		/* Init PDM filters */
		PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8001232:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <PDMDecoder_Init+0x124>)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	214c      	movs	r1, #76	; 0x4c
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	2200      	movs	r2, #0
 8001240:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8001242:	4a38      	ldr	r2, [pc, #224]	; (8001324 <PDMDecoder_Init+0x124>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	214c      	movs	r1, #76	; 0x4c
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	3302      	adds	r3, #2
 8001250:	2200      	movs	r2, #0
 8001252:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8001254:	4a33      	ldr	r2, [pc, #204]	; (8001324 <PDMDecoder_Init+0x124>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	214c      	movs	r1, #76	; 0x4c
 800125a:	fb01 f303 	mul.w	r3, r1, r3
 800125e:	4413      	add	r3, r2
 8001260:	3304      	adds	r3, #4
 8001262:	4a31      	ldr	r2, [pc, #196]	; (8001328 <PDMDecoder_Init+0x128>)
 8001264:	601a      	str	r2, [r3, #0]
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b298      	uxth	r0, r3
 800126a:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <PDMDecoder_Init+0x124>)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	214c      	movs	r1, #76	; 0x4c
 8001270:	fb01 f303 	mul.w	r3, r1, r3
 8001274:	4413      	add	r3, r2
 8001276:	330a      	adds	r3, #10
 8001278:	4602      	mov	r2, r0
 800127a:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	b298      	uxth	r0, r3
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <PDMDecoder_Init+0x124>)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	214c      	movs	r1, #76	; 0x4c
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	3308      	adds	r3, #8
 800128e:	4602      	mov	r2, r0
 8001290:	801a      	strh	r2, [r3, #0]
		PDM_Filter_Init((PDM_Filter_Handler_t*) (&PDM_FilterHandler[index]));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	224c      	movs	r2, #76	; 0x4c
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <PDMDecoder_Init+0x124>)
 800129c:	4413      	add	r3, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f00e fa58 	bl	800f754 <PDM_Filter_Init>

		/* PDM lib config phase */
		PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <PDMDecoder_Init+0x12c>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	b298      	uxth	r0, r3
 80012b0:	491f      	ldr	r1, [pc, #124]	; (8001330 <PDMDecoder_Init+0x130>)
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	3302      	adds	r3, #2
 80012c0:	4602      	mov	r2, r0
 80012c2:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].mic_gain = 24;
 80012c4:	491a      	ldr	r1, [pc, #104]	; (8001330 <PDMDecoder_Init+0x130>)
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	440b      	add	r3, r1
 80012d2:	3304      	adds	r3, #4
 80012d4:	2218      	movs	r2, #24
 80012d6:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80012d8:	4915      	ldr	r1, [pc, #84]	; (8001330 <PDMDecoder_Init+0x130>)
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	440b      	add	r3, r1
 80012e6:	2202      	movs	r2, #2
 80012e8:	801a      	strh	r2, [r3, #0]
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	224c      	movs	r2, #76	; 0x4c
 80012ee:	fb02 f303 	mul.w	r3, r2, r3
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <PDMDecoder_Init+0x124>)
 80012f4:	1898      	adds	r0, r3, r2
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <PDMDecoder_Init+0x130>)
 8001302:	4413      	add	r3, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f00e faaf 	bl	800f868 <PDM_Filter_setConfig>
	for (index = 0; index < ChnlNbrIn; index++) {
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	429a      	cmp	r2, r3
 8001316:	d38c      	bcc.n	8001232 <PDMDecoder_Init+0x32>
				&PDM_FilterConfig[index]);
	}
}
 8001318:	bf00      	nop
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	200007ac 	.word	0x200007ac
 8001328:	7e809d48 	.word	0x7e809d48
 800132c:	10624dd3 	.word	0x10624dd3
 8001330:	200007a0 	.word	0x200007a0

08001334 <I2S2_Init>:
 * @note   This function assumes that the I2S input clock (through PLL_R in
 *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
 *         is already configured and ready to be used.
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S2_Init(uint32_t AudioFreq) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	/* Initialize the hAudioInI2s Instance parameter */
	hAudioInI2s.Instance = I2S2;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <I2S2_Init+0x68>)
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <I2S2_Init+0x6c>)
 8001340:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hAudioInI2s);
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <I2S2_Init+0x68>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <I2S2_Init+0x68>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001350:	61da      	str	r2, [r3, #28]

	/* I2S2 peripheral configuration */
	hAudioInI2s.Init.AudioFreq = 2 * AudioFreq;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4a11      	ldr	r2, [pc, #68]	; (800139c <I2S2_Init+0x68>)
 8001358:	6153      	str	r3, [r2, #20]
	hAudioInI2s.Init.ClockSource = I2S_CLOCK_PLL;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <I2S2_Init+0x68>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
	hAudioInI2s.Init.CPOL = I2S_CPOL_HIGH;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <I2S2_Init+0x68>)
 8001362:	2208      	movs	r2, #8
 8001364:	619a      	str	r2, [r3, #24]
	hAudioInI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <I2S2_Init+0x68>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
	hAudioInI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <I2S2_Init+0x68>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
	hAudioInI2s.Init.Mode = I2S_MODE_MASTER_RX;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <I2S2_Init+0x68>)
 8001374:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001378:	605a      	str	r2, [r3, #4]
	hAudioInI2s.Init.Standard = I2S_STANDARD_LSB;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <I2S2_Init+0x68>)
 800137c:	2220      	movs	r2, #32
 800137e:	609a      	str	r2, [r3, #8]

	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK) {
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <I2S2_Init+0x68>)
 8001382:	f003 f997 	bl	80046b4 <HAL_I2S_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <I2S2_Init+0x5c>
		return AUDIO_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <I2S2_Init+0x5e>
	} else {
		return AUDIO_OK;
 8001390:	2300      	movs	r3, #0
	}
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000844 	.word	0x20000844
 80013a0:	40003800 	.word	0x40003800

080013a4 <HAL_I2S_ErrorCallback>:

/**
 * @brief  I2S error callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	/* Manage the error generated on DMA FIFO: This function
	 should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */
	/*if (hi2s->Instance == I2S3) {
	 BSP_AUDIO_OUT_Error_CallBack();
	 }*/
	if (hi2s->Instance == I2S2) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_I2S_ErrorCallback+0x20>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_I2S_ErrorCallback+0x16>
		BSP_AUDIO_IN_Error_Callback();
 80013b6:	f7ff ff1b 	bl	80011f0 <BSP_AUDIO_IN_Error_Callback>
	}
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40003800 	.word	0x40003800

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_CRC_MspInit+0x3c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10d      	bne.n	8001446 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_CRC_MspInit+0x40>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_CRC_MspInit+0x40>)
 8001434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_CRC_MspInit+0x40>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023000 	.word	0x40023000
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a41      	ldr	r2, [pc, #260]	; (8001580 <HAL_I2S_MspInit+0x124>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d17b      	bne.n	8001576 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <HAL_I2S_MspInit+0x128>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <HAL_I2S_MspInit+0x128>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_I2S_MspInit+0x128>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_I2S_MspInit+0x128>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a38      	ldr	r2, [pc, #224]	; (8001584 <HAL_I2S_MspInit+0x128>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <HAL_I2S_MspInit+0x128>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b32      	ldr	r3, [pc, #200]	; (8001584 <HAL_I2S_MspInit+0x128>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_I2S_MspInit+0x128>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_I2S_MspInit+0x128>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d2:	2308      	movs	r3, #8
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e2:	2305      	movs	r3, #5
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4826      	ldr	r0, [pc, #152]	; (8001588 <HAL_I2S_MspInit+0x12c>)
 80014ee:	f001 fa3b 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80014f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001504:	2305      	movs	r3, #5
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <HAL_I2S_MspInit+0x130>)
 8001510:	f001 fa2a 	bl	8002968 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_I2S_MspInit+0x138>)
 8001518:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_I2S_MspInit+0x134>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_I2S_MspInit+0x134>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_I2S_MspInit+0x134>)
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_I2S_MspInit+0x134>)
 800154e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001552:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_I2S_MspInit+0x134>)
 800155c:	f000 fdc8 	bl	80020f0 <HAL_DMA_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8001566:	f7ff fc85 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_I2S_MspInit+0x134>)
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_I2S_MspInit+0x134>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40003800 	.word	0x40003800
 8001584:	40023800 	.word	0x40023800
 8001588:	40020800 	.word	0x40020800
 800158c:	40020400 	.word	0x40020400
 8001590:	200006b8 	.word	0x200006b8
 8001594:	40026058 	.word	0x40026058

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_UART_MspInit+0x8c>)
 800160e:	f001 f9ab 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* Test on the command: Recording */
	if (recordingStatus == STATUS_RECORDING_ACTIVE) {
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <SysTick_Handler+0x38>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d110      	bne.n	800169e <SysTick_Handler+0x2e>
		/* Increment the time recording base variable */
		recordingTime++;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <SysTick_Handler+0x3c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Handler+0x3c>)
 8001684:	6013      	str	r3, [r2, #0]
		if (recordingTime == 30000) {
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <SysTick_Handler+0x3c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f247 5230 	movw	r2, #30000	; 0x7530
 800168e:	4293      	cmp	r3, r2
 8001690:	d105      	bne.n	800169e <SysTick_Handler+0x2e>
			HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <SysTick_Handler+0x40>)
 800169a:	f001 fae7 	bl	8002c6c <HAL_GPIO_WritePin>
		}
	}

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800169e:	f000 fbb7 	bl	8001e10 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200004b4 	.word	0x200004b4
 80016ac:	20000518 	.word	0x20000518
 80016b0:	40020c00 	.word	0x40020c00

080016b4 <EXTI0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line0 interrupt.
 */
void EXTI0_IRQHandler(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI0_IRQn 0 */

	/* USER CODE END EXTI0_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f001 faf1 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI0_IRQn 1 */

	/* USER CODE END EXTI0_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

	/* USER CODE END DMA1_Stream3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Stream3_IRQHandler+0x10>)
 80016ca:	f000 fee5 	bl	8002498 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

	/* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200006b8 	.word	0x200006b8

080016d8 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB On The Go FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <OTG_FS_IRQHandler+0x10>)
 80016de:	f001 fd87 	bl	80031f0 <HAL_HCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20005d8c 	.word	0x20005d8c

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f00e f9f0 	bl	800fb00 <__errno>
 8001720:	4602      	mov	r2, r0
 8001722:	230c      	movs	r3, #12
 8001724:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20020000 	.word	0x20020000
 800174c:	00000400 	.word	0x00000400
 8001750:	2000051c 	.word	0x2000051c
 8001754:	20006058 	.word	0x20006058

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <SystemInit+0x28>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <SystemInit+0x28>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SystemInit+0x28>)
 800176e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001772:	609a      	str	r2, [r3, #8]
#endif
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <StopRecording>:
// Poczatek nagrywania
uint8_t StartRecording(uint16_t *buff, uint32_t dataSize) {
	return (BSP_AUDIO_IN_Record(buff, dataSize));
}
// Koniec nagrywania
uint32_t StopRecording(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	return BSP_AUDIO_IN_Stop();
 8001788:	f7ff fbba 	bl	8000f00 <BSP_AUDIO_IN_Stop>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <WavRecordingProcess>:

// Nagrywanie
void WavRecordingProcess(uint8_t recordNumber) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]

	// Rozmiar nagranych danych w bajtach
	uint32_t bytesWritten = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]

	// Zamontowanie zew. pamieci USB
	if (f_mount(&USBHFatFS, USBHPath, 1) != FR_OK) {
 80017a2:	2201      	movs	r2, #1
 80017a4:	496a      	ldr	r1, [pc, #424]	; (8001950 <WavRecordingProcess+0x1bc>)
 80017a6:	486b      	ldr	r0, [pc, #428]	; (8001954 <WavRecordingProcess+0x1c0>)
 80017a8:	f00a ffa4 	bl	800c6f4 <f_mount>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <WavRecordingProcess+0x26>
		Info_UART("NIE ZAMONTOWANO POPRAWNIE USB (main.c)\r\n");
 80017b2:	4869      	ldr	r0, [pc, #420]	; (8001958 <WavRecordingProcess+0x1c4>)
 80017b4:	f7ff f8f8 	bl	80009a8 <Info_UART>
 80017b8:	e002      	b.n	80017c0 <WavRecordingProcess+0x2c>
	} else {
		Info_UART("Zamontowano USB\r\n");
 80017ba:	4868      	ldr	r0, [pc, #416]	; (800195c <WavRecordingProcess+0x1c8>)
 80017bc:	f7ff f8f4 	bl	80009a8 <Info_UART>
	}

	// Ustalenie nazwy pliku
	char filename[] = "RECn.wav";
 80017c0:	4a67      	ldr	r2, [pc, #412]	; (8001960 <WavRecordingProcess+0x1cc>)
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c8:	c303      	stmia	r3!, {r0, r1}
 80017ca:	701a      	strb	r2, [r3, #0]
	sprintf(filename, "REC%d.wav", recordNumber);
 80017cc:	79fa      	ldrb	r2, [r7, #7]
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4964      	ldr	r1, [pc, #400]	; (8001964 <WavRecordingProcess+0x1d0>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00e fa99 	bl	800fd0c <siprintf>
	Info_UART("Nazwa pliku: ");
 80017da:	4863      	ldr	r0, [pc, #396]	; (8001968 <WavRecordingProcess+0x1d4>)
 80017dc:	f7ff f8e4 	bl	80009a8 <Info_UART>
	Info_UART(filename);
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff f8df 	bl	80009a8 <Info_UART>
	Info_UART("\r\n");
 80017ea:	4860      	ldr	r0, [pc, #384]	; (800196c <WavRecordingProcess+0x1d8>)
 80017ec:	f7ff f8dc 	bl	80009a8 <Info_UART>

	// Jezeli plik istnieje, zostanie nadpisany
	f_unlink(filename);
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00b fdef 	bl	800d3d8 <f_unlink>

	// Plik jest otwierany/tworzony
	if ((f_open(&WavFile, filename, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)) {
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	220a      	movs	r2, #10
 8001800:	4619      	mov	r1, r3
 8001802:	485b      	ldr	r0, [pc, #364]	; (8001970 <WavRecordingProcess+0x1dc>)
 8001804:	f00a ffbc 	bl	800c780 <f_open>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <WavRecordingProcess+0x82>
		Info_UART("NIE MOGE OTWORZYC PLIKU (wav_recorder.c)\r\n");
 800180e:	4859      	ldr	r0, [pc, #356]	; (8001974 <WavRecordingProcess+0x1e0>)
 8001810:	f7ff f8ca 	bl	80009a8 <Info_UART>
 8001814:	e002      	b.n	800181c <WavRecordingProcess+0x88>
	} else {
		Info_UART("Otworzono plik (wav_recorder.c)\r\n");
 8001816:	4858      	ldr	r0, [pc, #352]	; (8001978 <WavRecordingProcess+0x1e4>)
 8001818:	f7ff f8c6 	bl	80009a8 <Info_UART>
	}

	// Stworzenie wstepnego naglowka pliku .wav
	// Potem zostanie zaktualizowany o informacje o nagraniu
	WavFileHeaderInit(header);
 800181c:	4857      	ldr	r0, [pc, #348]	; (800197c <WavRecordingProcess+0x1e8>)
 800181e:	f000 f8d7 	bl	80019d0 <WavFileHeaderInit>

	// Wpisanie naglowka do pliku
	if ((f_write(&WavFile, header, 44, (void*) &bytesWritten) != FR_OK)) {
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	222c      	movs	r2, #44	; 0x2c
 8001828:	4954      	ldr	r1, [pc, #336]	; (800197c <WavRecordingProcess+0x1e8>)
 800182a:	4851      	ldr	r0, [pc, #324]	; (8001970 <WavRecordingProcess+0x1dc>)
 800182c:	f00b f974 	bl	800cb18 <f_write>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <WavRecordingProcess+0xa8>
		Info_UART("PROBLEM Z WPISANIE NAGLOWKA DO PLIKU (wav_recorder.c)\r\n");
 8001836:	4852      	ldr	r0, [pc, #328]	; (8001980 <WavRecordingProcess+0x1ec>)
 8001838:	f7ff f8b6 	bl	80009a8 <Info_UART>
	}

	// Pierwszy zapis rozmiaru danych
	dataSize = bytesWritten;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4a51      	ldr	r2, [pc, #324]	; (8001984 <WavRecordingProcess+0x1f0>)
 8001840:	6013      	str	r3, [r2, #0]

	// Rozpoczecie nagrywania
	if (BSP_AUDIO_IN_Record((uint16_t*) &internalBuffer[0],
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	4850      	ldr	r0, [pc, #320]	; (8001988 <WavRecordingProcess+0x1f4>)
 8001846:	f7ff fb43 	bl	8000ed0 <BSP_AUDIO_IN_Record>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <WavRecordingProcess+0xc4>
	INTERNAL_BUFF_SIZE) != AUDIO_OK)
		Info_UART("NIE UDALO SIE ROZPOCZECIA NAGRYWANIA (wav_recorder.c)\r\n");
 8001850:	484e      	ldr	r0, [pc, #312]	; (800198c <WavRecordingProcess+0x1f8>)
 8001852:	f7ff f8a9 	bl	80009a8 <Info_UART>
 8001856:	e002      	b.n	800185e <WavRecordingProcess+0xca>
	else
		Info_UART("Rozpoczeto nagrywanie \r\n");
 8001858:	484d      	ldr	r0, [pc, #308]	; (8001990 <WavRecordingProcess+0x1fc>)
 800185a:	f7ff f8a5 	bl	80009a8 <Info_UART>

	// Reset czasu trwania nagrania.
	// Samo odliczanie ma miejsce w pliku stm32f4xx_it.c
	recordingTime = 0;
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <WavRecordingProcess+0x200>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

	// licznik danych
	counter = 0;
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <WavRecordingProcess+0x204>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

	while (1) {
		// Jezeli czas nagrywania nie zostal przekroczony
		if (recordingTime <= MAX_RECORDING_TIME) {
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <WavRecordingProcess+0x200>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001872:	4293      	cmp	r3, r2
 8001874:	d829      	bhi.n	80018ca <WavRecordingProcess+0x136>

			// Sprawdza, czy sa dostepne dane do wprowadzenia do pliku .wav
			if (dataReady) {
 8001876:	4b49      	ldr	r3, [pc, #292]	; (800199c <WavRecordingProcess+0x208>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01a      	beq.n	80018b6 <WavRecordingProcess+0x122>
				//HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
				// Wyzerowanie flagi
				dataReady = 0;
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <WavRecordingProcess+0x208>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]

				// Wpisanie danych do pliku
				if (f_write(&WavFile, (uint8_t*) (recBuffer + bufferOffset),
 8001886:	4b46      	ldr	r3, [pc, #280]	; (80019a0 <WavRecordingProcess+0x20c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <WavRecordingProcess+0x210>)
 800188e:	1899      	adds	r1, r3, r2
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001898:	4835      	ldr	r0, [pc, #212]	; (8001970 <WavRecordingProcess+0x1dc>)
 800189a:	f00b f93d 	bl	800cb18 <f_write>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <WavRecordingProcess+0x116>
				RECBUFFER_SIZE, (void*) &bytesWritten) != FR_OK) {
					Info_UART(
 80018a4:	4840      	ldr	r0, [pc, #256]	; (80019a8 <WavRecordingProcess+0x214>)
 80018a6:	f7ff f87f 	bl	80009a8 <Info_UART>
							"BLAD PRZY WPROWADZANIU DANYCH DO PLIKU (wav_recorder.c)\r\n");
				}

				// Kolejny zapis do rozmiaru danych
				dataSize += bytesWritten;
 80018aa:	4b36      	ldr	r3, [pc, #216]	; (8001984 <WavRecordingProcess+0x1f0>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <WavRecordingProcess+0x1f0>)
 80018b4:	6013      	str	r3, [r2, #0]
			}

			// Jezeli przycisk zostal wcisniety, to zmienil sie status nagrywania
			if (recordingStatus == STATUS_RECORDING_INACTIVE) {
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <WavRecordingProcess+0x218>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1d5      	bne.n	800186a <WavRecordingProcess+0xd6>
				StopRecording();
 80018be:	f7ff ff61 	bl	8001784 <StopRecording>
				Info_UART("Koniec nagrywania - przycisk\r\n");
 80018c2:	483b      	ldr	r0, [pc, #236]	; (80019b0 <WavRecordingProcess+0x21c>)
 80018c4:	f7ff f870 	bl	80009a8 <Info_UART>
				break;
 80018c8:	e00a      	b.n	80018e0 <WavRecordingProcess+0x14c>
			}
		}
		// Jezeli przekroczono czas nagrywania
		else {
			StopRecording();
 80018ca:	f7ff ff5b 	bl	8001784 <StopRecording>
			dataReady = 0;
 80018ce:	4b33      	ldr	r3, [pc, #204]	; (800199c <WavRecordingProcess+0x208>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			recordingStatus = STATUS_RECORDING_INACTIVE; // zmiana statusu
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <WavRecordingProcess+0x218>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
			Info_UART("Koniec nagrywania - timeout\r\n");
 80018da:	4836      	ldr	r0, [pc, #216]	; (80019b4 <WavRecordingProcess+0x220>)
 80018dc:	f7ff f864 	bl	80009a8 <Info_UART>
	}

	// Po zakonczonym nagrywaniu trzeba zaktualizowac naglowek

	// Przesuwa wskaznik odczytu odczytu/zapisu pliku na poczatek (dla zachowania sposobu zapisu naglowka pliku)
	f_lseek(&WavFile, 0);
 80018e0:	2100      	movs	r1, #0
 80018e2:	4823      	ldr	r0, [pc, #140]	; (8001970 <WavRecordingProcess+0x1dc>)
 80018e4:	f00b fb54 	bl	800cf90 <f_lseek>

	// Aktualizuje naglowek o nowe informacje o nagraniu
	WavFileHeaderUpdate(header);
 80018e8:	4824      	ldr	r0, [pc, #144]	; (800197c <WavRecordingProcess+0x1e8>)
 80018ea:	f000 f945 	bl	8001b78 <WavFileHeaderUpdate>

	// Wpisanie zaktualizowanego naglowka do pliku
	if (f_write(&WavFile, header, 44, (void*) bytesWritten) != FR_OK)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	222c      	movs	r2, #44	; 0x2c
 80018f2:	4922      	ldr	r1, [pc, #136]	; (800197c <WavRecordingProcess+0x1e8>)
 80018f4:	481e      	ldr	r0, [pc, #120]	; (8001970 <WavRecordingProcess+0x1dc>)
 80018f6:	f00b f90f 	bl	800cb18 <f_write>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <WavRecordingProcess+0x174>
		Info_UART(
 8001900:	482d      	ldr	r0, [pc, #180]	; (80019b8 <WavRecordingProcess+0x224>)
 8001902:	f7ff f851 	bl	80009a8 <Info_UART>
 8001906:	e002      	b.n	800190e <WavRecordingProcess+0x17a>
				"NIE UDALO SIE AKTUALIZOWANIE NAGLOWKA USB (wav_recorder.c)\r\n");
	else
		Info_UART("Naglowek zaktualizowany\r\n");
 8001908:	482c      	ldr	r0, [pc, #176]	; (80019bc <WavRecordingProcess+0x228>)
 800190a:	f7ff f84d 	bl	80009a8 <Info_UART>

	// Zamkniecie pliku
	if (f_close(&WavFile) != FR_OK)
 800190e:	4818      	ldr	r0, [pc, #96]	; (8001970 <WavRecordingProcess+0x1dc>)
 8001910:	f00b fb14 	bl	800cf3c <f_close>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <WavRecordingProcess+0x18e>
		Info_UART("NIE UDALO SIE ZAMKNIECIE PLIKU (wav_recorder.c)\r\n");
 800191a:	4829      	ldr	r0, [pc, #164]	; (80019c0 <WavRecordingProcess+0x22c>)
 800191c:	f7ff f844 	bl	80009a8 <Info_UART>
 8001920:	e002      	b.n	8001928 <WavRecordingProcess+0x194>
	else
		Info_UART("Plik zamkniety\r\n");
 8001922:	4828      	ldr	r0, [pc, #160]	; (80019c4 <WavRecordingProcess+0x230>)
 8001924:	f7ff f840 	bl	80009a8 <Info_UART>

	// Odmontowanie pamieci USB
	if (f_mount(NULL, USBHPath, 1) != FR_OK)
 8001928:	2201      	movs	r2, #1
 800192a:	4909      	ldr	r1, [pc, #36]	; (8001950 <WavRecordingProcess+0x1bc>)
 800192c:	2000      	movs	r0, #0
 800192e:	f00a fee1 	bl	800c6f4 <f_mount>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <WavRecordingProcess+0x1ac>
		Info_UART("NIE UDALO SIE ODMONTOWANIE USB (wav_recorder.c)\r\n");
 8001938:	4823      	ldr	r0, [pc, #140]	; (80019c8 <WavRecordingProcess+0x234>)
 800193a:	f7ff f835 	bl	80009a8 <Info_UART>
	else
		Info_UART("Odmontowano USB\r\n\r\n");
}
 800193e:	e002      	b.n	8001946 <WavRecordingProcess+0x1b2>
		Info_UART("Odmontowano USB\r\n\r\n");
 8001940:	4822      	ldr	r0, [pc, #136]	; (80019cc <WavRecordingProcess+0x238>)
 8001942:	f7ff f831 	bl	80009a8 <Info_UART>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200038f4 	.word	0x200038f4
 8001954:	20004928 	.word	0x20004928
 8001958:	08010ef8 	.word	0x08010ef8
 800195c:	08010f24 	.word	0x08010f24
 8001960:	0801119c 	.word	0x0801119c
 8001964:	08010f38 	.word	0x08010f38
 8001968:	08010f44 	.word	0x08010f44
 800196c:	08010f54 	.word	0x08010f54
 8001970:	200028c0 	.word	0x200028c0
 8001974:	08010f58 	.word	0x08010f58
 8001978:	08010f84 	.word	0x08010f84
 800197c:	20002890 	.word	0x20002890
 8001980:	08010fa8 	.word	0x08010fa8
 8001984:	2000088c 	.word	0x2000088c
 8001988:	20000520 	.word	0x20000520
 800198c:	08010fe0 	.word	0x08010fe0
 8001990:	08011018 	.word	0x08011018
 8001994:	20000518 	.word	0x20000518
 8001998:	20000668 	.word	0x20000668
 800199c:	20000660 	.word	0x20000660
 80019a0:	20000664 	.word	0x20000664
 80019a4:	20000890 	.word	0x20000890
 80019a8:	08011034 	.word	0x08011034
 80019ac:	200004b4 	.word	0x200004b4
 80019b0:	08011070 	.word	0x08011070
 80019b4:	08011090 	.word	0x08011090
 80019b8:	080110b0 	.word	0x080110b0
 80019bc:	080110f0 	.word	0x080110f0
 80019c0:	0801110c 	.word	0x0801110c
 80019c4:	08011140 	.word	0x08011140
 80019c8:	08011154 	.word	0x08011154
 80019cc:	08011188 	.word	0x08011188

080019d0 <WavFileHeaderInit>:

//static uint32_t WavFileHeaderInit(uint32_t *header)
static void WavFileHeaderInit(uint8_t *header) {
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	// Format wav rozpoczyna sie od znakow "RIFF"
	header[0] = 'R';
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2252      	movs	r2, #82	; 0x52
 80019dc:	701a      	strb	r2, [r3, #0]
	header[1] = 'I';
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3301      	adds	r3, #1
 80019e2:	2249      	movs	r2, #73	; 0x49
 80019e4:	701a      	strb	r2, [r3, #0]
	header[2] = 'F';
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3302      	adds	r3, #2
 80019ea:	2246      	movs	r2, #70	; 0x46
 80019ec:	701a      	strb	r2, [r3, #0]
	header[3] = 'F';
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3303      	adds	r3, #3
 80019f2:	2246      	movs	r2, #70	; 0x46
 80019f4:	701a      	strb	r2, [r3, #0]

// Rozmiar pliku (z naglowkiem, ale bez 8 bajtow odpowiedzialnych za "RIFF" i fileSize)
// Zostanie nadpisany po nagraniu wiadomosci
	header[4] = 0x00;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
	header[5] = 0x00;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3305      	adds	r3, #5
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
	header[6] = 0x00;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3306      	adds	r3, #6
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	header[7] = 0x00;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3307      	adds	r3, #7
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]

	// Identyfikator pliku, "WAVE"
	header[8] = 'W';
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3308      	adds	r3, #8
 8001a1a:	2257      	movs	r2, #87	; 0x57
 8001a1c:	701a      	strb	r2, [r3, #0]
	header[9] = 'A';
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3309      	adds	r3, #9
 8001a22:	2241      	movs	r2, #65	; 0x41
 8001a24:	701a      	strb	r2, [r3, #0]
	header[10] = 'V';
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	330a      	adds	r3, #10
 8001a2a:	2256      	movs	r2, #86	; 0x56
 8001a2c:	701a      	strb	r2, [r3, #0]
	header[11] = 'E';
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	330b      	adds	r3, #11
 8001a32:	2245      	movs	r2, #69	; 0x45
 8001a34:	701a      	strb	r2, [r3, #0]

	// Format "chunk marker", ciag znakow "fmt " (ze spacja)
	header[12] = 'f';
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	2266      	movs	r2, #102	; 0x66
 8001a3c:	701a      	strb	r2, [r3, #0]
	header[13] = 'm';
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	330d      	adds	r3, #13
 8001a42:	226d      	movs	r2, #109	; 0x6d
 8001a44:	701a      	strb	r2, [r3, #0]
	header[14] = 't';
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	330e      	adds	r3, #14
 8001a4a:	2274      	movs	r2, #116	; 0x74
 8001a4c:	701a      	strb	r2, [r3, #0]
	header[15] = ' ';
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	330f      	adds	r3, #15
 8001a52:	2220      	movs	r2, #32
 8001a54:	701a      	strb	r2, [r3, #0]

	// Rozmiar formatu danych w bajtach
	header[16] = 0x10;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3310      	adds	r3, #16
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	701a      	strb	r2, [r3, #0]
	header[17] = 0x00;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3311      	adds	r3, #17
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
	header[18] = 0x00;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3312      	adds	r3, #18
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
	header[19] = 0x00;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3313      	adds	r3, #19
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]

	// Typ formatu (1 - PCM)
	header[20] = 0x01;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3314      	adds	r3, #20
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]
	header[21] = 0x00;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3315      	adds	r3, #21
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]

	// Liczba kanalow
	header[22] = NUMBER_OF_CHANNELS;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3316      	adds	r3, #22
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
	header[23] = 0x00;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3317      	adds	r3, #23
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	/* Czestotliwosc probkowania
	 * Czestotliwosc trzeba sparsowac na cztery bajty.
	 * Za odpowiednia kolejnosc odpowiada przesuniecie bitowe >>
	 * Za pobranie tylko jednego bajtu odpowiada maska 0xFF
	 * Tak sparsowane dane sa konwertowane do uint8_t*/
	uint32_t sampleRate = AUDIO_IN_FREQUENCY;
 8001a96:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001a9a:	617b      	str	r3, [r7, #20]
	header[24] = (uint8_t) ((sampleRate & 0xFF));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3318      	adds	r3, #24
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
	header[25] = (uint8_t) ((sampleRate >> 8) & 0xFF);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	0a1a      	lsrs	r2, r3, #8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3319      	adds	r3, #25
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
	header[26] = (uint8_t) ((sampleRate >> 16) & 0xFF);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	0c1a      	lsrs	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	331a      	adds	r3, #26
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
	header[27] = (uint8_t) ((sampleRate >> 24) & 0xFF);
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	0e1a      	lsrs	r2, r3, #24
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	331b      	adds	r3, #27
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

	/* Liczba bajtow na sekunde
	 * Wzor:
	 * (Liczba_kanalow * Czestotliwosc_probkowania * rozdzielczosc) / 8
	 * Parsowanie bajtow analogiczne jak powyzej */
	uint32_t bytesPerSecond = (NUMBER_OF_CHANNELS * AUDIO_IN_FREQUENCY
 8001aca:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8001ace:	613b      	str	r3, [r7, #16]
			* AUDIO_RESOLUTION) / 8;
	header[28] = (uint8_t) ((bytesPerSecond & 0xFF));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	331c      	adds	r3, #28
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
	header[29] = (uint8_t) ((bytesPerSecond >> 8) & 0xFF);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	0a1a      	lsrs	r2, r3, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	331d      	adds	r3, #29
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
	header[30] = (uint8_t) ((bytesPerSecond >> 16) & 0xFF);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	0c1a      	lsrs	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	331e      	adds	r3, #30
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]
	header[31] = (uint8_t) ((bytesPerSecond >> 24) & 0xFF);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	0e1a      	lsrs	r2, r3, #24
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	331f      	adds	r3, #31
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

	/* Liczba bajtow na probke
	 * Wzor:
	 * (Liczba_kanalow * rozdzielczosc) / 8 */
	uint16_t bytesPerSample = (NUMBER_OF_CHANNELS * AUDIO_RESOLUTION) / 8;
 8001afe:	2304      	movs	r3, #4
 8001b00:	81fb      	strh	r3, [r7, #14]
	header[32] = bytesPerSample;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3320      	adds	r3, #32
 8001b06:	89fa      	ldrh	r2, [r7, #14]
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]
	header[33] = 0x00; // mozna wpisac na stale
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3321      	adds	r3, #33	; 0x21
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

	// Liczba bitow na probke/kanal
	uint16_t bitsPerSample = AUDIO_RESOLUTION;
 8001b14:	2310      	movs	r3, #16
 8001b16:	81bb      	strh	r3, [r7, #12]
	header[34] = bitsPerSample;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3322      	adds	r3, #34	; 0x22
 8001b1c:	89ba      	ldrh	r2, [r7, #12]
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]
	header[35] = 0x00; // mozna wpisac na stale
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3323      	adds	r3, #35	; 0x23
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]

	// Informacja o poczatku danych, ciag znakow "data"
	header[36] = 'd';
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3324      	adds	r3, #36	; 0x24
 8001b2e:	2264      	movs	r2, #100	; 0x64
 8001b30:	701a      	strb	r2, [r3, #0]
	header[37] = 'a';
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3325      	adds	r3, #37	; 0x25
 8001b36:	2261      	movs	r2, #97	; 0x61
 8001b38:	701a      	strb	r2, [r3, #0]
	header[38] = 't';
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3326      	adds	r3, #38	; 0x26
 8001b3e:	2274      	movs	r2, #116	; 0x74
 8001b40:	701a      	strb	r2, [r3, #0]
	header[39] = 'a';
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3327      	adds	r3, #39	; 0x27
 8001b46:	2261      	movs	r2, #97	; 0x61
 8001b48:	701a      	strb	r2, [r3, #0]

	// Rozmiar danych w bajtach, iloczyn danych i czasu nagrania w sekundach.
	// Zostanie nadpisany po nagraniu wiadomosci
	header[40] = 0x00;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3328      	adds	r3, #40	; 0x28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
	header[41] = 0x00;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3329      	adds	r3, #41	; 0x29
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
	header[42] = 0x00;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	332a      	adds	r3, #42	; 0x2a
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
	header[43] = 0x00;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	332b      	adds	r3, #43	; 0x2b
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <WavFileHeaderUpdate>:

static void WavFileHeaderUpdate(uint8_t *header) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
// Rozmiar pliku (z naglowkiem, ale bez 8 bajtow odpowiedzialnych za "RIFF" i fileSize)
	header[4] = (uint8_t) ((dataSize & 0xFF));
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
	header[5] = (uint8_t) ((dataSize >> 8) & 0xFF);
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0a1a      	lsrs	r2, r3, #8
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3305      	adds	r3, #5
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	701a      	strb	r2, [r3, #0]
	header[6] = (uint8_t) ((dataSize >> 16) & 0xFF);
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0c1a      	lsrs	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]
	header[7] = (uint8_t) ((dataSize >> 24) & 0xFF);
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0e1a      	lsrs	r2, r3, #24
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3307      	adds	r3, #7
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

	// Rozmiar danych w bajtach, iloczyn danych i czasu nagrania w sekundach.
	// (danych, a wiec bez naglowka)
	dataSize -= 44;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b2c      	subs	r3, #44	; 0x2c
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001bbe:	6013      	str	r3, [r2, #0]
	header[40] = (uint8_t) ((dataSize & 0xFF));
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3328      	adds	r3, #40	; 0x28
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]
	header[41] = (uint8_t) ((dataSize >> 8) & 0xFF);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0a1a      	lsrs	r2, r3, #8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3329      	adds	r3, #41	; 0x29
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
	header[42] = (uint8_t) ((dataSize >> 16) & 0xFF);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0c1a      	lsrs	r2, r3, #16
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	332a      	adds	r3, #42	; 0x2a
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
	header[43] = (uint8_t) ((dataSize >> 24) & 0xFF);
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <WavFileHeaderUpdate+0x8c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0e1a      	lsrs	r2, r3, #24
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	332b      	adds	r3, #43	; 0x2b
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000088c 	.word	0x2000088c

08001c08 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

	// Konwersja PDM do PCM
	BSP_AUDIO_IN_PDMToPCM((uint16_t*) &internalBuffer[INTERNAL_BUFF_SIZE / 2],
 8001c0c:	491a      	ldr	r1, [pc, #104]	; (8001c78 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>)
 8001c0e:	481b      	ldr	r0, [pc, #108]	; (8001c7c <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8001c10:	f7ff f988 	bl	8000f24 <BSP_AUDIO_IN_PDMToPCM>
			(uint16_t*) &PCMOutBuffer[0]);

	// Kopiuje dane
	memcpy((uint16_t*) &recBuffer[counter * (PCM_OUT_SIZE * 2)], PCMOutBuffer,
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	015b      	lsls	r3, r3, #5
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	4915      	ldr	r1, [pc, #84]	; (8001c78 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00d ffa5 	bl	800fb74 <memcpy>
	PCM_OUT_SIZE * 4);

	if (counter == (RECBUFFER_SIZE / (PCM_OUT_SIZE * 4)) - 1) {
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c30:	d10b      	bne.n	8001c4a <BSP_AUDIO_IN_TransferComplete_CallBack+0x42>
		dataReady = 1;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
		bufferOffset = 0;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
		counter++;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c46:	6013      	str	r3, [r2, #0]
		bufferOffset = RECBUFFER_SIZE / 2;
		counter = 0;
	} else {
		counter++;
	}
}
 8001c48:	e013      	b.n	8001c72 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6a>
	} else if (counter == (RECBUFFER_SIZE / (PCM_OUT_SIZE * 2)) - 1) {
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c50:	d10a      	bne.n	8001c68 <BSP_AUDIO_IN_TransferComplete_CallBack+0x60>
		dataReady = 1;
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
		bufferOffset = RECBUFFER_SIZE / 2;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8001c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c5e:	601a      	str	r2, [r3, #0]
		counter = 0;
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
}
 8001c66:	e004      	b.n	8001c72 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6a>
		counter++;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000620 	.word	0x20000620
 8001c7c:	200005a0 	.word	0x200005a0
 8001c80:	20000668 	.word	0x20000668
 8001c84:	20000890 	.word	0x20000890
 8001c88:	20000660 	.word	0x20000660
 8001c8c:	20000664 	.word	0x20000664

08001c90 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
	// Konwersja PDM do PCM
	BSP_AUDIO_IN_PDMToPCM((uint16_t*) &internalBuffer[0],
 8001c94:	491a      	ldr	r1, [pc, #104]	; (8001d00 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>)
 8001c96:	481b      	ldr	r0, [pc, #108]	; (8001d04 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 8001c98:	f7ff f944 	bl	8000f24 <BSP_AUDIO_IN_PDMToPCM>
			(uint16_t*) &PCMOutBuffer[0]);

	// Kopiuje dane
	memcpy((uint16_t*) &recBuffer[counter * (PCM_OUT_SIZE * 2)], PCMOutBuffer,
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	4915      	ldr	r1, [pc, #84]	; (8001d00 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00d ff61 	bl	800fb74 <memcpy>
	PCM_OUT_SIZE * 4);

	if (counter == (RECBUFFER_SIZE / (PCM_OUT_SIZE * 4)) - 1) {
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b3f      	cmp	r3, #63	; 0x3f
 8001cb8:	d10b      	bne.n	8001cd2 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x42>
		dataReady = 1;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
		bufferOffset = 0;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x84>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
		counter++;
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cce:	6013      	str	r3, [r2, #0]
		bufferOffset = RECBUFFER_SIZE / 2;
		counter = 0;
	} else {
		counter++;
	}
}
 8001cd0:	e013      	b.n	8001cfa <BSP_AUDIO_IN_HalfTransfer_CallBack+0x6a>
	} else if (counter == (RECBUFFER_SIZE / (PCM_OUT_SIZE * 2)) - 1) {
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001cd8:	d10a      	bne.n	8001cf0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x60>
		dataReady = 1;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
		bufferOffset = RECBUFFER_SIZE / 2;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x84>)
 8001ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce6:	601a      	str	r2, [r3, #0]
		counter = 0;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
}
 8001cee:	e004      	b.n	8001cfa <BSP_AUDIO_IN_HalfTransfer_CallBack+0x6a>
		counter++;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001cf8:	6013      	str	r3, [r2, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000620 	.word	0x20000620
 8001d04:	20000520 	.word	0x20000520
 8001d08:	20000668 	.word	0x20000668
 8001d0c:	20000890 	.word	0x20000890
 8001d10:	20000660 	.word	0x20000660
 8001d14:	20000664 	.word	0x20000664

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
  ldr  r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d42:	f7ff fd09 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f00d fee1 	bl	800fb0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7fe fe61 	bl	8000a10 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d54:	08011344 	.word	0x08011344
  ldr  r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d5c:	20000494 	.word	0x20000494
  ldr  r2, =_sbss
 8001d60:	20000494 	.word	0x20000494
  ldr  r3, = _ebss
 8001d64:	20006054 	.word	0x20006054

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94d 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fb12 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f965 	bl	800209e <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92d 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000400 	.word	0x20000400
 8001e08:	20000408 	.word	0x20000408
 8001e0c:	20000404 	.word	0x20000404

08001e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000408 	.word	0x20000408
 8001e34:	200038f0 	.word	0x200038f0

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200038f0 	.word	0x200038f0

08001e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_Delay+0x40>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000408 	.word	0x20000408

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff29 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff3e 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff31 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e00e      	b.n	80020e6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	795b      	ldrb	r3, [r3, #5]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff f99d 	bl	8001418 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff fe9c 	bl	8001e38 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e099      	b.n	8002240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800212c:	e00f      	b.n	800214e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800212e:	f7ff fe83 	bl	8001e38 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b05      	cmp	r3, #5
 800213a:	d908      	bls.n	800214e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2203      	movs	r2, #3
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e078      	b.n	8002240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e8      	bne.n	800212e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <HAL_DMA_Init+0x158>)
 8002168:	4013      	ands	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800217a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d107      	bne.n	80021b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4313      	orrs	r3, r2
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f023 0307 	bic.w	r3, r3, #7
 80021ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d117      	bne.n	8002212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fb3d 	bl	8002874 <DMA_CheckFifoParam>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800220e:	2301      	movs	r3, #1
 8002210:	e016      	b.n	8002240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 faf4 	bl	8002808 <DMA_CalcBaseAndBitshift>
 8002220:	4603      	mov	r3, r0
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	223f      	movs	r2, #63	; 0x3f
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	f010803f 	.word	0xf010803f

0800224c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e050      	b.n	8002300 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d101      	bne.n	800226e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	e048      	b.n	8002300 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2221      	movs	r2, #33	; 0x21
 80022ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 faaa 	bl	8002808 <DMA_CalcBaseAndBitshift>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_DMA_Start_IT+0x26>
 800232a:	2302      	movs	r3, #2
 800232c:	e040      	b.n	80023b0 <HAL_DMA_Start_IT+0xa8>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d12f      	bne.n	80023a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fa28 	bl	80027ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0216 	orr.w	r2, r2, #22
 8002376:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e005      	b.n	80023ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023c6:	f7ff fd37 	bl	8001e38 <HAL_GetTick>
 80023ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d008      	beq.n	80023ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e052      	b.n	8002490 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0216 	bic.w	r2, r2, #22
 80023f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002408:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_DMA_Abort+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0208 	bic.w	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800243a:	e013      	b.n	8002464 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243c:	f7ff fcfc 	bl	8001e38 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b05      	cmp	r3, #5
 8002448:	d90c      	bls.n	8002464 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e015      	b.n	8002490 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e4      	bne.n	800243c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	223f      	movs	r2, #63	; 0x3f
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a4:	4b92      	ldr	r3, [pc, #584]	; (80026f0 <HAL_DMA_IRQHandler+0x258>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a92      	ldr	r2, [pc, #584]	; (80026f4 <HAL_DMA_IRQHandler+0x25c>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	2208      	movs	r2, #8
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01a      	beq.n	8002504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0204 	bic.w	r2, r2, #4
 80024ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2208      	movs	r2, #8
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d012      	beq.n	800253a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2201      	movs	r2, #1
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	2204      	movs	r2, #4
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	2204      	movs	r2, #4
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f043 0204 	orr.w	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2210      	movs	r2, #16
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d043      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03c      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2210      	movs	r2, #16
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d018      	beq.n	80025da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d024      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e01f      	b.n	8002608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e016      	b.n	8002608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0208 	bic.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2220      	movs	r2, #32
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 808e 	beq.w	8002736 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8086 	beq.w	8002736 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2220      	movs	r2, #32
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d136      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0216 	bic.w	r2, r2, #22
 8002650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <HAL_DMA_IRQHandler+0x1da>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0208 	bic.w	r2, r2, #8
 8002680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	223f      	movs	r2, #63	; 0x3f
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d07d      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
        }
        return;
 80026ae:	e078      	b.n	80027a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01c      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d108      	bne.n	80026de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d030      	beq.n	8002736 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e02b      	b.n	8002736 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d027      	beq.n	8002736 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
 80026ee:	e022      	b.n	8002736 <HAL_DMA_IRQHandler+0x29e>
 80026f0:	20000400 	.word	0x20000400
 80026f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0210 	bic.w	r2, r2, #16
 8002714:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	2b00      	cmp	r3, #0
 800273c:	d032      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d022      	beq.n	8002790 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2205      	movs	r2, #5
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3301      	adds	r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	429a      	cmp	r2, r3
 800276c:	d307      	bcc.n	800277e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f2      	bne.n	8002762 <HAL_DMA_IRQHandler+0x2ca>
 800277c:	e000      	b.n	8002780 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800277e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
 80027a0:	e000      	b.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80027a2:	bf00      	nop
    }
  }
}
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop

080027ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d108      	bne.n	80027ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ea:	e007      	b.n	80027fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3b10      	subs	r3, #16
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <DMA_CalcBaseAndBitshift+0x64>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <DMA_CalcBaseAndBitshift+0x68>)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d909      	bls.n	800284a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	1d1a      	adds	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	659a      	str	r2, [r3, #88]	; 0x58
 8002848:	e007      	b.n	800285a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	aaaaaaab 	.word	0xaaaaaaab
 8002870:	08011240 	.word	0x08011240

08002874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11f      	bne.n	80028ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d855      	bhi.n	8002940 <DMA_CheckFifoParam+0xcc>
 8002894:	a201      	add	r2, pc, #4	; (adr r2, 800289c <DMA_CheckFifoParam+0x28>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028ad 	.word	0x080028ad
 80028a0:	080028bf 	.word	0x080028bf
 80028a4:	080028ad 	.word	0x080028ad
 80028a8:	08002941 	.word	0x08002941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d045      	beq.n	8002944 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e042      	b.n	8002944 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028c6:	d13f      	bne.n	8002948 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e03c      	b.n	8002948 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	d121      	bne.n	800291c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d836      	bhi.n	800294c <DMA_CheckFifoParam+0xd8>
 80028de:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <DMA_CheckFifoParam+0x70>)
 80028e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	080028fb 	.word	0x080028fb
 80028ec:	080028f5 	.word	0x080028f5
 80028f0:	0800290d 	.word	0x0800290d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	e02f      	b.n	800295a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d024      	beq.n	8002950 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290a:	e021      	b.n	8002950 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002914:	d11e      	bne.n	8002954 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800291a:	e01b      	b.n	8002954 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d902      	bls.n	8002928 <DMA_CheckFifoParam+0xb4>
 8002922:	2b03      	cmp	r3, #3
 8002924:	d003      	beq.n	800292e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002926:	e018      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e015      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00e      	beq.n	8002958 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e00b      	b.n	8002958 <DMA_CheckFifoParam+0xe4>
      break;
 8002940:	bf00      	nop
 8002942:	e00a      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;
 8002944:	bf00      	nop
 8002946:	e008      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;
 8002948:	bf00      	nop
 800294a:	e006      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;
 800294c:	bf00      	nop
 800294e:	e004      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;
 8002950:	bf00      	nop
 8002952:	e002      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;   
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;
 8002958:	bf00      	nop
    }
  } 
  
  return status; 
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e159      	b.n	8002c38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8148 	bne.w	8002c32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d00b      	beq.n	80029c2 <HAL_GPIO_Init+0x5a>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029b6:	2b11      	cmp	r3, #17
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d130      	bne.n	8002a24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f8:	2201      	movs	r2, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 0201 	and.w	r2, r3, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0xfc>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b12      	cmp	r3, #18
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a2 	beq.w	8002c32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a55      	ldr	r2, [pc, #340]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a51      	ldr	r2, [pc, #324]	; (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a48      	ldr	r2, [pc, #288]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x202>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_GPIO_Init+0x2f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x1fe>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_GPIO_Init+0x2f4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a45      	ldr	r2, [pc, #276]	; (8002c60 <HAL_GPIO_Init+0x2f8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x1f6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a44      	ldr	r2, [pc, #272]	; (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x1f2>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x204>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4934      	ldr	r1, [pc, #208]	; (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bae:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_GPIO_Init+0x300>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f aea2 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	3724      	adds	r7, #36	; 0x24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40013c00 	.word	0x40013c00

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fe88 	bl	80009d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b08f      	sub	sp, #60	; 0x3c
 8002cd4:	af0a      	add	r7, sp, #40	; 0x28
 8002cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e054      	b.n	8002d8c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f00a fcfb 	bl	800d6f8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 ff95 	bl	8006c50 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	687e      	ldr	r6, [r7, #4]
 8002d2e:	466d      	mov	r5, sp
 8002d30:	f106 0410 	add.w	r4, r6, #16
 8002d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d44:	1d33      	adds	r3, r6, #4
 8002d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f003 ff0f 	bl	8006b6c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2101      	movs	r1, #1
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 ff8c 	bl	8006c72 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	687e      	ldr	r6, [r7, #4]
 8002d62:	466d      	mov	r5, sp
 8002d64:	f106 0410 	add.w	r4, r6, #16
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d78:	1d33      	adds	r3, r6, #4
 8002d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7c:	6838      	ldr	r0, [r7, #0]
 8002d7e:	f004 f89f 	bl	8006ec0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d94 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	70fb      	strb	r3, [r7, #3]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70bb      	strb	r3, [r7, #2]
 8002daa:	4613      	mov	r3, r2
 8002dac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_HCD_HC_Init+0x28>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e07f      	b.n	8002ebc <HAL_HCD_HC_Init+0x128>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	333d      	adds	r3, #61	; 0x3d
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3338      	adds	r3, #56	; 0x38
 8002de8:	787a      	ldrb	r2, [r7, #1]
 8002dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3340      	adds	r3, #64	; 0x40
 8002dfc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002dfe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3339      	adds	r3, #57	; 0x39
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	333f      	adds	r3, #63	; 0x3f
 8002e24:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	78bb      	ldrb	r3, [r7, #2]
 8002e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	333a      	adds	r3, #58	; 0x3a
 8002e42:	4602      	mov	r2, r0
 8002e44:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da0a      	bge.n	8002e64 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	333b      	adds	r3, #59	; 0x3b
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e009      	b.n	8002e78 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	333b      	adds	r3, #59	; 0x3b
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	333c      	adds	r3, #60	; 0x3c
 8002e88:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e8c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	787c      	ldrb	r4, [r7, #1]
 8002e94:	78ba      	ldrb	r2, [r7, #2]
 8002e96:	78f9      	ldrb	r1, [r7, #3]
 8002e98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e9a:	9302      	str	r3, [sp, #8]
 8002e9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4623      	mov	r3, r4
 8002eaa:	f004 f98b 	bl	80071c4 <USB_HC_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}

08002ec4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_HCD_HC_Halt+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e00f      	b.n	8002f02 <HAL_HCD_HC_Halt+0x3e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fbc7 	bl	8007686 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	70fb      	strb	r3, [r7, #3]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70bb      	strb	r3, [r7, #2]
 8002f22:	4613      	mov	r3, r2
 8002f24:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	333b      	adds	r3, #59	; 0x3b
 8002f36:	78ba      	ldrb	r2, [r7, #2]
 8002f38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	333f      	adds	r3, #63	; 0x3f
 8002f4a:	787a      	ldrb	r2, [r7, #1]
 8002f4c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f4e:	7c3b      	ldrb	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d114      	bne.n	8002f7e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3342      	adds	r3, #66	; 0x42
 8002f64:	2203      	movs	r2, #3
 8002f66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	440b      	add	r3, r1
 8002f76:	333d      	adds	r3, #61	; 0x3d
 8002f78:	7f3a      	ldrb	r2, [r7, #28]
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e009      	b.n	8002f92 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3342      	adds	r3, #66	; 0x42
 8002f8e:	2202      	movs	r2, #2
 8002f90:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f92:	787b      	ldrb	r3, [r7, #1]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	f200 80d6 	bhi.w	8003146 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08003131 	.word	0x08003131
 8002fa8:	0800301d 	.word	0x0800301d
 8002fac:	080030a7 	.word	0x080030a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fb0:	7c3b      	ldrb	r3, [r7, #16]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	f040 80c9 	bne.w	800314a <HAL_HCD_HC_SubmitRequest+0x23e>
 8002fb8:	78bb      	ldrb	r3, [r7, #2]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 80c5 	bne.w	800314a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002fc0:	8b3b      	ldrh	r3, [r7, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3351      	adds	r3, #81	; 0x51
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3351      	adds	r3, #81	; 0x51
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3342      	adds	r3, #66	; 0x42
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003004:	e0a1      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	3342      	adds	r3, #66	; 0x42
 8003016:	2202      	movs	r2, #2
 8003018:	701a      	strb	r2, [r3, #0]
      break;
 800301a:	e096      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800301c:	78bb      	ldrb	r3, [r7, #2]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d120      	bne.n	8003064 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3351      	adds	r3, #81	; 0x51
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3342      	adds	r3, #66	; 0x42
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800304c:	e07e      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	3342      	adds	r3, #66	; 0x42
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]
      break;
 8003062:	e073      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	3350      	adds	r3, #80	; 0x50
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3342      	adds	r3, #66	; 0x42
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
      break;
 800308e:	e05d      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3342      	adds	r3, #66	; 0x42
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
      break;
 80030a4:	e052      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d120      	bne.n	80030ee <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3351      	adds	r3, #81	; 0x51
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3342      	adds	r3, #66	; 0x42
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030d6:	e039      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	3342      	adds	r3, #66	; 0x42
 80030e8:	2202      	movs	r2, #2
 80030ea:	701a      	strb	r2, [r3, #0]
      break;
 80030ec:	e02e      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	3350      	adds	r3, #80	; 0x50
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3342      	adds	r3, #66	; 0x42
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
      break;
 8003118:	e018      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	440b      	add	r3, r1
 8003128:	3342      	adds	r3, #66	; 0x42
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
      break;
 800312e:	e00d      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3342      	adds	r3, #66	; 0x42
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
      break;
 8003144:	e002      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800314a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3344      	adds	r3, #68	; 0x44
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	8b39      	ldrh	r1, [r7, #24]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4403      	add	r3, r0
 8003170:	3348      	adds	r3, #72	; 0x48
 8003172:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	335c      	adds	r3, #92	; 0x5c
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	334c      	adds	r3, #76	; 0x4c
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	3339      	adds	r3, #57	; 0x39
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335d      	adds	r3, #93	; 0x5d
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	3338      	adds	r3, #56	; 0x38
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	18d1      	adds	r1, r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	f004 f8fa 	bl	80073d8 <USB_HC_StartXfer>
 80031e4:	4603      	mov	r3, r0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop

080031f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fe17 	bl	8006e3a <USB_GetMode>
 800320c:	4603      	mov	r3, r0
 800320e:	2b01      	cmp	r3, #1
 8003210:	f040 80ef 	bne.w	80033f2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fdfb 	bl	8006e14 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80e5 	beq.w	80033f0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 fdf2 	bl	8006e14 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800323a:	d104      	bne.n	8003246 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003244:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fde2 	bl	8006e14 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325a:	d104      	bne.n	8003266 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003264:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fdd2 	bl	8006e14 <USB_ReadInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003276:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800327a:	d104      	bne.n	8003286 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003284:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fdc2 	bl	8006e14 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	d103      	bne.n	80032a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2202      	movs	r2, #2
 80032a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 fdb4 	bl	8006e14 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b6:	d115      	bne.n	80032e4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f00a fa8e 	bl	800d7f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 feaa 	bl	8007038 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 fd93 	bl	8006e14 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f8:	d102      	bne.n	8003300 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f001 f966 	bl	80045cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fd85 	bl	8006e14 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d106      	bne.n	8003322 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f00a fa51 	bl	800d7bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2208      	movs	r2, #8
 8003320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f003 fd74 	bl	8006e14 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003336:	d138      	bne.n	80033aa <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f004 f991 	bl	8007664 <USB_HC_ReadInterrupt>
 8003342:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e025      	b.n	8003396 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	fa22 f303 	lsr.w	r3, r2, r3
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d018      	beq.n	8003390 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003374:	d106      	bne.n	8003384 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4619      	mov	r1, r3
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8cf 	bl	8003520 <HCD_HC_IN_IRQHandler>
 8003382:	e005      	b.n	8003390 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fcfd 	bl	8003d8a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3301      	adds	r3, #1
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	d3d4      	bcc.n	800334a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fd30 	bl	8006e14 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d101      	bne.n	80033c2 <HAL_HCD_IRQHandler+0x1d2>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_HCD_IRQHandler+0x1d4>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d014      	beq.n	80033f2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0210 	bic.w	r2, r2, #16
 80033d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f001 f84b 	bl	8004474 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699a      	ldr	r2, [r3, #24]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0210 	orr.w	r2, r2, #16
 80033ec:	619a      	str	r2, [r3, #24]
 80033ee:	e000      	b.n	80033f2 <HAL_HCD_IRQHandler+0x202>
      return;
 80033f0:	bf00      	nop
    }
  }
}
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_HCD_Start+0x16>
 800340a:	2302      	movs	r3, #2
 800340c:	e013      	b.n	8003436 <HAL_HCD_Start+0x3e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f003 fc07 	bl	8006c2e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fe6a 	bl	8007100 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_HCD_Stop+0x16>
 8003450:	2302      	movs	r3, #2
 8003452:	e00d      	b.n	8003470 <HAL_HCD_Stop+0x32>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f004 fa4b 	bl	80078fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f003 fe11 	bl	80070ac <USB_ResetPort>
 800348a:	4603      	mov	r3, r0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	335c      	adds	r3, #92	; 0x5c
 80034b0:	781b      	ldrb	r3, [r3, #0]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	440b      	add	r3, r1
 80034d8:	334c      	adds	r3, #76	; 0x4c
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 fe53 	bl	80071a0 <USB_GetCurrentFrame>
 80034fa:	4603      	mov	r3, r0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fe2e 	bl	8007172 <USB_GetHostSpeed>
 8003516:	4603      	mov	r3, r0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d119      	bne.n	8003584 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	2304      	movs	r3, #4
 8003560:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	0151      	lsls	r1, r2, #5
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	440a      	add	r2, r1
 8003578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	60d3      	str	r3, [r2, #12]
 8003582:	e0ce      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359a:	d12c      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	335d      	adds	r3, #93	; 0x5d
 80035c0:	2207      	movs	r2, #7
 80035c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	0151      	lsls	r1, r2, #5
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	440a      	add	r2, r1
 80035da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 f849 	bl	8007686 <USB_HC_Halt>
 80035f4:	e095      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	015a      	lsls	r2, r3, #5
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b20      	cmp	r3, #32
 800360a:	d109      	bne.n	8003620 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	2320      	movs	r3, #32
 800361c:	6093      	str	r3, [r2, #8]
 800361e:	e080      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	d134      	bne.n	80036a0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	0151      	lsls	r1, r2, #5
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	440a      	add	r2, r1
 800364c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	335d      	adds	r3, #93	; 0x5d
 8003666:	2205      	movs	r2, #5
 8003668:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	461a      	mov	r2, r3
 8003678:	2310      	movs	r3, #16
 800367a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2308      	movs	r3, #8
 800368c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f003 fff4 	bl	8007686 <USB_HC_Halt>
 800369e:	e040      	b.n	8003722 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d134      	bne.n	8003722 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 ffcf 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2310      	movs	r3, #16
 80036f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	335d      	adds	r3, #93	; 0x5d
 800370a:	2208      	movs	r2, #8
 800370c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003720:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003738:	d122      	bne.n	8003780 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	440a      	add	r2, r1
 8003750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f003 ff8e 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	461a      	mov	r2, r3
 8003778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800377e:	e300      	b.n	8003d82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	f040 80fd 	bne.w	8003992 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	3348      	adds	r3, #72	; 0x48
 80037b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	0159      	lsls	r1, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	440b      	add	r3, r1
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80037c4:	1ad1      	subs	r1, r2, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4403      	add	r3, r0
 80037d4:	334c      	adds	r3, #76	; 0x4c
 80037d6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	440b      	add	r3, r1
 80037e6:	335d      	adds	r3, #93	; 0x5d
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3358      	adds	r3, #88	; 0x58
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380c:	461a      	mov	r2, r3
 800380e:	2301      	movs	r3, #1
 8003810:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	333f      	adds	r3, #63	; 0x3f
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	333f      	adds	r3, #63	; 0x3f
 8003838:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800383a:	2b02      	cmp	r3, #2
 800383c:	d121      	bne.n	8003882 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	0151      	lsls	r1, r2, #5
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	440a      	add	r2, r1
 8003854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f003 ff0c 	bl	8007686 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387a:	461a      	mov	r2, r3
 800387c:	2310      	movs	r3, #16
 800387e:	6093      	str	r3, [r2, #8]
 8003880:	e070      	b.n	8003964 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	333f      	adds	r3, #63	; 0x3f
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d12a      	bne.n	80038ee <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	335c      	adds	r3, #92	; 0x5c
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	b2d8      	uxtb	r0, r3
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	4601      	mov	r1, r0
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f009 ff92 	bl	800d810 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038ec:	e03a      	b.n	8003964 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	440b      	add	r3, r1
 80038fc:	333f      	adds	r3, #63	; 0x3f
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d12f      	bne.n	8003964 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	335c      	adds	r3, #92	; 0x5c
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	440b      	add	r3, r1
 8003926:	3350      	adds	r3, #80	; 0x50
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f083 0301 	eor.w	r3, r3, #1
 800392e:	b2d8      	uxtb	r0, r3
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3350      	adds	r3, #80	; 0x50
 8003940:	4602      	mov	r2, r0
 8003942:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	b2d8      	uxtb	r0, r3
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	335c      	adds	r3, #92	; 0x5c
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	4601      	mov	r1, r0
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f009 ff56 	bl	800d810 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	3350      	adds	r3, #80	; 0x50
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	f083 0301 	eor.w	r3, r3, #1
 800397a:	b2d8      	uxtb	r0, r3
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	3350      	adds	r3, #80	; 0x50
 800398c:	4602      	mov	r2, r0
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	e1f7      	b.n	8003d82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f040 811a 	bne.w	8003bde <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c4:	f023 0302 	bic.w	r3, r3, #2
 80039c8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	440b      	add	r3, r1
 80039d8:	335d      	adds	r3, #93	; 0x5d
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10a      	bne.n	80039f6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	335c      	adds	r3, #92	; 0x5c
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e0d9      	b.n	8003baa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	335d      	adds	r3, #93	; 0x5d
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d10a      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	335c      	adds	r3, #92	; 0x5c
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e0c3      	b.n	8003baa <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	335d      	adds	r3, #93	; 0x5d
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d00a      	beq.n	8003a4e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	335d      	adds	r3, #93	; 0x5d
 8003a48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d156      	bne.n	8003afc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3358      	adds	r3, #88	; 0x58
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	1c59      	adds	r1, r3, #1
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4403      	add	r3, r0
 8003a70:	3358      	adds	r3, #88	; 0x58
 8003a72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	440b      	add	r3, r1
 8003a82:	3358      	adds	r3, #88	; 0x58
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d914      	bls.n	8003ab4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	3358      	adds	r3, #88	; 0x58
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	335c      	adds	r3, #92	; 0x5c
 8003aae:	2204      	movs	r2, #4
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e009      	b.n	8003ac8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	335c      	adds	r3, #92	; 0x5c
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ade:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ae6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e056      	b.n	8003baa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	440b      	add	r3, r1
 8003b0a:	335d      	adds	r3, #93	; 0x5d
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d123      	bne.n	8003b5a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	335c      	adds	r3, #92	; 0x5c
 8003b22:	2202      	movs	r2, #2
 8003b24:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b3c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b44:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	461a      	mov	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e027      	b.n	8003baa <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	335d      	adds	r3, #93	; 0x5d
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b07      	cmp	r3, #7
 8003b6e:	d11c      	bne.n	8003baa <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3358      	adds	r3, #88	; 0x58
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	1c59      	adds	r1, r3, #1
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4403      	add	r3, r0
 8003b92:	3358      	adds	r3, #88	; 0x58
 8003b94:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	335c      	adds	r3, #92	; 0x5c
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	2302      	movs	r3, #2
 8003bba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	b2d8      	uxtb	r0, r3
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	440b      	add	r3, r1
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4601      	mov	r1, r0
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f009 fe1a 	bl	800d810 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bdc:	e0d1      	b.n	8003d82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d13e      	bne.n	8003c72 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	3358      	adds	r3, #88	; 0x58
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4403      	add	r3, r0
 8003c36:	3358      	adds	r3, #88	; 0x58
 8003c38:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	335d      	adds	r3, #93	; 0x5d
 8003c4a:	2206      	movs	r2, #6
 8003c4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f003 fd14 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	6093      	str	r3, [r2, #8]
}
 8003c70:	e087      	b.n	8003d82 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d17c      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	440b      	add	r3, r1
 8003c96:	333f      	adds	r3, #63	; 0x3f
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d122      	bne.n	8003ce4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	3358      	adds	r3, #88	; 0x58
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 fcd2 	bl	8007686 <USB_HC_Halt>
 8003ce2:	e045      	b.n	8003d70 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333f      	adds	r3, #63	; 0x3f
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	333f      	adds	r3, #63	; 0x3f
 8003d0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d12f      	bne.n	8003d70 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3358      	adds	r3, #88	; 0x58
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d121      	bne.n	8003d70 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	440b      	add	r3, r1
 8003d3a:	335d      	adds	r3, #93	; 0x5d
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 fc8b 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2310      	movs	r3, #16
 8003d80:	6093      	str	r3, [r2, #8]
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d119      	bne.n	8003dee <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2304      	movs	r3, #4
 8003dca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003dec:	e33e      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d141      	bne.n	8003e88 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	2320      	movs	r3, #32
 8003e14:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	440b      	add	r3, r1
 8003e24:	333d      	adds	r3, #61	; 0x3d
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f040 831f 	bne.w	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	333d      	adds	r3, #61	; 0x3d
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	440b      	add	r3, r1
 8003e50:	335c      	adds	r3, #92	; 0x5c
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f003 fc00 	bl	8007686 <USB_HC_Halt>
}
 8003e86:	e2f1      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d13f      	bne.n	8003f1e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	335d      	adds	r3, #93	; 0x5d
 8003eae:	2204      	movs	r2, #4
 8003eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	333d      	adds	r3, #61	; 0x3d
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	3358      	adds	r3, #88	; 0x58
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ef4:	f043 0302 	orr.w	r3, r3, #2
 8003ef8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	4611      	mov	r1, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f003 fbbe 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	461a      	mov	r2, r3
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	6093      	str	r3, [r2, #8]
}
 8003f1c:	e2a6      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f34:	d122      	bne.n	8003f7c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 fb90 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f72:	461a      	mov	r2, r3
 8003f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f78:	6093      	str	r3, [r2, #8]
}
 8003f7a:	e277      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d135      	bne.n	8003ffe <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	3358      	adds	r3, #88	; 0x58
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc0:	f043 0302 	orr.w	r3, r3, #2
 8003fc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f003 fb58 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	335d      	adds	r3, #93	; 0x5d
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
}
 8003ffc:	e236      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b08      	cmp	r3, #8
 8004012:	d12b      	bne.n	800406c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	461a      	mov	r2, r3
 8004022:	2308      	movs	r3, #8
 8004024:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	440a      	add	r2, r1
 800403c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f003 fb18 	bl	8007686 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	335d      	adds	r3, #93	; 0x5d
 8004066:	2205      	movs	r2, #5
 8004068:	701a      	strb	r2, [r3, #0]
}
 800406a:	e1ff      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b10      	cmp	r3, #16
 8004080:	d155      	bne.n	800412e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	440b      	add	r3, r1
 8004090:	3358      	adds	r3, #88	; 0x58
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	440b      	add	r3, r1
 80040a4:	335d      	adds	r3, #93	; 0x5d
 80040a6:	2203      	movs	r2, #3
 80040a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	440b      	add	r3, r1
 80040b8:	333d      	adds	r3, #61	; 0x3d
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d114      	bne.n	80040ea <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	440b      	add	r3, r1
 80040ce:	333c      	adds	r3, #60	; 0x3c
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	440b      	add	r3, r1
 80040e4:	333d      	adds	r3, #61	; 0x3d
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f003 fab6 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	2310      	movs	r3, #16
 800412a:	6093      	str	r3, [r2, #8]
}
 800412c:	e19e      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d12b      	bne.n	800419c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	440a      	add	r2, r1
 800415a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f003 fa89 	bl	8007686 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	335d      	adds	r3, #93	; 0x5d
 8004184:	2206      	movs	r2, #6
 8004186:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004194:	461a      	mov	r2, r3
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	6093      	str	r3, [r2, #8]
}
 800419a:	e167      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b2:	d135      	bne.n	8004220 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ce:	f043 0302 	orr.w	r3, r3, #2
 80041d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f003 fa51 	bl	8007686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	2310      	movs	r3, #16
 80041f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	461a      	mov	r2, r3
 8004204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004208:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	335d      	adds	r3, #93	; 0x5d
 800421a:	2208      	movs	r2, #8
 800421c:	701a      	strb	r2, [r3, #0]
}
 800421e:	e125      	b.n	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	f040 811a 	bne.w	800446c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	440a      	add	r2, r1
 800424e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004252:	f023 0302 	bic.w	r3, r3, #2
 8004256:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	335d      	adds	r3, #93	; 0x5d
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d137      	bne.n	80042de <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	440b      	add	r3, r1
 800427c:	335c      	adds	r3, #92	; 0x5c
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	440b      	add	r3, r1
 8004290:	333f      	adds	r3, #63	; 0x3f
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d00b      	beq.n	80042b0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	333f      	adds	r3, #63	; 0x3f
 80042a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	f040 80c5 	bne.w	800443a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	440b      	add	r3, r1
 80042be:	3351      	adds	r3, #81	; 0x51
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2d8      	uxtb	r0, r3
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	3351      	adds	r3, #81	; 0x51
 80042d8:	4602      	mov	r2, r0
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e0ad      	b.n	800443a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	335d      	adds	r3, #93	; 0x5d
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d10a      	bne.n	800430a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	440b      	add	r3, r1
 8004302:	335c      	adds	r3, #92	; 0x5c
 8004304:	2202      	movs	r2, #2
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e097      	b.n	800443a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	335d      	adds	r3, #93	; 0x5d
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d10a      	bne.n	8004336 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	335c      	adds	r3, #92	; 0x5c
 8004330:	2202      	movs	r2, #2
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e081      	b.n	800443a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	440b      	add	r3, r1
 8004344:	335d      	adds	r3, #93	; 0x5d
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b05      	cmp	r3, #5
 800434a:	d10a      	bne.n	8004362 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	440b      	add	r3, r1
 800435a:	335c      	adds	r3, #92	; 0x5c
 800435c:	2205      	movs	r2, #5
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e06b      	b.n	800443a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	440b      	add	r3, r1
 8004370:	335d      	adds	r3, #93	; 0x5d
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b06      	cmp	r3, #6
 8004376:	d00a      	beq.n	800438e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	335d      	adds	r3, #93	; 0x5d
 8004388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800438a:	2b08      	cmp	r3, #8
 800438c:	d155      	bne.n	800443a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	440b      	add	r3, r1
 800439c:	3358      	adds	r3, #88	; 0x58
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4403      	add	r3, r0
 80043b0:	3358      	adds	r3, #88	; 0x58
 80043b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	440b      	add	r3, r1
 80043c2:	3358      	adds	r3, #88	; 0x58
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d914      	bls.n	80043f4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	440b      	add	r3, r1
 80043d8:	3358      	adds	r3, #88	; 0x58
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	335c      	adds	r3, #92	; 0x5c
 80043ee:	2204      	movs	r2, #4
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e009      	b.n	8004408 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	440b      	add	r3, r1
 8004402:	335c      	adds	r3, #92	; 0x5c
 8004404:	2202      	movs	r2, #2
 8004406:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800441e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004426:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	461a      	mov	r2, r3
 8004448:	2302      	movs	r3, #2
 800444a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	b2d8      	uxtb	r0, r3
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	440b      	add	r3, r1
 800445e:	335c      	adds	r3, #92	; 0x5c
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	4601      	mov	r1, r0
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f009 f9d2 	bl	800d810 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	0c5b      	lsrs	r3, r3, #17
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d003      	beq.n	80044b8 <HCD_RXQLVL_IRQHandler+0x44>
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	f000 8082 	beq.w	80045ba <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044b6:	e083      	b.n	80045c0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d07f      	beq.n	80045be <HCD_RXQLVL_IRQHandler+0x14a>
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	440b      	add	r3, r1
 80044cc:	3344      	adds	r3, #68	; 0x44
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d074      	beq.n	80045be <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	440b      	add	r3, r1
 80044e6:	3344      	adds	r3, #68	; 0x44
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	b292      	uxth	r2, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f002 fc67 	bl	8006dc2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	3344      	adds	r3, #68	; 0x44
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	18d1      	adds	r1, r2, r3
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4403      	add	r3, r0
 8004518:	3344      	adds	r3, #68	; 0x44
 800451a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	440b      	add	r3, r1
 800452a:	334c      	adds	r3, #76	; 0x4c
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	18d1      	adds	r1, r2, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4403      	add	r3, r0
 8004540:	334c      	adds	r3, #76	; 0x4c
 8004542:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HCD_RXQLVL_IRQHandler+0x154>)
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d031      	beq.n	80045be <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004570:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004578:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	3350      	adds	r3, #80	; 0x50
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f083 0301 	eor.w	r3, r3, #1
 80045a2:	b2d8      	uxtb	r0, r3
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	440b      	add	r3, r1
 80045b2:	3350      	adds	r3, #80	; 0x50
 80045b4:	4602      	mov	r2, r0
 80045b6:	701a      	strb	r2, [r3, #0]
      break;
 80045b8:	e001      	b.n	80045be <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80045ba:	bf00      	nop
 80045bc:	e000      	b.n	80045c0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80045be:	bf00      	nop
  }
}
 80045c0:	bf00      	nop
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	1ff80000 	.word	0x1ff80000

080045cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	d10b      	bne.n	800461c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d102      	bne.n	8004614 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f009 f8e2 	bl	800d7d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f043 0302 	orr.w	r3, r3, #2
 800461a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d132      	bne.n	800468c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f043 0308 	orr.w	r3, r3, #8
 800462c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d126      	bne.n	8004686 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d113      	bne.n	8004668 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004646:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800464a:	d106      	bne.n	800465a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2102      	movs	r1, #2
 8004652:	4618      	mov	r0, r3
 8004654:	f002 fcf0 	bl	8007038 <USB_InitFSLSPClkSel>
 8004658:	e011      	b.n	800467e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2101      	movs	r1, #1
 8004660:	4618      	mov	r0, r3
 8004662:	f002 fce9 	bl	8007038 <USB_InitFSLSPClkSel>
 8004666:	e00a      	b.n	800467e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004676:	461a      	mov	r2, r3
 8004678:	f64e 2360 	movw	r3, #60000	; 0xea60
 800467c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f009 f8d4 	bl	800d82c <HAL_HCD_PortEnabled_Callback>
 8004684:	e002      	b.n	800468c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f009 f8de 	bl	800d848 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b20      	cmp	r3, #32
 8004694:	d103      	bne.n	800469e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f043 0320 	orr.w	r3, r3, #32
 800469c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6013      	str	r3, [r2, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e128      	b.n	8004918 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a90      	ldr	r2, [pc, #576]	; (8004920 <HAL_I2S_Init+0x26c>)
 80046de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc febb 	bl	800145c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046fc:	f023 030f 	bic.w	r3, r3, #15
 8004700:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2202      	movs	r2, #2
 8004708:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d060      	beq.n	80047d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800471a:	2310      	movs	r3, #16
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e001      	b.n	8004724 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b20      	cmp	r3, #32
 800472a:	d802      	bhi.n	8004732 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004732:	2001      	movs	r0, #1
 8004734:	f001 fd10 	bl	8006158 <HAL_RCCEx_GetPeriphCLKFreq>
 8004738:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004742:	d125      	bne.n	8004790 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	fbb2 f2f3 	udiv	r2, r2, r3
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	3305      	adds	r3, #5
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e01f      	b.n	80047ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	fbb2 f2f3 	udiv	r2, r2, r3
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	3305      	adds	r3, #5
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e00e      	b.n	80047ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fbb2 f2f3 	udiv	r2, r2, r3
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047aa:	3305      	adds	r3, #5
 80047ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4a5c      	ldr	r2, [pc, #368]	; (8004924 <HAL_I2S_Init+0x270>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	08db      	lsrs	r3, r3, #3
 80047b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e003      	b.n	80047dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80047d4:	2302      	movs	r3, #2
 80047d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d902      	bls.n	80047e8 <HAL_I2S_Init+0x134>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2bff      	cmp	r3, #255	; 0xff
 80047e6:	d907      	bls.n	80047f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	f043 0210 	orr.w	r2, r3, #16
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e08f      	b.n	8004918 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	ea42 0103 	orr.w	r1, r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	430a      	orrs	r2, r1
 800480a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004816:	f023 030f 	bic.w	r3, r3, #15
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6851      	ldr	r1, [r2, #4]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6892      	ldr	r2, [r2, #8]
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68d2      	ldr	r2, [r2, #12]
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6992      	ldr	r2, [r2, #24]
 800482e:	430a      	orrs	r2, r1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d161      	bne.n	8004908 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a38      	ldr	r2, [pc, #224]	; (8004928 <HAL_I2S_Init+0x274>)
 8004848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a37      	ldr	r2, [pc, #220]	; (800492c <HAL_I2S_Init+0x278>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_I2S_Init+0x1a4>
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <HAL_I2S_Init+0x27c>)
 8004856:	e001      	b.n	800485c <HAL_I2S_Init+0x1a8>
 8004858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	4932      	ldr	r1, [pc, #200]	; (800492c <HAL_I2S_Init+0x278>)
 8004864:	428a      	cmp	r2, r1
 8004866:	d101      	bne.n	800486c <HAL_I2S_Init+0x1b8>
 8004868:	4a31      	ldr	r2, [pc, #196]	; (8004930 <HAL_I2S_Init+0x27c>)
 800486a:	e001      	b.n	8004870 <HAL_I2S_Init+0x1bc>
 800486c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004870:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004874:	f023 030f 	bic.w	r3, r3, #15
 8004878:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2b      	ldr	r2, [pc, #172]	; (800492c <HAL_I2S_Init+0x278>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_I2S_Init+0x1d4>
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <HAL_I2S_Init+0x27c>)
 8004886:	e001      	b.n	800488c <HAL_I2S_Init+0x1d8>
 8004888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800488c:	2202      	movs	r2, #2
 800488e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a25      	ldr	r2, [pc, #148]	; (800492c <HAL_I2S_Init+0x278>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_I2S_Init+0x1ea>
 800489a:	4b25      	ldr	r3, [pc, #148]	; (8004930 <HAL_I2S_Init+0x27c>)
 800489c:	e001      	b.n	80048a2 <HAL_I2S_Init+0x1ee>
 800489e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ae:	d003      	beq.n	80048b8 <HAL_I2S_Init+0x204>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80048b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e001      	b.n	80048c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	b299      	uxth	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80048da:	4303      	orrs	r3, r0
 80048dc:	b29b      	uxth	r3, r3
 80048de:	430b      	orrs	r3, r1
 80048e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a0d      	ldr	r2, [pc, #52]	; (800492c <HAL_I2S_Init+0x278>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_I2S_Init+0x24c>
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_I2S_Init+0x27c>)
 80048fe:	e001      	b.n	8004904 <HAL_I2S_Init+0x250>
 8004900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004904:	897a      	ldrh	r2, [r7, #10]
 8004906:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	08004ff5 	.word	0x08004ff5
 8004924:	cccccccd 	.word	0xcccccccd
 8004928:	0800517d 	.word	0x0800517d
 800492c:	40003800 	.word	0x40003800
 8004930:	40003400 	.word	0x40003400

08004934 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_I2S_Receive_DMA+0x1a>
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0a1      	b.n	8004a96 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_I2S_Receive_DMA+0x2e>
 800495e:	2302      	movs	r3, #2
 8004960:	e099      	b.n	8004a96 <HAL_I2S_Receive_DMA+0x162>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
 8004980:	e089      	b.n	8004a96 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2204      	movs	r2, #4
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d002      	beq.n	80049ae <HAL_I2S_Receive_DMA+0x7a>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d10a      	bne.n	80049c4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	865a      	strh	r2, [r3, #50]	; 0x32
 80049c2:	e005      	b.n	80049d0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	4a32      	ldr	r2, [pc, #200]	; (8004aa0 <HAL_I2S_Receive_DMA+0x16c>)
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	4a31      	ldr	r2, [pc, #196]	; (8004aa4 <HAL_I2S_Receive_DMA+0x170>)
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	4a30      	ldr	r2, [pc, #192]	; (8004aa8 <HAL_I2S_Receive_DMA+0x174>)
 80049e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f6:	d10a      	bne.n	8004a0e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	4619      	mov	r1, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004a24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004a26:	f7fd fc6f 	bl	8002308 <HAL_DMA_Start_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00f      	beq.n	8004a50 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	f043 0208 	orr.w	r2, r3, #8
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e022      	b.n	8004a96 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08004ed3 	.word	0x08004ed3
 8004aa4:	08004e91 	.word	0x08004e91
 8004aa8:	08004eef 	.word	0x08004eef

08004aac <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac0:	d004      	beq.n	8004acc <HAL_I2S_DMAStop+0x20>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 80d1 	bne.w	8004c6e <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00f      	beq.n	8004af4 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fd fc6d 	bl	80023b8 <HAL_DMA_Abort>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	f043 0208 	orr.w	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004af4:	2364      	movs	r3, #100	; 0x64
 8004af6:	2201      	movs	r2, #1
 8004af8:	2102      	movs	r1, #2
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fb04 	bl	8005108 <I2S_WaitFlagStateUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004b1e:	2364      	movs	r3, #100	; 0x64
 8004b20:	2200      	movs	r2, #0
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 faef 	bl	8005108 <I2S_WaitFlagStateUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b56:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0202 	bic.w	r2, r2, #2
 8004b74:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b05      	cmp	r3, #5
 8004b80:	f040 8165 	bne.w	8004e4e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00f      	beq.n	8004bac <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fc11 	bl	80023b8 <HAL_DMA_Abort>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	f043 0208 	orr.w	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a8a      	ldr	r2, [pc, #552]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <HAL_I2S_DMAStop+0x10e>
 8004bb6:	4b8a      	ldr	r3, [pc, #552]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004bb8:	e001      	b.n	8004bbe <HAL_I2S_DMAStop+0x112>
 8004bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4985      	ldr	r1, [pc, #532]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004bc6:	428b      	cmp	r3, r1
 8004bc8:	d101      	bne.n	8004bce <HAL_I2S_DMAStop+0x122>
 8004bca:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004bcc:	e001      	b.n	8004bd2 <HAL_I2S_DMAStop+0x126>
 8004bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7e      	ldr	r2, [pc, #504]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_I2S_DMAStop+0x13e>
 8004be6:	4b7e      	ldr	r3, [pc, #504]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004be8:	e001      	b.n	8004bee <HAL_I2S_DMAStop+0x142>
 8004bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a79      	ldr	r2, [pc, #484]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2S_DMAStop+0x154>
 8004bfc:	4b78      	ldr	r3, [pc, #480]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004bfe:	e001      	b.n	8004c04 <HAL_I2S_DMAStop+0x158>
 8004c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a73      	ldr	r2, [pc, #460]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d101      	bne.n	8004c18 <HAL_I2S_DMAStop+0x16c>
 8004c14:	4b72      	ldr	r3, [pc, #456]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004c16:	e001      	b.n	8004c1c <HAL_I2S_DMAStop+0x170>
 8004c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	496e      	ldr	r1, [pc, #440]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004c24:	428b      	cmp	r3, r1
 8004c26:	d101      	bne.n	8004c2c <HAL_I2S_DMAStop+0x180>
 8004c28:	4b6d      	ldr	r3, [pc, #436]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004c2a:	e001      	b.n	8004c30 <HAL_I2S_DMAStop+0x184>
 8004c2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10c      	bne.n	8004c58 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004c56:	e0fa      	b.n	8004e4e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a5f      	ldr	r2, [pc, #380]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_I2S_DMAStop+0x1ba>
 8004c62:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004c64:	e001      	b.n	8004c6a <HAL_I2S_DMAStop+0x1be>
 8004c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c6a:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004c6c:	e0ef      	b.n	8004e4e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c76:	d005      	beq.n	8004c84 <HAL_I2S_DMAStop+0x1d8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c80:	f040 80e5 	bne.w	8004e4e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00f      	beq.n	8004cac <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd fb91 	bl	80023b8 <HAL_DMA_Abort>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	f043 0208 	orr.w	r2, r3, #8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	f040 809a 	bne.w	8004dee <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00f      	beq.n	8004ce2 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd fb76 	bl	80023b8 <HAL_DMA_Abort>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	f043 0208 	orr.w	r2, r3, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8004ce2:	f7fd f8a9 	bl	8001e38 <HAL_GetTick>
 8004ce6:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004ce8:	e012      	b.n	8004d10 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004cea:	f7fd f8a5 	bl	8001e38 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b64      	cmp	r3, #100	; 0x64
 8004cf6:	d90b      	bls.n	8004d10 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_I2S_DMAStop+0x272>
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004d1c:	e001      	b.n	8004d22 <HAL_I2S_DMAStop+0x276>
 8004d1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d1de      	bne.n	8004cea <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004d2c:	e012      	b.n	8004d54 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004d2e:	f7fd f883 	bl	8001e38 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	; 0x64
 8004d3a:	d90b      	bls.n	8004d54 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	f043 0201 	orr.w	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2S_DMAStop+0x2b6>
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004d60:	e001      	b.n	8004d66 <HAL_I2S_DMAStop+0x2ba>
 8004d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b80      	cmp	r3, #128	; 0x80
 8004d6e:	d0de      	beq.n	8004d2e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_I2S_DMAStop+0x2d2>
 8004d7a:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004d7c:	e001      	b.n	8004d82 <HAL_I2S_DMAStop+0x2d6>
 8004d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4914      	ldr	r1, [pc, #80]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2S_DMAStop+0x2e6>
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004d90:	e001      	b.n	8004d96 <HAL_I2S_DMAStop+0x2ea>
 8004d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_I2S_DMAStop+0x302>
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004dac:	e001      	b.n	8004db2 <HAL_I2S_DMAStop+0x306>
 8004dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2S_DMAStop+0x31a>
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004dc4:	e001      	b.n	8004dca <HAL_I2S_DMAStop+0x31e>
 8004dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4902      	ldr	r1, [pc, #8]	; (8004ddc <HAL_I2S_DMAStop+0x330>)
 8004dd2:	428b      	cmp	r3, r1
 8004dd4:	d106      	bne.n	8004de4 <HAL_I2S_DMAStop+0x338>
 8004dd6:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <HAL_I2S_DMAStop+0x334>)
 8004dd8:	e006      	b.n	8004de8 <HAL_I2S_DMAStop+0x33c>
 8004dda:	bf00      	nop
 8004ddc:	40003800 	.word	0x40003800
 8004de0:	40003400 	.word	0x40003400
 8004de4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de8:	f022 0202 	bic.w	r2, r2, #2
 8004dec:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d10c      	bne.n	8004e48 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e002      	b.n	8004e4e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8004e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e82:	b2db      	uxtb	r3, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10e      	bne.n	8004ec4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7fc f8a1 	bl	800100c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7fc f89d 	bl	8001020 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0203 	bic.w	r2, r2, #3
 8004f0a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f043 0208 	orr.w	r2, r3, #8
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fc fa39 	bl	80013a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	881a      	ldrh	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10e      	bne.n	8004f8e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff69 	bl	8004e60 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	1c9a      	adds	r2, r3, #2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10e      	bne.n	8004fec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fdc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc f810 	bl	800100c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fec:	bf00      	nop
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b04      	cmp	r3, #4
 800500e:	d13a      	bne.n	8005086 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d109      	bne.n	800502e <I2S_IRQHandler+0x3a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d102      	bne.n	800502e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffb4 	bl	8004f96 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d126      	bne.n	8005086 <I2S_IRQHandler+0x92>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d11f      	bne.n	8005086 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005054:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005078:	f043 0202 	orr.w	r2, r3, #2
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fc f98f 	bl	80013a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b03      	cmp	r3, #3
 8005090:	d136      	bne.n	8005100 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b02      	cmp	r3, #2
 800509a:	d109      	bne.n	80050b0 <I2S_IRQHandler+0xbc>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d102      	bne.n	80050b0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff ff45 	bl	8004f3a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d122      	bne.n	8005100 <I2S_IRQHandler+0x10c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d11b      	bne.n	8005100 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	f043 0204 	orr.w	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc f952 	bl	80013a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005118:	f7fc fe8e 	bl	8001e38 <HAL_GetTick>
 800511c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800511e:	e018      	b.n	8005152 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d014      	beq.n	8005152 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005128:	f7fc fe86 	bl	8001e38 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d902      	bls.n	800513e <I2S_WaitFlagStateUntilTimeout+0x36>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e00f      	b.n	8005172 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	429a      	cmp	r2, r3
 800516e:	d1d7      	bne.n	8005120 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4aa2      	ldr	r2, [pc, #648]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d101      	bne.n	800519a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005196:	4ba2      	ldr	r3, [pc, #648]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005198:	e001      	b.n	800519e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800519a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a9b      	ldr	r2, [pc, #620]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d101      	bne.n	80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80051b4:	4b9a      	ldr	r3, [pc, #616]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051b6:	e001      	b.n	80051bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80051b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c8:	d004      	beq.n	80051d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f040 8099 	bne.w	8005306 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d107      	bne.n	80051ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f925 	bl	8005438 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9c8 	bl	8005598 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b40      	cmp	r3, #64	; 0x40
 8005210:	d13a      	bne.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d035      	beq.n	8005288 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a7e      	ldr	r2, [pc, #504]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005226:	4b7e      	ldr	r3, [pc, #504]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005228:	e001      	b.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800522a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4979      	ldr	r1, [pc, #484]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005236:	428b      	cmp	r3, r1
 8005238:	d101      	bne.n	800523e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800523a:	4b79      	ldr	r3, [pc, #484]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800523c:	e001      	b.n	8005242 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800523e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005242:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005246:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005256:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f043 0202 	orr.w	r2, r3, #2
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc f88e 	bl	80013a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b08      	cmp	r3, #8
 8005290:	f040 80be 	bne.w	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80b8 	beq.w	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a59      	ldr	r2, [pc, #356]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80052ba:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052bc:	e001      	b.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80052be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4954      	ldr	r1, [pc, #336]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052ca:	428b      	cmp	r3, r1
 80052cc:	d101      	bne.n	80052d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80052ce:	4b54      	ldr	r3, [pc, #336]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052d0:	e001      	b.n	80052d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80052d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80052dc:	2300      	movs	r3, #0
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	f043 0204 	orr.w	r2, r3, #4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fc f850 	bl	80013a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005304:	e084      	b.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d107      	bne.n	8005320 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8be 	bl	800549c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d107      	bne.n	800533a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f8fd 	bl	8005534 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d12f      	bne.n	80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d02a      	beq.n	80053a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800535c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2e      	ldr	r2, [pc, #184]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d101      	bne.n	800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005368:	4b2d      	ldr	r3, [pc, #180]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800536a:	e001      	b.n	8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800536c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4929      	ldr	r1, [pc, #164]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005378:	428b      	cmp	r3, r1
 800537a:	d101      	bne.n	8005380 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800537c:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800537e:	e001      	b.n	8005384 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005388:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f043 0202 	orr.w	r2, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc f800 	bl	80013a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d131      	bne.n	8005412 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02c      	beq.n	8005412 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a17      	ldr	r2, [pc, #92]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053c4:	e001      	b.n	80053ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80053c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4912      	ldr	r1, [pc, #72]	; (800541c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d101      	bne.n	80053da <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80053d6:	4b12      	ldr	r3, [pc, #72]	; (8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053d8:	e001      	b.n	80053de <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80053da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053f2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fb ffcb 	bl	80013a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800540e:	e000      	b.n	8005412 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005410:	bf00      	nop
}
 8005412:	bf00      	nop
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40003800 	.word	0x40003800
 8005420:	40003400 	.word	0x40003400

08005424 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	1c99      	adds	r1, r3, #2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6251      	str	r1, [r2, #36]	; 0x24
 800544a:	881a      	ldrh	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d113      	bne.n	8005492 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005478:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ffc9 	bl	8005424 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	1c99      	adds	r1, r3, #2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6251      	str	r1, [r2, #36]	; 0x24
 80054ae:	8819      	ldrh	r1, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	; (800552c <I2SEx_TxISR_I2SExt+0x90>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <I2SEx_TxISR_I2SExt+0x22>
 80054ba:	4b1d      	ldr	r3, [pc, #116]	; (8005530 <I2SEx_TxISR_I2SExt+0x94>)
 80054bc:	e001      	b.n	80054c2 <I2SEx_TxISR_I2SExt+0x26>
 80054be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054c2:	460a      	mov	r2, r1
 80054c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d121      	bne.n	8005522 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a12      	ldr	r2, [pc, #72]	; (800552c <I2SEx_TxISR_I2SExt+0x90>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <I2SEx_TxISR_I2SExt+0x50>
 80054e8:	4b11      	ldr	r3, [pc, #68]	; (8005530 <I2SEx_TxISR_I2SExt+0x94>)
 80054ea:	e001      	b.n	80054f0 <I2SEx_TxISR_I2SExt+0x54>
 80054ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	490d      	ldr	r1, [pc, #52]	; (800552c <I2SEx_TxISR_I2SExt+0x90>)
 80054f8:	428b      	cmp	r3, r1
 80054fa:	d101      	bne.n	8005500 <I2SEx_TxISR_I2SExt+0x64>
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <I2SEx_TxISR_I2SExt+0x94>)
 80054fe:	e001      	b.n	8005504 <I2SEx_TxISR_I2SExt+0x68>
 8005500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005504:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005508:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff81 	bl	8005424 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40003800 	.word	0x40003800
 8005530:	40003400 	.word	0x40003400

08005534 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68d8      	ldr	r0, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	1c99      	adds	r1, r3, #2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800554c:	b282      	uxth	r2, r0
 800554e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d113      	bne.n	8005590 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005576:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ff4a 	bl	8005424 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a20      	ldr	r2, [pc, #128]	; (8005628 <I2SEx_RxISR_I2SExt+0x90>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <I2SEx_RxISR_I2SExt+0x16>
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <I2SEx_RxISR_I2SExt+0x94>)
 80055ac:	e001      	b.n	80055b2 <I2SEx_RxISR_I2SExt+0x1a>
 80055ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b2:	68d8      	ldr	r0, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	1c99      	adds	r1, r3, #2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80055be:	b282      	uxth	r2, r0
 80055c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d121      	bne.n	800561e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a12      	ldr	r2, [pc, #72]	; (8005628 <I2SEx_RxISR_I2SExt+0x90>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <I2SEx_RxISR_I2SExt+0x50>
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <I2SEx_RxISR_I2SExt+0x94>)
 80055e6:	e001      	b.n	80055ec <I2SEx_RxISR_I2SExt+0x54>
 80055e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <I2SEx_RxISR_I2SExt+0x90>)
 80055f4:	428b      	cmp	r3, r1
 80055f6:	d101      	bne.n	80055fc <I2SEx_RxISR_I2SExt+0x64>
 80055f8:	4b0c      	ldr	r3, [pc, #48]	; (800562c <I2SEx_RxISR_I2SExt+0x94>)
 80055fa:	e001      	b.n	8005600 <I2SEx_RxISR_I2SExt+0x68>
 80055fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005600:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005604:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff03 	bl	8005424 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40003800 	.word	0x40003800
 800562c:	40003400 	.word	0x40003400

08005630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e25b      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d075      	beq.n	800573a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800564e:	4ba3      	ldr	r3, [pc, #652]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b04      	cmp	r3, #4
 8005658:	d00c      	beq.n	8005674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800565a:	4ba0      	ldr	r3, [pc, #640]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005662:	2b08      	cmp	r3, #8
 8005664:	d112      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4b9d      	ldr	r3, [pc, #628]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005672:	d10b      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	4b99      	ldr	r3, [pc, #612]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05b      	beq.n	8005738 <HAL_RCC_OscConfig+0x108>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d157      	bne.n	8005738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e236      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x74>
 8005696:	4b91      	ldr	r3, [pc, #580]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a90      	ldr	r2, [pc, #576]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e01d      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x98>
 80056ae:	4b8b      	ldr	r3, [pc, #556]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a8a      	ldr	r2, [pc, #552]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b88      	ldr	r3, [pc, #544]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a87      	ldr	r2, [pc, #540]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056c8:	4b84      	ldr	r3, [pc, #528]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a83      	ldr	r2, [pc, #524]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	4b81      	ldr	r3, [pc, #516]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a80      	ldr	r2, [pc, #512]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80056da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fc fba6 	bl	8001e38 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fc fba2 	bl	8001e38 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	; 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e1fb      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005702:	4b76      	ldr	r3, [pc, #472]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0xc0>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fc fb92 	bl	8001e38 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005718:	f7fc fb8e 	bl	8001e38 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e1e7      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572a:	4b6c      	ldr	r3, [pc, #432]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0xe8>
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d063      	beq.n	800580e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005746:	4b65      	ldr	r3, [pc, #404]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005752:	4b62      	ldr	r3, [pc, #392]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800575a:	2b08      	cmp	r3, #8
 800575c:	d11c      	bne.n	8005798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b5f      	ldr	r3, [pc, #380]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d116      	bne.n	8005798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576a:	4b5c      	ldr	r3, [pc, #368]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_RCC_OscConfig+0x152>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e1bb      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b56      	ldr	r3, [pc, #344]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4952      	ldr	r1, [pc, #328]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005796:	e03a      	b.n	800580e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057a0:	4b4f      	ldr	r3, [pc, #316]	; (80058e0 <HAL_RCC_OscConfig+0x2b0>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fc fb47 	bl	8001e38 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fc fb43 	bl	8001e38 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e19c      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c0:	4b46      	ldr	r3, [pc, #280]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b43      	ldr	r3, [pc, #268]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4940      	ldr	r1, [pc, #256]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	e015      	b.n	800580e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e2:	4b3f      	ldr	r3, [pc, #252]	; (80058e0 <HAL_RCC_OscConfig+0x2b0>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fc fb26 	bl	8001e38 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fc fb22 	bl	8001e38 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e17b      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d030      	beq.n	800587c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005822:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <HAL_RCC_OscConfig+0x2b4>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fc fb06 	bl	8001e38 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005830:	f7fc fb02 	bl	8001e38 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e15b      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x200>
 800584e:	e015      	b.n	800587c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005850:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <HAL_RCC_OscConfig+0x2b4>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005856:	f7fc faef 	bl	8001e38 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585e:	f7fc faeb 	bl	8001e38 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e144      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005870:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f0      	bne.n	800585e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80a0 	beq.w	80059ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588a:	2300      	movs	r3, #0
 800588c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588e:	4b13      	ldr	r3, [pc, #76]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6413      	str	r3, [r2, #64]	; 0x40
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ba:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RCC_OscConfig+0x2b8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d121      	bne.n	800590a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_RCC_OscConfig+0x2b8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <HAL_RCC_OscConfig+0x2b8>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d2:	f7fc fab1 	bl	8001e38 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d8:	e011      	b.n	80058fe <HAL_RCC_OscConfig+0x2ce>
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	42470000 	.word	0x42470000
 80058e4:	42470e80 	.word	0x42470e80
 80058e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fc faa4 	bl	8001e38 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e0fd      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fe:	4b81      	ldr	r3, [pc, #516]	; (8005b04 <HAL_RCC_OscConfig+0x4d4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d106      	bne.n	8005920 <HAL_RCC_OscConfig+0x2f0>
 8005912:	4b7d      	ldr	r3, [pc, #500]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4a7c      	ldr	r2, [pc, #496]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6713      	str	r3, [r2, #112]	; 0x70
 800591e:	e01c      	b.n	800595a <HAL_RCC_OscConfig+0x32a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d10c      	bne.n	8005942 <HAL_RCC_OscConfig+0x312>
 8005928:	4b77      	ldr	r3, [pc, #476]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	4a76      	ldr	r2, [pc, #472]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 800592e:	f043 0304 	orr.w	r3, r3, #4
 8005932:	6713      	str	r3, [r2, #112]	; 0x70
 8005934:	4b74      	ldr	r3, [pc, #464]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	4a73      	ldr	r2, [pc, #460]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6713      	str	r3, [r2, #112]	; 0x70
 8005940:	e00b      	b.n	800595a <HAL_RCC_OscConfig+0x32a>
 8005942:	4b71      	ldr	r3, [pc, #452]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a70      	ldr	r2, [pc, #448]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	4b6e      	ldr	r3, [pc, #440]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a6d      	ldr	r2, [pc, #436]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005954:	f023 0304 	bic.w	r3, r3, #4
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d015      	beq.n	800598e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fc fa69 	bl	8001e38 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fc fa65 	bl	8001e38 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e0bc      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005980:	4b61      	ldr	r3, [pc, #388]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0ee      	beq.n	800596a <HAL_RCC_OscConfig+0x33a>
 800598c:	e014      	b.n	80059b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598e:	f7fc fa53 	bl	8001e38 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005994:	e00a      	b.n	80059ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fc fa4f 	bl	8001e38 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0a6      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ac:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1ee      	bne.n	8005996 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b8:	7dfb      	ldrb	r3, [r7, #23]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d105      	bne.n	80059ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059be:	4b52      	ldr	r3, [pc, #328]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	4a51      	ldr	r2, [pc, #324]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 80059c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8092 	beq.w	8005af8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059d4:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d05c      	beq.n	8005a9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d141      	bne.n	8005a6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e8:	4b48      	ldr	r3, [pc, #288]	; (8005b0c <HAL_RCC_OscConfig+0x4dc>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ee:	f7fc fa23 	bl	8001e38 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f6:	f7fc fa1f 	bl	8001e38 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e078      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a08:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f0      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	019b      	lsls	r3, r3, #6
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	061b      	lsls	r3, r3, #24
 8005a38:	4933      	ldr	r1, [pc, #204]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a3e:	4b33      	ldr	r3, [pc, #204]	; (8005b0c <HAL_RCC_OscConfig+0x4dc>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fc f9f8 	bl	8001e38 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fc f9f4 	bl	8001e38 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e04d      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0x41c>
 8005a6a:	e045      	b.n	8005af8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6c:	4b27      	ldr	r3, [pc, #156]	; (8005b0c <HAL_RCC_OscConfig+0x4dc>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a72:	f7fc f9e1 	bl	8001e38 <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7a:	f7fc f9dd 	bl	8001e38 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e036      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8c:	4b1e      	ldr	r3, [pc, #120]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1f0      	bne.n	8005a7a <HAL_RCC_OscConfig+0x44a>
 8005a98:	e02e      	b.n	8005af8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e029      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aa6:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <HAL_RCC_OscConfig+0x4d8>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d11c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d115      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ace:	4013      	ands	r3, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10d      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d106      	bne.n	8005af4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40007000 	.word	0x40007000
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	42470060 	.word	0x42470060

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0cc      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b24:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d90c      	bls.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b63      	ldr	r3, [pc, #396]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0b8      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d020      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b64:	4b59      	ldr	r3, [pc, #356]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a58      	ldr	r2, [pc, #352]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b7c:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a52      	ldr	r2, [pc, #328]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b88:	4b50      	ldr	r3, [pc, #320]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	494d      	ldr	r1, [pc, #308]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d044      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bae:	4b47      	ldr	r3, [pc, #284]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d119      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e07f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e06f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bde:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e067      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bee:	4b37      	ldr	r3, [pc, #220]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 0203 	bic.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4934      	ldr	r1, [pc, #208]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c00:	f7fc f91a 	bl	8001e38 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c08:	f7fc f916 	bl	8001e38 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e04f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 020c 	and.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d1eb      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c30:	4b25      	ldr	r3, [pc, #148]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d20c      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e032      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c64:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4916      	ldr	r1, [pc, #88]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	490e      	ldr	r1, [pc, #56]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c96:	f000 f821 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	5cd3      	ldrb	r3, [r2, r3]
 8005caa:	fa21 f303 	lsr.w	r3, r1, r3
 8005cae:	4a09      	ldr	r2, [pc, #36]	; (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cb2:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc f87a 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	08011228 	.word	0x08011228
 8005cd4:	20000400 	.word	0x20000400
 8005cd8:	20000404 	.word	0x20000404

08005cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	2300      	movs	r3, #0
 8005cec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf2:	4b63      	ldr	r3, [pc, #396]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d007      	beq.n	8005d0e <HAL_RCC_GetSysClockFreq+0x32>
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d008      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0x38>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 80b4 	bne.w	8005e70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d08:	4b5e      	ldr	r3, [pc, #376]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d0a:	60bb      	str	r3, [r7, #8]
       break;
 8005d0c:	e0b3      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d0e:	4b5e      	ldr	r3, [pc, #376]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d10:	60bb      	str	r3, [r7, #8]
      break;
 8005d12:	e0b0      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d14:	4b5a      	ldr	r3, [pc, #360]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d1e:	4b58      	ldr	r3, [pc, #352]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d04a      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2a:	4b55      	ldr	r3, [pc, #340]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	f04f 0400 	mov.w	r4, #0
 8005d34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	ea03 0501 	and.w	r5, r3, r1
 8005d40:	ea04 0602 	and.w	r6, r4, r2
 8005d44:	4629      	mov	r1, r5
 8005d46:	4632      	mov	r2, r6
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	f04f 0400 	mov.w	r4, #0
 8005d50:	0154      	lsls	r4, r2, #5
 8005d52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d56:	014b      	lsls	r3, r1, #5
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	1b49      	subs	r1, r1, r5
 8005d5e:	eb62 0206 	sbc.w	r2, r2, r6
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	f04f 0400 	mov.w	r4, #0
 8005d6a:	0194      	lsls	r4, r2, #6
 8005d6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d70:	018b      	lsls	r3, r1, #6
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	eb64 0402 	sbc.w	r4, r4, r2
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	00e2      	lsls	r2, r4, #3
 8005d82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d86:	00d9      	lsls	r1, r3, #3
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	195b      	adds	r3, r3, r5
 8005d8e:	eb44 0406 	adc.w	r4, r4, r6
 8005d92:	f04f 0100 	mov.w	r1, #0
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	0262      	lsls	r2, r4, #9
 8005d9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005da0:	0259      	lsls	r1, r3, #9
 8005da2:	460b      	mov	r3, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	4621      	mov	r1, r4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f04f 0400 	mov.w	r4, #0
 8005db0:	461a      	mov	r2, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	f7fa fc78 	bl	80006a8 <__aeabi_uldivmod>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e049      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc0:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	f04f 0400 	mov.w	r4, #0
 8005dca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	ea03 0501 	and.w	r5, r3, r1
 8005dd6:	ea04 0602 	and.w	r6, r4, r2
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4632      	mov	r2, r6
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	f04f 0400 	mov.w	r4, #0
 8005de6:	0154      	lsls	r4, r2, #5
 8005de8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005dec:	014b      	lsls	r3, r1, #5
 8005dee:	4619      	mov	r1, r3
 8005df0:	4622      	mov	r2, r4
 8005df2:	1b49      	subs	r1, r1, r5
 8005df4:	eb62 0206 	sbc.w	r2, r2, r6
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	f04f 0400 	mov.w	r4, #0
 8005e00:	0194      	lsls	r4, r2, #6
 8005e02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e06:	018b      	lsls	r3, r1, #6
 8005e08:	1a5b      	subs	r3, r3, r1
 8005e0a:	eb64 0402 	sbc.w	r4, r4, r2
 8005e0e:	f04f 0100 	mov.w	r1, #0
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	00e2      	lsls	r2, r4, #3
 8005e18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e1c:	00d9      	lsls	r1, r3, #3
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	195b      	adds	r3, r3, r5
 8005e24:	eb44 0406 	adc.w	r4, r4, r6
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	02a2      	lsls	r2, r4, #10
 8005e32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e36:	0299      	lsls	r1, r3, #10
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4614      	mov	r4, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	4621      	mov	r1, r4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f04f 0400 	mov.w	r4, #0
 8005e46:	461a      	mov	r2, r3
 8005e48:	4623      	mov	r3, r4
 8005e4a:	f7fa fc2d 	bl	80006a8 <__aeabi_uldivmod>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e54:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	60bb      	str	r3, [r7, #8]
      break;
 8005e6e:	e002      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e72:	60bb      	str	r3, [r7, #8]
      break;
 8005e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e76:	68bb      	ldr	r3, [r7, #8]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e80:	40023800 	.word	0x40023800
 8005e84:	00f42400 	.word	0x00f42400
 8005e88:	007a1200 	.word	0x007a1200

08005e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000400 	.word	0x20000400

08005ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ea8:	f7ff fff0 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005eac:	4601      	mov	r1, r0
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0a9b      	lsrs	r3, r3, #10
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4a03      	ldr	r2, [pc, #12]	; (8005ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eba:	5cd3      	ldrb	r3, [r2, r3]
 8005ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	08011238 	.word	0x08011238

08005ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ed0:	f7ff ffdc 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005ed4:	4601      	mov	r1, r0
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	0b5b      	lsrs	r3, r3, #13
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	4a03      	ldr	r2, [pc, #12]	; (8005ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	08011238 	.word	0x08011238

08005ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d038      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f1c:	4b68      	ldr	r3, [pc, #416]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f22:	f7fb ff89 	bl	8001e38 <HAL_GetTick>
 8005f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f2a:	f7fb ff85 	bl	8001e38 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0bd      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f3c:	4b61      	ldr	r3, [pc, #388]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	019b      	lsls	r3, r3, #6
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	071b      	lsls	r3, r3, #28
 8005f5a:	495a      	ldr	r1, [pc, #360]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f62:	4b57      	ldr	r3, [pc, #348]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f68:	f7fb ff66 	bl	8001e38 <HAL_GetTick>
 8005f6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f70:	f7fb ff62 	bl	8001e38 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e09a      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f82:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8083 	beq.w	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	4b48      	ldr	r3, [pc, #288]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa4:	4a47      	ldr	r2, [pc, #284]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005faa:	6413      	str	r3, [r2, #64]	; 0x40
 8005fac:	4b45      	ldr	r3, [pc, #276]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fb8:	4b43      	ldr	r3, [pc, #268]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a42      	ldr	r2, [pc, #264]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fc4:	f7fb ff38 	bl	8001e38 <HAL_GetTick>
 8005fc8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fcc:	f7fb ff34 	bl	8001e38 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e06c      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fde:	4b3a      	ldr	r3, [pc, #232]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d02f      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d028      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006008:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006012:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006014:	2201      	movs	r2, #1
 8006016:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006018:	4b2c      	ldr	r3, [pc, #176]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800601e:	4a29      	ldr	r2, [pc, #164]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006024:	4b27      	ldr	r3, [pc, #156]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d114      	bne.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006030:	f7fb ff02 	bl	8001e38 <HAL_GetTick>
 8006034:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006036:	e00a      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006038:	f7fb fefe 	bl	8001e38 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	; 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e034      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604e:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0ee      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006066:	d10d      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006068:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607c:	4911      	ldr	r1, [pc, #68]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
 8006082:	e005      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800608e:	6093      	str	r3, [r2, #8]
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7d1a      	ldrb	r2, [r3, #20]
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80060b4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	42470068 	.word	0x42470068
 80060c4:	40023800 	.word	0x40023800
 80060c8:	40007000 	.word	0x40007000
 80060cc:	42470e40 	.word	0x42470e40
 80060d0:	424711e0 	.word	0x424711e0

080060d4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2203      	movs	r2, #3
 80060e0:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80060e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060e8:	099b      	lsrs	r3, r3, #6
 80060ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060f2:	4b18      	ldr	r3, [pc, #96]	; (8006154 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80060f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060f8:	0f1b      	lsrs	r3, r3, #28
 80060fa:	f003 0207 	and.w	r2, r3, #7
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006110:	4b10      	ldr	r3, [pc, #64]	; (8006154 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006118:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800612c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 800613e:	e002      	b.n	8006146 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	751a      	strb	r2, [r3, #20]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40023800 	.word	0x40023800

08006158 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d13f      	bne.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006186:	2b01      	cmp	r3, #1
 8006188:	d131      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800618a:	4b1f      	ldr	r3, [pc, #124]	; (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800618c:	617b      	str	r3, [r7, #20]
          break;
 800618e:	e031      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006190:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619c:	d109      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800619e:	4b19      	ldr	r3, [pc, #100]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a8:	4a18      	ldr	r2, [pc, #96]	; (800620c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	e008      	b.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80061c4:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061de:	0f1b      	lsrs	r3, r3, #28
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	617b      	str	r3, [r7, #20]
          break;
 80061ec:	e002      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
          break;
 80061f2:	bf00      	nop
        }
      }
      break;
 80061f4:	bf00      	nop
    }
  }
  return frequency;
 80061f6:	697b      	ldr	r3, [r7, #20]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40023800 	.word	0x40023800
 8006208:	00bb8000 	.word	0x00bb8000
 800620c:	007a1200 	.word	0x007a1200
 8006210:	00f42400 	.word	0x00f42400

08006214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e03f      	b.n	80062a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fb f9ac 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	; 0x24
 8006244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f90b 	bl	8006474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800626c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800627c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b088      	sub	sp, #32
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	603b      	str	r3, [r7, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f040 8083 	bne.w	80063d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_UART_Transmit+0x2e>
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e07b      	b.n	80063d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Transmit+0x40>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e074      	b.n	80063d8 <HAL_UART_Transmit+0x12a>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2221      	movs	r2, #33	; 0x21
 8006300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006304:	f7fb fd98 	bl	8001e38 <HAL_GetTick>
 8006308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800631e:	e042      	b.n	80063a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d122      	bne.n	800637e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	2180      	movs	r1, #128	; 0x80
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f84c 	bl	80063e0 <UART_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e042      	b.n	80063d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	3302      	adds	r3, #2
 8006372:	60bb      	str	r3, [r7, #8]
 8006374:	e017      	b.n	80063a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	3301      	adds	r3, #1
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	e013      	b.n	80063a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f829 	bl	80063e0 <UART_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e01f      	b.n	80063d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	60ba      	str	r2, [r7, #8]
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1b7      	bne.n	8006320 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2140      	movs	r1, #64	; 0x40
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f810 	bl	80063e0 <UART_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e006      	b.n	80063d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f0:	e02c      	b.n	800644c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d028      	beq.n	800644c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <UART_WaitOnFlagUntilTimeout+0x30>
 8006400:	f7fb fd1a 	bl	8001e38 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	429a      	cmp	r2, r3
 800640e:	d21d      	bcs.n	800644c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800641e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0201 	bic.w	r2, r2, #1
 800642e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e00f      	b.n	800646c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4013      	ands	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	429a      	cmp	r2, r3
 8006468:	d0c3      	beq.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80064b6:	f023 030c 	bic.w	r3, r3, #12
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	430b      	orrs	r3, r1
 80064c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e2:	f040 818b 	bne.w	80067fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4ac1      	ldr	r2, [pc, #772]	; (80067f0 <UART_SetConfig+0x37c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d005      	beq.n	80064fc <UART_SetConfig+0x88>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4abf      	ldr	r2, [pc, #764]	; (80067f4 <UART_SetConfig+0x380>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	f040 80bd 	bne.w	8006676 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7ff fce6 	bl	8005ecc <HAL_RCC_GetPCLK2Freq>
 8006500:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	461d      	mov	r5, r3
 8006506:	f04f 0600 	mov.w	r6, #0
 800650a:	46a8      	mov	r8, r5
 800650c:	46b1      	mov	r9, r6
 800650e:	eb18 0308 	adds.w	r3, r8, r8
 8006512:	eb49 0409 	adc.w	r4, r9, r9
 8006516:	4698      	mov	r8, r3
 8006518:	46a1      	mov	r9, r4
 800651a:	eb18 0805 	adds.w	r8, r8, r5
 800651e:	eb49 0906 	adc.w	r9, r9, r6
 8006522:	f04f 0100 	mov.w	r1, #0
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800652e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006532:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006536:	4688      	mov	r8, r1
 8006538:	4691      	mov	r9, r2
 800653a:	eb18 0005 	adds.w	r0, r8, r5
 800653e:	eb49 0106 	adc.w	r1, r9, r6
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	461d      	mov	r5, r3
 8006548:	f04f 0600 	mov.w	r6, #0
 800654c:	196b      	adds	r3, r5, r5
 800654e:	eb46 0406 	adc.w	r4, r6, r6
 8006552:	461a      	mov	r2, r3
 8006554:	4623      	mov	r3, r4
 8006556:	f7fa f8a7 	bl	80006a8 <__aeabi_uldivmod>
 800655a:	4603      	mov	r3, r0
 800655c:	460c      	mov	r4, r1
 800655e:	461a      	mov	r2, r3
 8006560:	4ba5      	ldr	r3, [pc, #660]	; (80067f8 <UART_SetConfig+0x384>)
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	461d      	mov	r5, r3
 8006570:	f04f 0600 	mov.w	r6, #0
 8006574:	46a9      	mov	r9, r5
 8006576:	46b2      	mov	sl, r6
 8006578:	eb19 0309 	adds.w	r3, r9, r9
 800657c:	eb4a 040a 	adc.w	r4, sl, sl
 8006580:	4699      	mov	r9, r3
 8006582:	46a2      	mov	sl, r4
 8006584:	eb19 0905 	adds.w	r9, r9, r5
 8006588:	eb4a 0a06 	adc.w	sl, sl, r6
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006598:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800659c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065a0:	4689      	mov	r9, r1
 80065a2:	4692      	mov	sl, r2
 80065a4:	eb19 0005 	adds.w	r0, r9, r5
 80065a8:	eb4a 0106 	adc.w	r1, sl, r6
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	461d      	mov	r5, r3
 80065b2:	f04f 0600 	mov.w	r6, #0
 80065b6:	196b      	adds	r3, r5, r5
 80065b8:	eb46 0406 	adc.w	r4, r6, r6
 80065bc:	461a      	mov	r2, r3
 80065be:	4623      	mov	r3, r4
 80065c0:	f7fa f872 	bl	80006a8 <__aeabi_uldivmod>
 80065c4:	4603      	mov	r3, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b8b      	ldr	r3, [pc, #556]	; (80067f8 <UART_SetConfig+0x384>)
 80065cc:	fba3 1302 	umull	r1, r3, r3, r2
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	2164      	movs	r1, #100	; 0x64
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	3332      	adds	r3, #50	; 0x32
 80065de:	4a86      	ldr	r2, [pc, #536]	; (80067f8 <UART_SetConfig+0x384>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ec:	4498      	add	r8, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	461d      	mov	r5, r3
 80065f2:	f04f 0600 	mov.w	r6, #0
 80065f6:	46a9      	mov	r9, r5
 80065f8:	46b2      	mov	sl, r6
 80065fa:	eb19 0309 	adds.w	r3, r9, r9
 80065fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006602:	4699      	mov	r9, r3
 8006604:	46a2      	mov	sl, r4
 8006606:	eb19 0905 	adds.w	r9, r9, r5
 800660a:	eb4a 0a06 	adc.w	sl, sl, r6
 800660e:	f04f 0100 	mov.w	r1, #0
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800661a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800661e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006622:	4689      	mov	r9, r1
 8006624:	4692      	mov	sl, r2
 8006626:	eb19 0005 	adds.w	r0, r9, r5
 800662a:	eb4a 0106 	adc.w	r1, sl, r6
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	461d      	mov	r5, r3
 8006634:	f04f 0600 	mov.w	r6, #0
 8006638:	196b      	adds	r3, r5, r5
 800663a:	eb46 0406 	adc.w	r4, r6, r6
 800663e:	461a      	mov	r2, r3
 8006640:	4623      	mov	r3, r4
 8006642:	f7fa f831 	bl	80006a8 <__aeabi_uldivmod>
 8006646:	4603      	mov	r3, r0
 8006648:	460c      	mov	r4, r1
 800664a:	461a      	mov	r2, r3
 800664c:	4b6a      	ldr	r3, [pc, #424]	; (80067f8 <UART_SetConfig+0x384>)
 800664e:	fba3 1302 	umull	r1, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	2164      	movs	r1, #100	; 0x64
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	3332      	adds	r3, #50	; 0x32
 8006660:	4a65      	ldr	r2, [pc, #404]	; (80067f8 <UART_SetConfig+0x384>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f003 0207 	and.w	r2, r3, #7
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4442      	add	r2, r8
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	e26f      	b.n	8006b56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006676:	f7ff fc15 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 800667a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	461d      	mov	r5, r3
 8006680:	f04f 0600 	mov.w	r6, #0
 8006684:	46a8      	mov	r8, r5
 8006686:	46b1      	mov	r9, r6
 8006688:	eb18 0308 	adds.w	r3, r8, r8
 800668c:	eb49 0409 	adc.w	r4, r9, r9
 8006690:	4698      	mov	r8, r3
 8006692:	46a1      	mov	r9, r4
 8006694:	eb18 0805 	adds.w	r8, r8, r5
 8006698:	eb49 0906 	adc.w	r9, r9, r6
 800669c:	f04f 0100 	mov.w	r1, #0
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066b0:	4688      	mov	r8, r1
 80066b2:	4691      	mov	r9, r2
 80066b4:	eb18 0005 	adds.w	r0, r8, r5
 80066b8:	eb49 0106 	adc.w	r1, r9, r6
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	461d      	mov	r5, r3
 80066c2:	f04f 0600 	mov.w	r6, #0
 80066c6:	196b      	adds	r3, r5, r5
 80066c8:	eb46 0406 	adc.w	r4, r6, r6
 80066cc:	461a      	mov	r2, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	f7f9 ffea 	bl	80006a8 <__aeabi_uldivmod>
 80066d4:	4603      	mov	r3, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	461a      	mov	r2, r3
 80066da:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <UART_SetConfig+0x384>)
 80066dc:	fba3 2302 	umull	r2, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	461d      	mov	r5, r3
 80066ea:	f04f 0600 	mov.w	r6, #0
 80066ee:	46a9      	mov	r9, r5
 80066f0:	46b2      	mov	sl, r6
 80066f2:	eb19 0309 	adds.w	r3, r9, r9
 80066f6:	eb4a 040a 	adc.w	r4, sl, sl
 80066fa:	4699      	mov	r9, r3
 80066fc:	46a2      	mov	sl, r4
 80066fe:	eb19 0905 	adds.w	r9, r9, r5
 8006702:	eb4a 0a06 	adc.w	sl, sl, r6
 8006706:	f04f 0100 	mov.w	r1, #0
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006712:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006716:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800671a:	4689      	mov	r9, r1
 800671c:	4692      	mov	sl, r2
 800671e:	eb19 0005 	adds.w	r0, r9, r5
 8006722:	eb4a 0106 	adc.w	r1, sl, r6
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	461d      	mov	r5, r3
 800672c:	f04f 0600 	mov.w	r6, #0
 8006730:	196b      	adds	r3, r5, r5
 8006732:	eb46 0406 	adc.w	r4, r6, r6
 8006736:	461a      	mov	r2, r3
 8006738:	4623      	mov	r3, r4
 800673a:	f7f9 ffb5 	bl	80006a8 <__aeabi_uldivmod>
 800673e:	4603      	mov	r3, r0
 8006740:	460c      	mov	r4, r1
 8006742:	461a      	mov	r2, r3
 8006744:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <UART_SetConfig+0x384>)
 8006746:	fba3 1302 	umull	r1, r3, r3, r2
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	2164      	movs	r1, #100	; 0x64
 800674e:	fb01 f303 	mul.w	r3, r1, r3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	3332      	adds	r3, #50	; 0x32
 8006758:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <UART_SetConfig+0x384>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006766:	4498      	add	r8, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	461d      	mov	r5, r3
 800676c:	f04f 0600 	mov.w	r6, #0
 8006770:	46a9      	mov	r9, r5
 8006772:	46b2      	mov	sl, r6
 8006774:	eb19 0309 	adds.w	r3, r9, r9
 8006778:	eb4a 040a 	adc.w	r4, sl, sl
 800677c:	4699      	mov	r9, r3
 800677e:	46a2      	mov	sl, r4
 8006780:	eb19 0905 	adds.w	r9, r9, r5
 8006784:	eb4a 0a06 	adc.w	sl, sl, r6
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800679c:	4689      	mov	r9, r1
 800679e:	4692      	mov	sl, r2
 80067a0:	eb19 0005 	adds.w	r0, r9, r5
 80067a4:	eb4a 0106 	adc.w	r1, sl, r6
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	461d      	mov	r5, r3
 80067ae:	f04f 0600 	mov.w	r6, #0
 80067b2:	196b      	adds	r3, r5, r5
 80067b4:	eb46 0406 	adc.w	r4, r6, r6
 80067b8:	461a      	mov	r2, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	f7f9 ff74 	bl	80006a8 <__aeabi_uldivmod>
 80067c0:	4603      	mov	r3, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <UART_SetConfig+0x384>)
 80067c8:	fba3 1302 	umull	r1, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	2164      	movs	r1, #100	; 0x64
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	3332      	adds	r3, #50	; 0x32
 80067da:	4a07      	ldr	r2, [pc, #28]	; (80067f8 <UART_SetConfig+0x384>)
 80067dc:	fba2 2303 	umull	r2, r3, r2, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f003 0207 	and.w	r2, r3, #7
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4442      	add	r2, r8
 80067ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80067ee:	e1b2      	b.n	8006b56 <UART_SetConfig+0x6e2>
 80067f0:	40011000 	.word	0x40011000
 80067f4:	40011400 	.word	0x40011400
 80067f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4ad7      	ldr	r2, [pc, #860]	; (8006b60 <UART_SetConfig+0x6ec>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d005      	beq.n	8006812 <UART_SetConfig+0x39e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4ad6      	ldr	r2, [pc, #856]	; (8006b64 <UART_SetConfig+0x6f0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	f040 80d1 	bne.w	80069b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006812:	f7ff fb5b 	bl	8005ecc <HAL_RCC_GetPCLK2Freq>
 8006816:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	469a      	mov	sl, r3
 800681c:	f04f 0b00 	mov.w	fp, #0
 8006820:	46d0      	mov	r8, sl
 8006822:	46d9      	mov	r9, fp
 8006824:	eb18 0308 	adds.w	r3, r8, r8
 8006828:	eb49 0409 	adc.w	r4, r9, r9
 800682c:	4698      	mov	r8, r3
 800682e:	46a1      	mov	r9, r4
 8006830:	eb18 080a 	adds.w	r8, r8, sl
 8006834:	eb49 090b 	adc.w	r9, r9, fp
 8006838:	f04f 0100 	mov.w	r1, #0
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006844:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006848:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800684c:	4688      	mov	r8, r1
 800684e:	4691      	mov	r9, r2
 8006850:	eb1a 0508 	adds.w	r5, sl, r8
 8006854:	eb4b 0609 	adc.w	r6, fp, r9
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4619      	mov	r1, r3
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	f04f 0400 	mov.w	r4, #0
 800686a:	0094      	lsls	r4, r2, #2
 800686c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006870:	008b      	lsls	r3, r1, #2
 8006872:	461a      	mov	r2, r3
 8006874:	4623      	mov	r3, r4
 8006876:	4628      	mov	r0, r5
 8006878:	4631      	mov	r1, r6
 800687a:	f7f9 ff15 	bl	80006a8 <__aeabi_uldivmod>
 800687e:	4603      	mov	r3, r0
 8006880:	460c      	mov	r4, r1
 8006882:	461a      	mov	r2, r3
 8006884:	4bb8      	ldr	r3, [pc, #736]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006886:	fba3 2302 	umull	r2, r3, r3, r2
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	469b      	mov	fp, r3
 8006894:	f04f 0c00 	mov.w	ip, #0
 8006898:	46d9      	mov	r9, fp
 800689a:	46e2      	mov	sl, ip
 800689c:	eb19 0309 	adds.w	r3, r9, r9
 80068a0:	eb4a 040a 	adc.w	r4, sl, sl
 80068a4:	4699      	mov	r9, r3
 80068a6:	46a2      	mov	sl, r4
 80068a8:	eb19 090b 	adds.w	r9, r9, fp
 80068ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068b0:	f04f 0100 	mov.w	r1, #0
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068c4:	4689      	mov	r9, r1
 80068c6:	4692      	mov	sl, r2
 80068c8:	eb1b 0509 	adds.w	r5, fp, r9
 80068cc:	eb4c 060a 	adc.w	r6, ip, sl
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4619      	mov	r1, r3
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	f04f 0400 	mov.w	r4, #0
 80068e2:	0094      	lsls	r4, r2, #2
 80068e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068e8:	008b      	lsls	r3, r1, #2
 80068ea:	461a      	mov	r2, r3
 80068ec:	4623      	mov	r3, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	4631      	mov	r1, r6
 80068f2:	f7f9 fed9 	bl	80006a8 <__aeabi_uldivmod>
 80068f6:	4603      	mov	r3, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	461a      	mov	r2, r3
 80068fc:	4b9a      	ldr	r3, [pc, #616]	; (8006b68 <UART_SetConfig+0x6f4>)
 80068fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	2164      	movs	r1, #100	; 0x64
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	3332      	adds	r3, #50	; 0x32
 8006910:	4a95      	ldr	r2, [pc, #596]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006912:	fba2 2303 	umull	r2, r3, r2, r3
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800691c:	4498      	add	r8, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	469b      	mov	fp, r3
 8006922:	f04f 0c00 	mov.w	ip, #0
 8006926:	46d9      	mov	r9, fp
 8006928:	46e2      	mov	sl, ip
 800692a:	eb19 0309 	adds.w	r3, r9, r9
 800692e:	eb4a 040a 	adc.w	r4, sl, sl
 8006932:	4699      	mov	r9, r3
 8006934:	46a2      	mov	sl, r4
 8006936:	eb19 090b 	adds.w	r9, r9, fp
 800693a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800694a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800694e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006952:	4689      	mov	r9, r1
 8006954:	4692      	mov	sl, r2
 8006956:	eb1b 0509 	adds.w	r5, fp, r9
 800695a:	eb4c 060a 	adc.w	r6, ip, sl
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	f04f 0400 	mov.w	r4, #0
 8006970:	0094      	lsls	r4, r2, #2
 8006972:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006976:	008b      	lsls	r3, r1, #2
 8006978:	461a      	mov	r2, r3
 800697a:	4623      	mov	r3, r4
 800697c:	4628      	mov	r0, r5
 800697e:	4631      	mov	r1, r6
 8006980:	f7f9 fe92 	bl	80006a8 <__aeabi_uldivmod>
 8006984:	4603      	mov	r3, r0
 8006986:	460c      	mov	r4, r1
 8006988:	461a      	mov	r2, r3
 800698a:	4b77      	ldr	r3, [pc, #476]	; (8006b68 <UART_SetConfig+0x6f4>)
 800698c:	fba3 1302 	umull	r1, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	2164      	movs	r1, #100	; 0x64
 8006994:	fb01 f303 	mul.w	r3, r1, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	3332      	adds	r3, #50	; 0x32
 800699e:	4a72      	ldr	r2, [pc, #456]	; (8006b68 <UART_SetConfig+0x6f4>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f003 020f 	and.w	r2, r3, #15
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4442      	add	r2, r8
 80069b0:	609a      	str	r2, [r3, #8]
 80069b2:	e0d0      	b.n	8006b56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80069b4:	f7ff fa76 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 80069b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	469a      	mov	sl, r3
 80069be:	f04f 0b00 	mov.w	fp, #0
 80069c2:	46d0      	mov	r8, sl
 80069c4:	46d9      	mov	r9, fp
 80069c6:	eb18 0308 	adds.w	r3, r8, r8
 80069ca:	eb49 0409 	adc.w	r4, r9, r9
 80069ce:	4698      	mov	r8, r3
 80069d0:	46a1      	mov	r9, r4
 80069d2:	eb18 080a 	adds.w	r8, r8, sl
 80069d6:	eb49 090b 	adc.w	r9, r9, fp
 80069da:	f04f 0100 	mov.w	r1, #0
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069ee:	4688      	mov	r8, r1
 80069f0:	4691      	mov	r9, r2
 80069f2:	eb1a 0508 	adds.w	r5, sl, r8
 80069f6:	eb4b 0609 	adc.w	r6, fp, r9
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	4619      	mov	r1, r3
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	f04f 0400 	mov.w	r4, #0
 8006a0c:	0094      	lsls	r4, r2, #2
 8006a0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a12:	008b      	lsls	r3, r1, #2
 8006a14:	461a      	mov	r2, r3
 8006a16:	4623      	mov	r3, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	f7f9 fe44 	bl	80006a8 <__aeabi_uldivmod>
 8006a20:	4603      	mov	r3, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	461a      	mov	r2, r3
 8006a26:	4b50      	ldr	r3, [pc, #320]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006a28:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	469b      	mov	fp, r3
 8006a36:	f04f 0c00 	mov.w	ip, #0
 8006a3a:	46d9      	mov	r9, fp
 8006a3c:	46e2      	mov	sl, ip
 8006a3e:	eb19 0309 	adds.w	r3, r9, r9
 8006a42:	eb4a 040a 	adc.w	r4, sl, sl
 8006a46:	4699      	mov	r9, r3
 8006a48:	46a2      	mov	sl, r4
 8006a4a:	eb19 090b 	adds.w	r9, r9, fp
 8006a4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a52:	f04f 0100 	mov.w	r1, #0
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a66:	4689      	mov	r9, r1
 8006a68:	4692      	mov	sl, r2
 8006a6a:	eb1b 0509 	adds.w	r5, fp, r9
 8006a6e:	eb4c 060a 	adc.w	r6, ip, sl
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	4619      	mov	r1, r3
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	f04f 0400 	mov.w	r4, #0
 8006a84:	0094      	lsls	r4, r2, #2
 8006a86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	4623      	mov	r3, r4
 8006a90:	4628      	mov	r0, r5
 8006a92:	4631      	mov	r1, r6
 8006a94:	f7f9 fe08 	bl	80006a8 <__aeabi_uldivmod>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b32      	ldr	r3, [pc, #200]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	2164      	movs	r1, #100	; 0x64
 8006aa8:	fb01 f303 	mul.w	r3, r1, r3
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	3332      	adds	r3, #50	; 0x32
 8006ab2:	4a2d      	ldr	r2, [pc, #180]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abe:	4498      	add	r8, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	469b      	mov	fp, r3
 8006ac4:	f04f 0c00 	mov.w	ip, #0
 8006ac8:	46d9      	mov	r9, fp
 8006aca:	46e2      	mov	sl, ip
 8006acc:	eb19 0309 	adds.w	r3, r9, r9
 8006ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ad4:	4699      	mov	r9, r3
 8006ad6:	46a2      	mov	sl, r4
 8006ad8:	eb19 090b 	adds.w	r9, r9, fp
 8006adc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ae0:	f04f 0100 	mov.w	r1, #0
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006af4:	4689      	mov	r9, r1
 8006af6:	4692      	mov	sl, r2
 8006af8:	eb1b 0509 	adds.w	r5, fp, r9
 8006afc:	eb4c 060a 	adc.w	r6, ip, sl
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	f04f 0300 	mov.w	r3, #0
 8006b0e:	f04f 0400 	mov.w	r4, #0
 8006b12:	0094      	lsls	r4, r2, #2
 8006b14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b18:	008b      	lsls	r3, r1, #2
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	4631      	mov	r1, r6
 8006b22:	f7f9 fdc1 	bl	80006a8 <__aeabi_uldivmod>
 8006b26:	4603      	mov	r3, r0
 8006b28:	460c      	mov	r4, r1
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	2164      	movs	r1, #100	; 0x64
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	3332      	adds	r3, #50	; 0x32
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <UART_SetConfig+0x6f4>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	f003 020f 	and.w	r2, r3, #15
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4442      	add	r2, r8
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	e7ff      	b.n	8006b56 <UART_SetConfig+0x6e2>
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b60:	40011000 	.word	0x40011000
 8006b64:	40011400 	.word	0x40011400
 8006b68:	51eb851f 	.word	0x51eb851f

08006b6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	f107 001c 	add.w	r0, r7, #28
 8006b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d122      	bne.n	8006bca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d105      	bne.n	8006bbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f94a 	bl	8006e58 <USB_CoreReset>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
 8006bc8:	e01a      	b.n	8006c00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f93e 	bl	8006e58 <USB_CoreReset>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
 8006bf2:	e005      	b.n	8006c00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10b      	bne.n	8006c1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f043 0206 	orr.w	r2, r3, #6
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f043 0220 	orr.w	r2, r3, #32
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c2a:	b004      	add	sp, #16
 8006c2c:	4770      	bx	lr

08006c2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f043 0201 	orr.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f023 0201 	bic.w	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d106      	bne.n	8006c9e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
 8006c9c:	e00b      	b.n	8006cb6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]
 8006cb0:	e001      	b.n	8006cb6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e003      	b.n	8006cbe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006cb6:	2032      	movs	r0, #50	; 0x32
 8006cb8:	f7fb f8ca 	bl	8001e50 <HAL_Delay>

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	019b      	lsls	r3, r3, #6
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <USB_FlushTxFifo+0x48>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e006      	b.n	8006d02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b20      	cmp	r3, #32
 8006cfe:	d0f0      	beq.n	8006ce2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	00030d40 	.word	0x00030d40

08006d14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2210      	movs	r2, #16
 8006d24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <USB_FlushRxFifo+0x40>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d901      	bls.n	8006d38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e006      	b.n	8006d46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d0f0      	beq.n	8006d26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	00030d40 	.word	0x00030d40

08006d58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4611      	mov	r1, r2
 8006d64:	461a      	mov	r2, r3
 8006d66:	460b      	mov	r3, r1
 8006d68:	71fb      	strb	r3, [r7, #7]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d11a      	bne.n	8006db4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d7e:	88bb      	ldrh	r3, [r7, #4]
 8006d80:	3303      	adds	r3, #3
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e00f      	b.n	8006dac <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	031a      	lsls	r2, r3, #12
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d98:	461a      	mov	r2, r3
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3304      	adds	r3, #4
 8006da4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3301      	adds	r3, #1
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3eb      	bcc.n	8006d8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3724      	adds	r7, #36	; 0x24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b089      	sub	sp, #36	; 0x24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	3303      	adds	r3, #3
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	e00b      	b.n	8006dfe <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	601a      	str	r2, [r3, #0]
    pDest++;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3304      	adds	r3, #4
 8006df6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d3ef      	bcc.n	8006de6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e06:	69fb      	ldr	r3, [r7, #28]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3724      	adds	r7, #36	; 0x24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f003 0301 	and.w	r3, r3, #1
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3301      	adds	r3, #1
 8006e68:	60fb      	str	r3, [r7, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a13      	ldr	r2, [pc, #76]	; (8006ebc <USB_CoreReset+0x64>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d901      	bls.n	8006e76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e01b      	b.n	8006eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	daf2      	bge.n	8006e64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f043 0201 	orr.w	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <USB_CoreReset+0x64>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d901      	bls.n	8006ea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d0f0      	beq.n	8006e8e <USB_CoreReset+0x36>

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	00030d40 	.word	0x00030d40

08006ec0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	f107 001c 	add.w	r0, r7, #28
 8006ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d018      	beq.n	8006f44 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10a      	bne.n	8006f2e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f26:	f043 0304 	orr.w	r3, r3, #4
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e014      	b.n	8006f58 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f3c:	f023 0304 	bic.w	r3, r3, #4
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e009      	b.n	8006f58 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f52:	f023 0304 	bic.w	r3, r3, #4
 8006f56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006f58:	2110      	movs	r1, #16
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff feb4 	bl	8006cc8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff fed7 	bl	8006d14 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	e015      	b.n	8006f98 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d3e5      	bcc.n	8006f6c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f8ac 	bl	8007100 <USB_DriveVbus>

  HAL_Delay(200U);
 8006fa8:	20c8      	movs	r0, #200	; 0xc8
 8006faa:	f7fa ff51 	bl	8001e50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fba:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a14      	ldr	r2, [pc, #80]	; (8007024 <USB_HostInit+0x164>)
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <USB_HostInit+0x168>)
 8006fda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006fde:	e009      	b.n	8006ff4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2280      	movs	r2, #128	; 0x80
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a10      	ldr	r2, [pc, #64]	; (800702c <USB_HostInit+0x16c>)
 8006fea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a10      	ldr	r2, [pc, #64]	; (8007030 <USB_HostInit+0x170>)
 8006ff0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f043 0210 	orr.w	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <USB_HostInit+0x174>)
 800700c:	4313      	orrs	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701e:	b004      	add	sp, #16
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	01000200 	.word	0x01000200
 8007028:	00e00300 	.word	0x00e00300
 800702c:	00600080 	.word	0x00600080
 8007030:	004000e0 	.word	0x004000e0
 8007034:	a3200008 	.word	0xa3200008

08007038 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d107      	bne.n	800708a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007080:	461a      	mov	r2, r3
 8007082:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007086:	6053      	str	r3, [r2, #4]
 8007088:	e009      	b.n	800709e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800708a:	78fb      	ldrb	r3, [r7, #3]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d106      	bne.n	800709e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007096:	461a      	mov	r2, r3
 8007098:	f241 7370 	movw	r3, #6000	; 0x1770
 800709c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070dc:	2064      	movs	r0, #100	; 0x64
 80070de:	f7fa feb7 	bl	8001e50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070f0:	200a      	movs	r0, #10
 80070f2:	f7fa fead 	bl	8001e50 <HAL_Delay>

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007124:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <USB_DriveVbus+0x44>
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d106      	bne.n	8007144 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800713e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007142:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800714a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714e:	d109      	bne.n	8007164 <USB_DriveVbus+0x64>
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800715e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007162:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	0c5b      	lsrs	r3, r3, #17
 8007190:	f003 0303 	and.w	r3, r3, #3
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	b29b      	uxth	r3, r3
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	70fb      	strb	r3, [r7, #3]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70bb      	strb	r3, [r7, #2]
 80071da:	4613      	mov	r3, r2
 80071dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80071e6:	78fb      	ldrb	r3, [r7, #3]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f2:	461a      	mov	r2, r3
 80071f4:	f04f 33ff 	mov.w	r3, #4294967295
 80071f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d87e      	bhi.n	8007300 <USB_HC_Init+0x13c>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <USB_HC_Init+0x44>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007219 	.word	0x08007219
 800720c:	080072c3 	.word	0x080072c3
 8007210:	08007219 	.word	0x08007219
 8007214:	08007285 	.word	0x08007285
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4413      	add	r3, r2
 8007220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007224:	461a      	mov	r2, r3
 8007226:	f240 439d 	movw	r3, #1181	; 0x49d
 800722a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800722c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007230:	2b00      	cmp	r3, #0
 8007232:	da10      	bge.n	8007256 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	78fa      	ldrb	r2, [r7, #3]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	440a      	add	r2, r1
 800724a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007252:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007254:	e057      	b.n	8007306 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d051      	beq.n	8007306 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4413      	add	r3, r2
 800726a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	78fa      	ldrb	r2, [r7, #3]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	440a      	add	r2, r1
 8007278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800727c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007280:	60d3      	str	r3, [r2, #12]
      break;
 8007282:	e040      	b.n	8007306 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4413      	add	r3, r2
 800728c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007290:	461a      	mov	r2, r3
 8007292:	f240 639d 	movw	r3, #1693	; 0x69d
 8007296:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007298:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800729c:	2b00      	cmp	r3, #0
 800729e:	da34      	bge.n	800730a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072c0:	e023      	b.n	800730a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ce:	461a      	mov	r2, r3
 80072d0:	f240 2325 	movw	r3, #549	; 0x225
 80072d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	da17      	bge.n	800730e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	78fa      	ldrb	r2, [r7, #3]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072fe:	e006      	b.n	800730e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	e004      	b.n	8007310 <USB_HC_Init+0x14c>
      break;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <USB_HC_Init+0x14c>
      break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <USB_HC_Init+0x14c>
      break;
 800730e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	2101      	movs	r1, #1
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800732a:	4313      	orrs	r3, r2
 800732c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800733a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800733e:	2b00      	cmp	r3, #0
 8007340:	da03      	bge.n	800734a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	e001      	b.n	800734e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800734e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d103      	bne.n	800735e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e001      	b.n	8007362 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007362:	787b      	ldrb	r3, [r7, #1]
 8007364:	059b      	lsls	r3, r3, #22
 8007366:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800736a:	78bb      	ldrb	r3, [r7, #2]
 800736c:	02db      	lsls	r3, r3, #11
 800736e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007372:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007374:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007378:	049b      	lsls	r3, r3, #18
 800737a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800737e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007382:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007386:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	0159      	lsls	r1, r3, #5
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	440b      	add	r3, r1
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800739e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80073a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d10f      	bne.n	80073c8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop

080073d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80073f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d028      	beq.n	8007454 <USB_HC_StartXfer+0x7c>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	791b      	ldrb	r3, [r3, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d124      	bne.n	8007454 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <USB_HC_StartXfer+0x50>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	795b      	ldrb	r3, [r3, #5]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d107      	bne.n	8007428 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	4619      	mov	r1, r3
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fa30 	bl	8007884 <USB_DoPing>
      return HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	e114      	b.n	8007652 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d112      	bne.n	8007454 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	4413      	add	r3, r2
 8007436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	440a      	add	r2, r1
 8007444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007448:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800744c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2200      	movs	r2, #0
 8007452:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d018      	beq.n	800748e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	8912      	ldrh	r2, [r2, #8]
 8007464:	4413      	add	r3, r2
 8007466:	3b01      	subs	r3, #1
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	8912      	ldrh	r2, [r2, #8]
 800746c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007470:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007474:	8b7b      	ldrh	r3, [r7, #26]
 8007476:	429a      	cmp	r2, r3
 8007478:	d90b      	bls.n	8007492 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800747a:	8b7b      	ldrh	r3, [r7, #26]
 800747c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800747e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	8912      	ldrh	r2, [r2, #8]
 8007484:	fb02 f203 	mul.w	r2, r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	611a      	str	r2, [r3, #16]
 800748c:	e001      	b.n	8007492 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800748e:	2301      	movs	r3, #1
 8007490:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	78db      	ldrb	r3, [r3, #3]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d006      	beq.n	80074a8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800749a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	8912      	ldrh	r2, [r2, #8]
 80074a0:	fb02 f203 	mul.w	r2, r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074b2:	04d9      	lsls	r1, r3, #19
 80074b4:	4b69      	ldr	r3, [pc, #420]	; (800765c <USB_HC_StartXfer+0x284>)
 80074b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	7a9b      	ldrb	r3, [r3, #10]
 80074be:	075b      	lsls	r3, r3, #29
 80074c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	0148      	lsls	r0, r1, #5
 80074c8:	6a39      	ldr	r1, [r7, #32]
 80074ca:	4401      	add	r1, r0
 80074cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80074d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	68d9      	ldr	r1, [r3, #12]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ea:	460a      	mov	r2, r1
 80074ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf0c      	ite	eq
 80074fe:	2301      	moveq	r3, #1
 8007500:	2300      	movne	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	6a3a      	ldr	r2, [r7, #32]
 800751a:	440a      	add	r2, r1
 800751c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007520:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007524:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	4413      	add	r3, r2
 800752e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	7e7b      	ldrb	r3, [r7, #25]
 8007536:	075b      	lsls	r3, r3, #29
 8007538:	69f9      	ldr	r1, [r7, #28]
 800753a:	0148      	lsls	r0, r1, #5
 800753c:	6a39      	ldr	r1, [r7, #32]
 800753e:	4401      	add	r1, r0
 8007540:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	4413      	add	r3, r2
 8007550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a42      	ldr	r2, [pc, #264]	; (8007660 <USB_HC_StartXfer+0x288>)
 8007558:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800755a:	4b41      	ldr	r3, [pc, #260]	; (8007660 <USB_HC_StartXfer+0x288>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007562:	4a3f      	ldr	r2, [pc, #252]	; (8007660 <USB_HC_StartXfer+0x288>)
 8007564:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	78db      	ldrb	r3, [r3, #3]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800756e:	4b3c      	ldr	r3, [pc, #240]	; (8007660 <USB_HC_StartXfer+0x288>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007576:	4a3a      	ldr	r2, [pc, #232]	; (8007660 <USB_HC_StartXfer+0x288>)
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	e005      	b.n	8007588 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800757c:	4b38      	ldr	r3, [pc, #224]	; (8007660 <USB_HC_StartXfer+0x288>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007584:	4a36      	ldr	r2, [pc, #216]	; (8007660 <USB_HC_StartXfer+0x288>)
 8007586:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007588:	4b35      	ldr	r3, [pc, #212]	; (8007660 <USB_HC_StartXfer+0x288>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007590:	4a33      	ldr	r2, [pc, #204]	; (8007660 <USB_HC_StartXfer+0x288>)
 8007592:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	4413      	add	r3, r2
 800759c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a0:	461a      	mov	r2, r3
 80075a2:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <USB_HC_StartXfer+0x288>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e04f      	b.n	8007652 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	78db      	ldrb	r3, [r3, #3]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d14a      	bne.n	8007650 <USB_HC_StartXfer+0x278>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d046      	beq.n	8007650 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	79db      	ldrb	r3, [r3, #7]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d830      	bhi.n	800762c <USB_HC_StartXfer+0x254>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USB_HC_StartXfer+0x1f8>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	080075e1 	.word	0x080075e1
 80075d4:	08007605 	.word	0x08007605
 80075d8:	080075e1 	.word	0x080075e1
 80075dc:	08007605 	.word	0x08007605
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	3303      	adds	r3, #3
 80075e6:	089b      	lsrs	r3, r3, #2
 80075e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075ea:	8afa      	ldrh	r2, [r7, #22]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d91c      	bls.n	8007630 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	f043 0220 	orr.w	r2, r3, #32
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	619a      	str	r2, [r3, #24]
        }
        break;
 8007602:	e015      	b.n	8007630 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	3303      	adds	r3, #3
 800760a:	089b      	lsrs	r3, r3, #2
 800760c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800760e:	8afa      	ldrh	r2, [r7, #22]
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	b29b      	uxth	r3, r3
 800761a:	429a      	cmp	r2, r3
 800761c:	d90a      	bls.n	8007634 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	619a      	str	r2, [r3, #24]
        }
        break;
 800762a:	e003      	b.n	8007634 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800762c:	bf00      	nop
 800762e:	e002      	b.n	8007636 <USB_HC_StartXfer+0x25e>
        break;
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <USB_HC_StartXfer+0x25e>
        break;
 8007634:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	68d9      	ldr	r1, [r3, #12]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	785a      	ldrb	r2, [r3, #1]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	b298      	uxth	r0, r3
 8007644:	2300      	movs	r3, #0
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	4603      	mov	r3, r0
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fb84 	bl	8006d58 <USB_WritePacket>
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3728      	adds	r7, #40	; 0x28
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	1ff80000 	.word	0x1ff80000
 8007660:	2000066c 	.word	0x2000066c

08007664 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	b29b      	uxth	r3, r3
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007686:	b480      	push	{r7}
 8007688:	b087      	sub	sp, #28
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	0c9b      	lsrs	r3, r3, #18
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <USB_HC_Halt+0x3a>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d16c      	bne.n	800779a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076de:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d143      	bne.n	8007774 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	440a      	add	r2, r1
 8007702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800770a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	440a      	add	r2, r1
 8007722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007726:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800772a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	440a      	add	r2, r1
 8007742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800774a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	3301      	adds	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007758:	d81d      	bhi.n	8007796 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4413      	add	r3, r2
 8007762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800776c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007770:	d0ec      	beq.n	800774c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007772:	e080      	b.n	8007876 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4413      	add	r3, r2
 800777c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	440a      	add	r2, r1
 800778a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800778e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007792:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007794:	e06f      	b.n	8007876 <USB_HC_Halt+0x1f0>
          break;
 8007796:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007798:	e06d      	b.n	8007876 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d143      	bne.n	8007852 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	0151      	lsls	r1, r2, #5
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	440a      	add	r2, r1
 80077e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077e8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007808:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	4413      	add	r3, r2
 8007812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	440a      	add	r2, r1
 8007820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007828:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	3301      	adds	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007836:	d81d      	bhi.n	8007874 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4413      	add	r3, r2
 8007840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800784a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800784e:	d0ec      	beq.n	800782a <USB_HC_Halt+0x1a4>
 8007850:	e011      	b.n	8007876 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	440a      	add	r2, r1
 8007868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800786c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e000      	b.n	8007876 <USB_HC_Halt+0x1f0>
          break;
 8007874:	bf00      	nop
    }
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007898:	2301      	movs	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	04da      	lsls	r2, r3, #19
 80078a0:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <USB_DoPing+0x74>)
 80078a2:	4013      	ands	r3, r2
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e2:	461a      	mov	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	1ff80000 	.word	0x1ff80000

080078fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff f99f 	bl	8006c50 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007912:	2110      	movs	r1, #16
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff f9d7 	bl	8006cc8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff f9fa 	bl	8006d14 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e01f      	b.n	8007966 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800793c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007944:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800794c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800795a:	461a      	mov	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	3301      	adds	r3, #1
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b0f      	cmp	r3, #15
 800796a:	d9dc      	bls.n	8007926 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	e034      	b.n	80079dc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007988:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007990:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007998:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	461a      	mov	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3301      	adds	r3, #1
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079b8:	d80c      	bhi.n	80079d4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d0:	d0ec      	beq.n	80079ac <USB_StopHost+0xb0>
 80079d2:	e000      	b.n	80079d6 <USB_StopHost+0xda>
        break;
 80079d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3301      	adds	r3, #1
 80079da:	613b      	str	r3, [r7, #16]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b0f      	cmp	r3, #15
 80079e0:	d9c7      	bls.n	8007972 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e8:	461a      	mov	r2, r3
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295
 80079ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff f918 	bl	8006c2e <USB_EnableGlobalInt>

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007a0c:	4904      	ldr	r1, [pc, #16]	; (8007a20 <MX_FATFS_Init+0x18>)
 8007a0e:	4805      	ldr	r0, [pc, #20]	; (8007a24 <MX_FATFS_Init+0x1c>)
 8007a10:	f005 fdda 	bl	800d5c8 <FATFS_LinkDriver>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461a      	mov	r2, r3
 8007a18:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <MX_FATFS_Init+0x20>)
 8007a1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a1c:	bf00      	nop
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	200038f4 	.word	0x200038f4
 8007a24:	08011248 	.word	0x08011248
 8007a28:	2000595c 	.word	0x2000595c

08007a2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	4619      	mov	r1, r3
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBH_status+0x34>)
 8007a68:	f000 fe11 	bl	800868e <USBH_MSC_UnitIsReady>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <USBH_status+0x24>
  {
    res = RES_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
 8007a76:	e001      	b.n	8007a7c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200059b4 	.word	0x200059b4

08007a8c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b094      	sub	sp, #80	; 0x50
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	603b      	str	r3, [r7, #0]
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007aa2:	7bf9      	ldrb	r1, [r7, #15]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4812      	ldr	r0, [pc, #72]	; (8007af8 <USBH_read+0x6c>)
 8007aae:	f000 fe38 	bl	8008722 <USBH_MSC_Read>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <USBH_read+0x34>
  {
    res = RES_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007abe:	e015      	b.n	8007aec <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007ac0:	f107 0210 	add.w	r2, r7, #16
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	480b      	ldr	r0, [pc, #44]	; (8007af8 <USBH_read+0x6c>)
 8007aca:	f000 fe06 	bl	80086da <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007ace:	7f7b      	ldrb	r3, [r7, #29]
 8007ad0:	2b28      	cmp	r3, #40	; 0x28
 8007ad2:	d003      	beq.n	8007adc <USBH_read+0x50>
 8007ad4:	2b3a      	cmp	r3, #58	; 0x3a
 8007ad6:	d001      	beq.n	8007adc <USBH_read+0x50>
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d103      	bne.n	8007ae4 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007adc:	2303      	movs	r3, #3
 8007ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ae2:	e003      	b.n	8007aec <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007aea:	bf00      	nop
    }
  }

  return res;
 8007aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3748      	adds	r7, #72	; 0x48
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200059b4 	.word	0x200059b4

08007afc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b094      	sub	sp, #80	; 0x50
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007b12:	7bf9      	ldrb	r1, [r7, #15]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4817      	ldr	r0, [pc, #92]	; (8007b7c <USBH_write+0x80>)
 8007b1e:	f000 fe69 	bl	80087f4 <USBH_MSC_Write>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <USBH_write+0x34>
  {
    res = RES_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007b2e:	e01f      	b.n	8007b70 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007b30:	f107 0210 	add.w	r2, r7, #16
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	4619      	mov	r1, r3
 8007b38:	4810      	ldr	r0, [pc, #64]	; (8007b7c <USBH_write+0x80>)
 8007b3a:	f000 fdce 	bl	80086da <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007b3e:	7f7b      	ldrb	r3, [r7, #29]
 8007b40:	2b27      	cmp	r3, #39	; 0x27
 8007b42:	d009      	beq.n	8007b58 <USBH_write+0x5c>
 8007b44:	2b27      	cmp	r3, #39	; 0x27
 8007b46:	dc02      	bgt.n	8007b4e <USBH_write+0x52>
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d009      	beq.n	8007b60 <USBH_write+0x64>
 8007b4c:	e00c      	b.n	8007b68 <USBH_write+0x6c>
 8007b4e:	2b28      	cmp	r3, #40	; 0x28
 8007b50:	d006      	beq.n	8007b60 <USBH_write+0x64>
 8007b52:	2b3a      	cmp	r3, #58	; 0x3a
 8007b54:	d004      	beq.n	8007b60 <USBH_write+0x64>
 8007b56:	e007      	b.n	8007b68 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b5e:	e007      	b.n	8007b70 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007b60:	2303      	movs	r3, #3
 8007b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b66:	e003      	b.n	8007b70 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b6e:	bf00      	nop
    }
  }

  return res;
 8007b70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3748      	adds	r7, #72	; 0x48
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	200059b4 	.word	0x200059b4

08007b80 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b090      	sub	sp, #64	; 0x40
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	603a      	str	r2, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007b96:	79bb      	ldrb	r3, [r7, #6]
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d852      	bhi.n	8007c42 <USBH_ioctl+0xc2>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBH_ioctl+0x24>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bb5 	.word	0x08007bb5
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007be7 	.word	0x08007be7
 8007bb0:	08007c13 	.word	0x08007c13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bba:	e045      	b.n	8007c48 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007bbc:	f107 0208 	add.w	r2, r7, #8
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4823      	ldr	r0, [pc, #140]	; (8007c54 <USBH_ioctl+0xd4>)
 8007bc6:	f000 fd88 	bl	80086da <USBH_MSC_GetLUNInfo>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d106      	bne.n	8007bde <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007bdc:	e034      	b.n	8007c48 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007be4:	e030      	b.n	8007c48 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007be6:	f107 0208 	add.w	r2, r7, #8
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	4619      	mov	r1, r3
 8007bee:	4819      	ldr	r0, [pc, #100]	; (8007c54 <USBH_ioctl+0xd4>)
 8007bf0:	f000 fd73 	bl	80086da <USBH_MSC_GetLUNInfo>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d107      	bne.n	8007c0a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007bfa:	8a3b      	ldrh	r3, [r7, #16]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c08:	e01e      	b.n	8007c48 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c10:	e01a      	b.n	8007c48 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c12:	f107 0208 	add.w	r2, r7, #8
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	480e      	ldr	r0, [pc, #56]	; (8007c54 <USBH_ioctl+0xd4>)
 8007c1c:	f000 fd5d 	bl	80086da <USBH_MSC_GetLUNInfo>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007c26:	8a3b      	ldrh	r3, [r7, #16]
 8007c28:	0a5b      	lsrs	r3, r3, #9
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c38:	e006      	b.n	8007c48 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c40:	e002      	b.n	8007c48 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007c42:	2304      	movs	r3, #4
 8007c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007c48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3740      	adds	r7, #64	; 0x40
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	200059b4 	.word	0x200059b4

08007c58 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b089      	sub	sp, #36	; 0x24
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c66:	7919      	ldrb	r1, [r3, #4]
 8007c68:	2350      	movs	r3, #80	; 0x50
 8007c6a:	2206      	movs	r2, #6
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fc4f 	bl	8009510 <USBH_FindInterface>
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2bff      	cmp	r3, #255	; 0xff
 8007c7a:	d002      	beq.n	8007c82 <USBH_MSC_InterfaceInit+0x2a>
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d901      	bls.n	8007c86 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c82:	2302      	movs	r3, #2
 8007c84:	e0ef      	b.n	8007e66 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f001 fc24 	bl	80094d8 <USBH_SelectInterface>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e0e3      	b.n	8007e66 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007ca4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ca8:	f007 ff54 	bl	800fb54 <malloc>
 8007cac:	4603      	mov	r3, r0
 8007cae:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e0d0      	b.n	8007e66 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cc8:	2100      	movs	r1, #0
 8007cca:	68b8      	ldr	r0, [r7, #8]
 8007ccc:	f007 ff5d 	bl	800fb8a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	211a      	movs	r1, #26
 8007cd6:	fb01 f303 	mul.w	r3, r1, r3
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b25b      	sxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da16      	bge.n	8007d16 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	211a      	movs	r1, #26
 8007cee:	fb01 f303 	mul.w	r3, r1, r3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cf8:	781a      	ldrb	r2, [r3, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	211a      	movs	r1, #26
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d0e:	881a      	ldrh	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	815a      	strh	r2, [r3, #10]
 8007d14:	e015      	b.n	8007d42 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	211a      	movs	r1, #26
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	4413      	add	r3, r2
 8007d22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d26:	781a      	ldrb	r2, [r3, #0]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	211a      	movs	r1, #26
 8007d32:	fb01 f303 	mul.w	r3, r1, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d3c:	881a      	ldrh	r2, [r3, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	211a      	movs	r1, #26
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b25b      	sxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da16      	bge.n	8007d88 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	211a      	movs	r1, #26
 8007d60:	fb01 f303 	mul.w	r3, r1, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	211a      	movs	r1, #26
 8007d76:	fb01 f303 	mul.w	r3, r1, r3
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	815a      	strh	r2, [r3, #10]
 8007d86:	e015      	b.n	8007db4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	211a      	movs	r1, #26
 8007d8e:	fb01 f303 	mul.w	r3, r1, r3
 8007d92:	4413      	add	r3, r2
 8007d94:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	211a      	movs	r1, #26
 8007da4:	fb01 f303 	mul.w	r3, r1, r3
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007dae:	881a      	ldrh	r2, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2200      	movs	r2, #0
 8007db8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	799b      	ldrb	r3, [r3, #6]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f002 fdc2 	bl	800a956 <USBH_AllocPipe>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	79db      	ldrb	r3, [r3, #7]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f002 fdb8 	bl	800a956 <USBH_AllocPipe>
 8007de6:	4603      	mov	r3, r0
 8007de8:	461a      	mov	r2, r3
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fda4 	bl	800893c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	7959      	ldrb	r1, [r3, #5]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	7998      	ldrb	r0, [r3, #6]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	8912      	ldrh	r2, [r2, #8]
 8007e0c:	9202      	str	r2, [sp, #8]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	9201      	str	r2, [sp, #4]
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	4623      	mov	r3, r4
 8007e16:	4602      	mov	r2, r0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f002 fd6d 	bl	800a8f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	7919      	ldrb	r1, [r3, #4]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	79d8      	ldrb	r0, [r3, #7]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	8952      	ldrh	r2, [r2, #10]
 8007e36:	9202      	str	r2, [sp, #8]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	9201      	str	r2, [sp, #4]
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4623      	mov	r3, r4
 8007e40:	4602      	mov	r2, r0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f002 fd58 	bl	800a8f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	791b      	ldrb	r3, [r3, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f005 fe75 	bl	800db40 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f005 fe6e 	bl	800db40 <USBH_LL_SetToggle>

  return USBH_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd90      	pop	{r4, r7, pc}

08007e6e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	795b      	ldrb	r3, [r3, #5]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00e      	beq.n	8007ea6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	795b      	ldrb	r3, [r3, #5]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f002 fd51 	bl	800a936 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	795b      	ldrb	r3, [r3, #5]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f002 fd7c 	bl	800a998 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	791b      	ldrb	r3, [r3, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f002 fd3e 	bl	800a936 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	791b      	ldrb	r3, [r3, #4]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f002 fd69 	bl	800a998 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f007 fe3f 	bl	800fb64 <free>
    phost->pActiveClass->pData = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eec:	2200      	movs	r2, #0
 8007eee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	7b9b      	ldrb	r3, [r3, #14]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d004      	beq.n	8007f22 <USBH_MSC_ClassRequest+0x28>
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d03e      	beq.n	8007f9a <USBH_MSC_ClassRequest+0xa0>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d000      	beq.n	8007f22 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8007f20:	e04a      	b.n	8007fb8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fcea 	bl	8008900 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d104      	bne.n	8007f40 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d135      	bne.n	8007fb2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d804      	bhi.n	8007f58 <USBH_MSC_ClassRequest+0x5e>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	3301      	adds	r3, #1
 8007f54:	b2da      	uxtb	r2, r3
 8007f56:	e000      	b.n	8007f5a <USBH_MSC_ClassRequest+0x60>
 8007f58:	2202      	movs	r2, #2
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73bb      	strb	r3, [r7, #14]
 8007f62:	e014      	b.n	8007f8e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	2134      	movs	r1, #52	; 0x34
 8007f6a:	fb01 f303 	mul.w	r3, r1, r3
 8007f6e:	4413      	add	r3, r2
 8007f70:	3392      	adds	r3, #146	; 0x92
 8007f72:	2202      	movs	r2, #2
 8007f74:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	2134      	movs	r1, #52	; 0x34
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	4413      	add	r3, r2
 8007f82:	33c1      	adds	r3, #193	; 0xc1
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	73bb      	strb	r3, [r7, #14]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	7bba      	ldrb	r2, [r7, #14]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d3e5      	bcc.n	8007f64 <USBH_MSC_ClassRequest+0x6a>
      break;
 8007f98:	e00b      	b.n	8007fb2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f002 f878 	bl	800a092 <USBH_ClrFeature>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d106      	bne.n	8007fb6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	7bda      	ldrb	r2, [r3, #15]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	739a      	strb	r2, [r3, #14]
      break;
 8007fb0:	e001      	b.n	8007fb6 <USBH_MSC_ClassRequest+0xbc>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <USBH_MSC_ClassRequest+0xbe>
      break;
 8007fb6:	bf00      	nop
  }

  return status;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	7b1b      	ldrb	r3, [r3, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <USBH_MSC_Process+0x2e>
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	f000 8271 	beq.w	80084d2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007ff0:	e272      	b.n	80084d8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	429a      	cmp	r2, r3
 8008000:	f080 824f 	bcs.w	80084a2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800800a:	4619      	mov	r1, r3
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	2334      	movs	r3, #52	; 0x34
 8008010:	fb03 f301 	mul.w	r3, r3, r1
 8008014:	4413      	add	r3, r2
 8008016:	3391      	adds	r3, #145	; 0x91
 8008018:	2201      	movs	r2, #1
 800801a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008022:	4619      	mov	r1, r3
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	2334      	movs	r3, #52	; 0x34
 8008028:	fb03 f301 	mul.w	r3, r3, r1
 800802c:	4413      	add	r3, r2
 800802e:	3390      	adds	r3, #144	; 0x90
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b08      	cmp	r3, #8
 8008034:	f200 8243 	bhi.w	80084be <USBH_MSC_Process+0x4fa>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USBH_MSC_Process+0x7c>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008065 	.word	0x08008065
 8008044:	080084bf 	.word	0x080084bf
 8008048:	0800812d 	.word	0x0800812d
 800804c:	080082b1 	.word	0x080082b1
 8008050:	0800808b 	.word	0x0800808b
 8008054:	0800837d 	.word	0x0800837d
 8008058:	080084bf 	.word	0x080084bf
 800805c:	080084bf 	.word	0x080084bf
 8008060:	08008491 	.word	0x08008491
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800806a:	4619      	mov	r1, r3
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	2334      	movs	r3, #52	; 0x34
 8008070:	fb03 f301 	mul.w	r3, r3, r1
 8008074:	4413      	add	r3, r2
 8008076:	3390      	adds	r3, #144	; 0x90
 8008078:	2204      	movs	r2, #4
 800807a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008088:	e222      	b.n	80084d0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008090:	b2d9      	uxtb	r1, r3
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008098:	461a      	mov	r2, r3
 800809a:	2334      	movs	r3, #52	; 0x34
 800809c:	fb03 f302 	mul.w	r3, r3, r2
 80080a0:	3398      	adds	r3, #152	; 0x98
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4413      	add	r3, r2
 80080a6:	3307      	adds	r3, #7
 80080a8:	461a      	mov	r2, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 ff68 	bl	8008f80 <USBH_MSC_SCSI_Inquiry>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080c0:	4619      	mov	r1, r3
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	2334      	movs	r3, #52	; 0x34
 80080c6:	fb03 f301 	mul.w	r3, r3, r1
 80080ca:	4413      	add	r3, r2
 80080cc:	3390      	adds	r3, #144	; 0x90
 80080ce:	2202      	movs	r2, #2
 80080d0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d10c      	bne.n	80080f2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080de:	4619      	mov	r1, r3
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	2334      	movs	r3, #52	; 0x34
 80080e4:	fb03 f301 	mul.w	r3, r3, r1
 80080e8:	4413      	add	r3, r2
 80080ea:	3390      	adds	r3, #144	; 0x90
 80080ec:	2205      	movs	r2, #5
 80080ee:	701a      	strb	r2, [r3, #0]
            break;
 80080f0:	e1e7      	b.n	80084c2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	f040 81e4 	bne.w	80084c2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008100:	4619      	mov	r1, r3
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	2334      	movs	r3, #52	; 0x34
 8008106:	fb03 f301 	mul.w	r3, r3, r1
 800810a:	4413      	add	r3, r2
 800810c:	3390      	adds	r3, #144	; 0x90
 800810e:	2201      	movs	r2, #1
 8008110:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008118:	4619      	mov	r1, r3
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	2334      	movs	r3, #52	; 0x34
 800811e:	fb03 f301 	mul.w	r3, r3, r1
 8008122:	4413      	add	r3, r2
 8008124:	3391      	adds	r3, #145	; 0x91
 8008126:	2202      	movs	r2, #2
 8008128:	701a      	strb	r2, [r3, #0]
            break;
 800812a:	e1ca      	b.n	80084c2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008132:	b2db      	uxtb	r3, r3
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fe64 	bl	8008e04 <USBH_MSC_SCSI_TestUnitReady>
 800813c:	4603      	mov	r3, r0
 800813e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d149      	bne.n	80081da <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800814c:	4619      	mov	r1, r3
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	2334      	movs	r3, #52	; 0x34
 8008152:	fb03 f301 	mul.w	r3, r3, r1
 8008156:	4413      	add	r3, r2
 8008158:	3392      	adds	r3, #146	; 0x92
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00c      	beq.n	800817a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008166:	4619      	mov	r1, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	2334      	movs	r3, #52	; 0x34
 800816c:	fb03 f301 	mul.w	r3, r3, r1
 8008170:	4413      	add	r3, r2
 8008172:	33c1      	adds	r3, #193	; 0xc1
 8008174:	2201      	movs	r2, #1
 8008176:	701a      	strb	r2, [r3, #0]
 8008178:	e00b      	b.n	8008192 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008180:	4619      	mov	r1, r3
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	2334      	movs	r3, #52	; 0x34
 8008186:	fb03 f301 	mul.w	r3, r3, r1
 800818a:	4413      	add	r3, r2
 800818c:	33c1      	adds	r3, #193	; 0xc1
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008198:	4619      	mov	r1, r3
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	2334      	movs	r3, #52	; 0x34
 800819e:	fb03 f301 	mul.w	r3, r3, r1
 80081a2:	4413      	add	r3, r2
 80081a4:	3390      	adds	r3, #144	; 0x90
 80081a6:	2203      	movs	r2, #3
 80081a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081b0:	4619      	mov	r1, r3
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	2334      	movs	r3, #52	; 0x34
 80081b6:	fb03 f301 	mul.w	r3, r3, r1
 80081ba:	4413      	add	r3, r2
 80081bc:	3391      	adds	r3, #145	; 0x91
 80081be:	2200      	movs	r2, #0
 80081c0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081c8:	4619      	mov	r1, r3
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	2334      	movs	r3, #52	; 0x34
 80081ce:	fb03 f301 	mul.w	r3, r3, r1
 80081d2:	4413      	add	r3, r2
 80081d4:	3392      	adds	r3, #146	; 0x92
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d14a      	bne.n	8008276 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081e6:	4619      	mov	r1, r3
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	2334      	movs	r3, #52	; 0x34
 80081ec:	fb03 f301 	mul.w	r3, r3, r1
 80081f0:	4413      	add	r3, r2
 80081f2:	3392      	adds	r3, #146	; 0x92
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d00c      	beq.n	8008214 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008200:	4619      	mov	r1, r3
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	2334      	movs	r3, #52	; 0x34
 8008206:	fb03 f301 	mul.w	r3, r3, r1
 800820a:	4413      	add	r3, r2
 800820c:	33c1      	adds	r3, #193	; 0xc1
 800820e:	2201      	movs	r2, #1
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	e00b      	b.n	800822c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800821a:	4619      	mov	r1, r3
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	2334      	movs	r3, #52	; 0x34
 8008220:	fb03 f301 	mul.w	r3, r3, r1
 8008224:	4413      	add	r3, r2
 8008226:	33c1      	adds	r3, #193	; 0xc1
 8008228:	2200      	movs	r2, #0
 800822a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008232:	4619      	mov	r1, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	2334      	movs	r3, #52	; 0x34
 8008238:	fb03 f301 	mul.w	r3, r3, r1
 800823c:	4413      	add	r3, r2
 800823e:	3390      	adds	r3, #144	; 0x90
 8008240:	2205      	movs	r2, #5
 8008242:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800824a:	4619      	mov	r1, r3
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	2334      	movs	r3, #52	; 0x34
 8008250:	fb03 f301 	mul.w	r3, r3, r1
 8008254:	4413      	add	r3, r2
 8008256:	3391      	adds	r3, #145	; 0x91
 8008258:	2201      	movs	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008262:	4619      	mov	r1, r3
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	2334      	movs	r3, #52	; 0x34
 8008268:	fb03 f301 	mul.w	r3, r3, r1
 800826c:	4413      	add	r3, r2
 800826e:	3392      	adds	r3, #146	; 0x92
 8008270:	2202      	movs	r2, #2
 8008272:	701a      	strb	r2, [r3, #0]
            break;
 8008274:	e127      	b.n	80084c6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b04      	cmp	r3, #4
 800827a:	f040 8124 	bne.w	80084c6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008284:	4619      	mov	r1, r3
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	2334      	movs	r3, #52	; 0x34
 800828a:	fb03 f301 	mul.w	r3, r3, r1
 800828e:	4413      	add	r3, r2
 8008290:	3390      	adds	r3, #144	; 0x90
 8008292:	2201      	movs	r2, #1
 8008294:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800829c:	4619      	mov	r1, r3
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	2334      	movs	r3, #52	; 0x34
 80082a2:	fb03 f301 	mul.w	r3, r3, r1
 80082a6:	4413      	add	r3, r2
 80082a8:	3391      	adds	r3, #145	; 0x91
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
            break;
 80082ae:	e10a      	b.n	80084c6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082b6:	b2d9      	uxtb	r1, r3
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082be:	461a      	mov	r2, r3
 80082c0:	2334      	movs	r3, #52	; 0x34
 80082c2:	fb03 f302 	mul.w	r3, r3, r2
 80082c6:	3390      	adds	r3, #144	; 0x90
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4413      	add	r3, r2
 80082cc:	3304      	adds	r3, #4
 80082ce:	461a      	mov	r2, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fdda 	bl	8008e8a <USBH_MSC_SCSI_ReadCapacity>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d120      	bne.n	8008322 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082e6:	4619      	mov	r1, r3
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	2334      	movs	r3, #52	; 0x34
 80082ec:	fb03 f301 	mul.w	r3, r3, r1
 80082f0:	4413      	add	r3, r2
 80082f2:	3390      	adds	r3, #144	; 0x90
 80082f4:	2201      	movs	r2, #1
 80082f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082fe:	4619      	mov	r1, r3
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	2334      	movs	r3, #52	; 0x34
 8008304:	fb03 f301 	mul.w	r3, r3, r1
 8008308:	4413      	add	r3, r2
 800830a:	3391      	adds	r3, #145	; 0x91
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008316:	3301      	adds	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008320:	e0d3      	b.n	80084ca <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d10c      	bne.n	8008342 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800832e:	4619      	mov	r1, r3
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	2334      	movs	r3, #52	; 0x34
 8008334:	fb03 f301 	mul.w	r3, r3, r1
 8008338:	4413      	add	r3, r2
 800833a:	3390      	adds	r3, #144	; 0x90
 800833c:	2205      	movs	r2, #5
 800833e:	701a      	strb	r2, [r3, #0]
            break;
 8008340:	e0c3      	b.n	80084ca <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	2b04      	cmp	r3, #4
 8008346:	f040 80c0 	bne.w	80084ca <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008350:	4619      	mov	r1, r3
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	2334      	movs	r3, #52	; 0x34
 8008356:	fb03 f301 	mul.w	r3, r3, r1
 800835a:	4413      	add	r3, r2
 800835c:	3390      	adds	r3, #144	; 0x90
 800835e:	2201      	movs	r2, #1
 8008360:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008368:	4619      	mov	r1, r3
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	2334      	movs	r3, #52	; 0x34
 800836e:	fb03 f301 	mul.w	r3, r3, r1
 8008372:	4413      	add	r3, r2
 8008374:	3391      	adds	r3, #145	; 0x91
 8008376:	2202      	movs	r2, #2
 8008378:	701a      	strb	r2, [r3, #0]
            break;
 800837a:	e0a6      	b.n	80084ca <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008382:	b2d9      	uxtb	r1, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800838a:	461a      	mov	r2, r3
 800838c:	2334      	movs	r3, #52	; 0x34
 800838e:	fb03 f302 	mul.w	r3, r3, r2
 8008392:	3398      	adds	r3, #152	; 0x98
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4413      	add	r3, r2
 8008398:	3304      	adds	r3, #4
 800839a:	461a      	mov	r2, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fe94 	bl	80090ca <USBH_MSC_SCSI_RequestSense>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d145      	bne.n	8008438 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083b2:	4619      	mov	r1, r3
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	2334      	movs	r3, #52	; 0x34
 80083b8:	fb03 f301 	mul.w	r3, r3, r1
 80083bc:	4413      	add	r3, r2
 80083be:	339c      	adds	r3, #156	; 0x9c
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b06      	cmp	r3, #6
 80083c4:	d00c      	beq.n	80083e0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083cc:	4619      	mov	r1, r3
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	2334      	movs	r3, #52	; 0x34
 80083d2:	fb03 f301 	mul.w	r3, r3, r1
 80083d6:	4413      	add	r3, r2
 80083d8:	339c      	adds	r3, #156	; 0x9c
 80083da:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d117      	bne.n	8008410 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d80c      	bhi.n	8008410 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083fc:	4619      	mov	r1, r3
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	2334      	movs	r3, #52	; 0x34
 8008402:	fb03 f301 	mul.w	r3, r3, r1
 8008406:	4413      	add	r3, r2
 8008408:	3390      	adds	r3, #144	; 0x90
 800840a:	2202      	movs	r2, #2
 800840c:	701a      	strb	r2, [r3, #0]
                  break;
 800840e:	e05f      	b.n	80084d0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008416:	4619      	mov	r1, r3
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	2334      	movs	r3, #52	; 0x34
 800841c:	fb03 f301 	mul.w	r3, r3, r1
 8008420:	4413      	add	r3, r2
 8008422:	3390      	adds	r3, #144	; 0x90
 8008424:	2201      	movs	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800842e:	3301      	adds	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d10c      	bne.n	8008458 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008444:	4619      	mov	r1, r3
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	2334      	movs	r3, #52	; 0x34
 800844a:	fb03 f301 	mul.w	r3, r3, r1
 800844e:	4413      	add	r3, r2
 8008450:	3390      	adds	r3, #144	; 0x90
 8008452:	2208      	movs	r2, #8
 8008454:	701a      	strb	r2, [r3, #0]
            break;
 8008456:	e03a      	b.n	80084ce <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	2b04      	cmp	r3, #4
 800845c:	d137      	bne.n	80084ce <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008464:	4619      	mov	r1, r3
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	2334      	movs	r3, #52	; 0x34
 800846a:	fb03 f301 	mul.w	r3, r3, r1
 800846e:	4413      	add	r3, r2
 8008470:	3390      	adds	r3, #144	; 0x90
 8008472:	2201      	movs	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800847c:	4619      	mov	r1, r3
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	2334      	movs	r3, #52	; 0x34
 8008482:	fb03 f301 	mul.w	r3, r3, r1
 8008486:	4413      	add	r3, r2
 8008488:	3391      	adds	r3, #145	; 0x91
 800848a:	2202      	movs	r2, #2
 800848c:	701a      	strb	r2, [r3, #0]
            break;
 800848e:	e01e      	b.n	80084ce <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008496:	3301      	adds	r3, #1
 8008498:	b29a      	uxth	r2, r3
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80084a0:	e016      	b.n	80084d0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	2201      	movs	r2, #1
 80084ae:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084b6:	2102      	movs	r1, #2
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
      break;
 80084bc:	e00c      	b.n	80084d8 <USBH_MSC_Process+0x514>
            break;
 80084be:	bf00      	nop
 80084c0:	e00a      	b.n	80084d8 <USBH_MSC_Process+0x514>
            break;
 80084c2:	bf00      	nop
 80084c4:	e008      	b.n	80084d8 <USBH_MSC_Process+0x514>
            break;
 80084c6:	bf00      	nop
 80084c8:	e006      	b.n	80084d8 <USBH_MSC_Process+0x514>
            break;
 80084ca:	bf00      	nop
 80084cc:	e004      	b.n	80084d8 <USBH_MSC_Process+0x514>
            break;
 80084ce:	bf00      	nop
      break;
 80084d0:	e002      	b.n	80084d8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]
      break;
 80084d6:	bf00      	nop
  }
  return error;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b088      	sub	sp, #32
 80084fe:	af02      	add	r7, sp, #8
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008510:	2301      	movs	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	2134      	movs	r1, #52	; 0x34
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	4413      	add	r3, r2
 8008524:	3390      	adds	r3, #144	; 0x90
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b06      	cmp	r3, #6
 800852a:	d004      	beq.n	8008536 <USBH_MSC_RdWrProcess+0x3c>
 800852c:	2b07      	cmp	r3, #7
 800852e:	d037      	beq.n	80085a0 <USBH_MSC_RdWrProcess+0xa6>
 8008530:	2b05      	cmp	r3, #5
 8008532:	d06a      	beq.n	800860a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8008534:	e0a6      	b.n	8008684 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008536:	78f9      	ldrb	r1, [r7, #3]
 8008538:	2300      	movs	r3, #0
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	2300      	movs	r3, #0
 800853e:	2200      	movs	r2, #0
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fea6 	bl	8009292 <USBH_MSC_SCSI_Read>
 8008546:	4603      	mov	r3, r0
 8008548:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	2134      	movs	r1, #52	; 0x34
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	4413      	add	r3, r2
 800855c:	3390      	adds	r3, #144	; 0x90
 800855e:	2201      	movs	r2, #1
 8008560:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
      break;
 8008566:	e088      	b.n	800867a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d109      	bne.n	8008582 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	2134      	movs	r1, #52	; 0x34
 8008574:	fb01 f303 	mul.w	r3, r1, r3
 8008578:	4413      	add	r3, r2
 800857a:	3390      	adds	r3, #144	; 0x90
 800857c:	2205      	movs	r2, #5
 800857e:	701a      	strb	r2, [r3, #0]
      break;
 8008580:	e07b      	b.n	800867a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2b04      	cmp	r3, #4
 8008586:	d178      	bne.n	800867a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	2134      	movs	r1, #52	; 0x34
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	3390      	adds	r3, #144	; 0x90
 8008596:	2208      	movs	r2, #8
 8008598:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800859a:	2302      	movs	r3, #2
 800859c:	75fb      	strb	r3, [r7, #23]
      break;
 800859e:	e06c      	b.n	800867a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80085a0:	78f9      	ldrb	r1, [r7, #3]
 80085a2:	2300      	movs	r3, #0
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fe06 	bl	80091bc <USBH_MSC_SCSI_Write>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	2134      	movs	r1, #52	; 0x34
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	3390      	adds	r3, #144	; 0x90
 80085c8:	2201      	movs	r2, #1
 80085ca:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	e055      	b.n	800867e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d109      	bne.n	80085ec <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	2134      	movs	r1, #52	; 0x34
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	3390      	adds	r3, #144	; 0x90
 80085e6:	2205      	movs	r2, #5
 80085e8:	701a      	strb	r2, [r3, #0]
      break;
 80085ea:	e048      	b.n	800867e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d145      	bne.n	800867e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	2134      	movs	r1, #52	; 0x34
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	3390      	adds	r3, #144	; 0x90
 8008600:	2208      	movs	r2, #8
 8008602:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008604:	2302      	movs	r3, #2
 8008606:	75fb      	strb	r3, [r7, #23]
      break;
 8008608:	e039      	b.n	800867e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	2234      	movs	r2, #52	; 0x34
 800860e:	fb02 f303 	mul.w	r3, r2, r3
 8008612:	3398      	adds	r3, #152	; 0x98
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4413      	add	r3, r2
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fd53 	bl	80090ca <USBH_MSC_SCSI_RequestSense>
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d113      	bne.n	8008656 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	2134      	movs	r1, #52	; 0x34
 8008634:	fb01 f303 	mul.w	r3, r1, r3
 8008638:	4413      	add	r3, r2
 800863a:	3390      	adds	r3, #144	; 0x90
 800863c:	2201      	movs	r2, #1
 800863e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	2134      	movs	r1, #52	; 0x34
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	4413      	add	r3, r2
 800864c:	3391      	adds	r3, #145	; 0x91
 800864e:	2202      	movs	r2, #2
 8008650:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8008652:	2302      	movs	r3, #2
 8008654:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d012      	beq.n	8008682 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b04      	cmp	r3, #4
 8008660:	d10f      	bne.n	8008682 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	2134      	movs	r1, #52	; 0x34
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	4413      	add	r3, r2
 800866e:	3390      	adds	r3, #144	; 0x90
 8008670:	2208      	movs	r2, #8
 8008672:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008674:	2302      	movs	r3, #2
 8008676:	75fb      	strb	r3, [r7, #23]
      break;
 8008678:	e003      	b.n	8008682 <USBH_MSC_RdWrProcess+0x188>
      break;
 800867a:	bf00      	nop
 800867c:	e002      	b.n	8008684 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800867e:	bf00      	nop
 8008680:	e000      	b.n	8008684 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008682:	bf00      	nop

  }
  return error;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800868e:	b480      	push	{r7}
 8008690:	b085      	sub	sp, #20
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b0b      	cmp	r3, #11
 80086ac:	d10c      	bne.n	80086c8 <USBH_MSC_UnitIsReady+0x3a>
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	2134      	movs	r1, #52	; 0x34
 80086b4:	fb01 f303 	mul.w	r3, r1, r3
 80086b8:	4413      	add	r3, r2
 80086ba:	3391      	adds	r3, #145	; 0x91
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80086c2:	2301      	movs	r3, #1
 80086c4:	73fb      	strb	r3, [r7, #15]
 80086c6:	e001      	b.n	80086cc <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	460b      	mov	r3, r1
 80086e4:	607a      	str	r2, [r7, #4]
 80086e6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b0b      	cmp	r3, #11
 80086fa:	d10d      	bne.n	8008718 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	2234      	movs	r2, #52	; 0x34
 8008700:	fb02 f303 	mul.w	r3, r2, r3
 8008704:	3390      	adds	r3, #144	; 0x90
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4413      	add	r3, r2
 800870a:	2234      	movs	r2, #52	; 0x34
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f007 fa30 	bl	800fb74 <memcpy>
    return USBH_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	e000      	b.n	800871a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008718:	2302      	movs	r3, #2
  }
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b088      	sub	sp, #32
 8008726:	af02      	add	r7, sp, #8
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	607a      	str	r2, [r7, #4]
 800872c:	603b      	str	r3, [r7, #0]
 800872e:	460b      	mov	r3, r1
 8008730:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800874e:	2b0b      	cmp	r3, #11
 8008750:	d109      	bne.n	8008766 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	2134      	movs	r1, #52	; 0x34
 8008758:	fb01 f303 	mul.w	r3, r1, r3
 800875c:	4413      	add	r3, r2
 800875e:	3390      	adds	r3, #144	; 0x90
 8008760:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008762:	2b01      	cmp	r3, #1
 8008764:	d001      	beq.n	800876a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008766:	2302      	movs	r3, #2
 8008768:	e040      	b.n	80087ec <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2206      	movs	r2, #6
 800876e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008770:	7afb      	ldrb	r3, [r7, #11]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	2134      	movs	r1, #52	; 0x34
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	4413      	add	r3, r2
 800877c:	3390      	adds	r3, #144	; 0x90
 800877e:	2206      	movs	r2, #6
 8008780:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008782:	7afb      	ldrb	r3, [r7, #11]
 8008784:	b29a      	uxth	r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800878c:	7af9      	ldrb	r1, [r7, #11]
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fd7b 	bl	8009292 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087a2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087a4:	e016      	b.n	80087d4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	f242 7110 	movw	r1, #10000	; 0x2710
 80087b6:	fb01 f303 	mul.w	r3, r1, r3
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d805      	bhi.n	80087ca <USBH_MSC_Read+0xa8>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2201      	movs	r2, #1
 80087ce:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	e00b      	b.n	80087ec <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	4619      	mov	r1, r3
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f7ff fe8e 	bl	80084fa <USBH_MSC_RdWrProcess>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d0e0      	beq.n	80087a6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2201      	movs	r2, #1
 80087e8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	460b      	mov	r3, r1
 8008802:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008820:	2b0b      	cmp	r3, #11
 8008822:	d109      	bne.n	8008838 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	2134      	movs	r1, #52	; 0x34
 800882a:	fb01 f303 	mul.w	r3, r1, r3
 800882e:	4413      	add	r3, r2
 8008830:	3390      	adds	r3, #144	; 0x90
 8008832:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008834:	2b01      	cmp	r3, #1
 8008836:	d001      	beq.n	800883c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008838:	2302      	movs	r3, #2
 800883a:	e040      	b.n	80088be <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2207      	movs	r2, #7
 8008840:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008842:	7afb      	ldrb	r3, [r7, #11]
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	2134      	movs	r1, #52	; 0x34
 8008848:	fb01 f303 	mul.w	r3, r1, r3
 800884c:	4413      	add	r3, r2
 800884e:	3390      	adds	r3, #144	; 0x90
 8008850:	2207      	movs	r2, #7
 8008852:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008854:	7afb      	ldrb	r3, [r7, #11]
 8008856:	b29a      	uxth	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800885e:	7af9      	ldrb	r1, [r7, #11]
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 fca7 	bl	80091bc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008874:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008876:	e016      	b.n	80088a6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad2      	subs	r2, r2, r3
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	f242 7110 	movw	r1, #10000	; 0x2710
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	429a      	cmp	r2, r3
 800888e:	d805      	bhi.n	800889c <USBH_MSC_Write+0xa8>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d104      	bne.n	80088a6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2201      	movs	r2, #1
 80088a0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80088a2:	2302      	movs	r3, #2
 80088a4:	e00b      	b.n	80088be <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	4619      	mov	r1, r3
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f7ff fe25 	bl	80084fa <USBH_MSC_RdWrProcess>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d0e0      	beq.n	8008878 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2201      	movs	r2, #1
 80088ba:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2221      	movs	r2, #33	; 0x21
 80088d2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	22ff      	movs	r2, #255	; 0xff
 80088d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80088ec:	2200      	movs	r2, #0
 80088ee:	2100      	movs	r1, #0
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fdae 	bl	800a452 <USBH_CtlReq>
 80088f6:	4603      	mov	r3, r0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	22a1      	movs	r2, #161	; 0xa1
 800890e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	22fe      	movs	r2, #254	; 0xfe
 8008914:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008928:	2201      	movs	r2, #1
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fd90 	bl	800a452 <USBH_CtlReq>
 8008932:	4603      	mov	r3, r0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a09      	ldr	r2, [pc, #36]	; (8008978 <USBH_MSC_BOT_Init+0x3c>)
 8008952:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a09      	ldr	r2, [pc, #36]	; (800897c <USBH_MSC_BOT_Init+0x40>)
 8008958:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	43425355 	.word	0x43425355
 800897c:	20304050 	.word	0x20304050

08008980 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af02      	add	r7, sp, #8
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800898c:	2301      	movs	r3, #1
 800898e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008990:	2301      	movs	r3, #1
 8008992:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008994:	2301      	movs	r3, #1
 8008996:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008998:	2300      	movs	r3, #0
 800899a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089b0:	3b01      	subs	r3, #1
 80089b2:	2b0a      	cmp	r3, #10
 80089b4:	f200 81a1 	bhi.w	8008cfa <USBH_MSC_BOT_Process+0x37a>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USBH_MSC_BOT_Process+0x40>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	08008a17 	.word	0x08008a17
 80089c8:	08008a81 	.word	0x08008a81
 80089cc:	08008a9f 	.word	0x08008a9f
 80089d0:	08008b23 	.word	0x08008b23
 80089d4:	08008b47 	.word	0x08008b47
 80089d8:	08008be1 	.word	0x08008be1
 80089dc:	08008bfd 	.word	0x08008bfd
 80089e0:	08008c4f 	.word	0x08008c4f
 80089e4:	08008c7f 	.word	0x08008c7f
 80089e8:	08008ce1 	.word	0x08008ce1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	795a      	ldrb	r2, [r3, #5]
 8008a06:	2301      	movs	r3, #1
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	221f      	movs	r2, #31
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 ff2f 	bl	800a872 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008a14:	e180      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	795b      	ldrb	r3, [r3, #5]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f005 f865 	bl	800daec <USBH_LL_GetURBState>
 8008a22:	4603      	mov	r3, r0
 8008a24:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008a26:	7d3b      	ldrb	r3, [r7, #20]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d118      	bne.n	8008a5e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00f      	beq.n	8008a54 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da04      	bge.n	8008a4a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2203      	movs	r2, #3
 8008a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a48:	e159      	b.n	8008cfe <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2205      	movs	r2, #5
 8008a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a52:	e154      	b.n	8008cfe <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2207      	movs	r2, #7
 8008a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a5c:	e14f      	b.n	8008cfe <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a5e:	7d3b      	ldrb	r3, [r7, #20]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d104      	bne.n	8008a6e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a6c:	e147      	b.n	8008cfe <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8008a6e:	7d3b      	ldrb	r3, [r7, #20]
 8008a70:	2b05      	cmp	r3, #5
 8008a72:	f040 8144 	bne.w	8008cfe <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	220a      	movs	r2, #10
 8008a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a7e:	e13e      	b.n	8008cfe <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	895a      	ldrh	r2, [r3, #10]
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	791b      	ldrb	r3, [r3, #4]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 ff14 	bl	800a8bc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2204      	movs	r2, #4
 8008a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008a9c:	e13c      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f005 f821 	bl	800daec <USBH_LL_GetURBState>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008aae:	7d3b      	ldrb	r3, [r7, #20]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d12d      	bne.n	8008b10 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	8952      	ldrh	r2, [r2, #10]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d910      	bls.n	8008ae2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	8952      	ldrh	r2, [r2, #10]
 8008aca:	441a      	add	r2, r3
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	8952      	ldrh	r2, [r2, #10]
 8008ada:	1a9a      	subs	r2, r3, r2
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ae0:	e002      	b.n	8008ae8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	895a      	ldrh	r2, [r3, #10]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	791b      	ldrb	r3, [r3, #4]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fedc 	bl	800a8bc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008b04:	e0fd      	b.n	8008d02 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2207      	movs	r2, #7
 8008b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b0e:	e0f8      	b.n	8008d02 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8008b10:	7d3b      	ldrb	r3, [r7, #20]
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	f040 80f5 	bne.w	8008d02 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2209      	movs	r2, #9
 8008b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b20:	e0ef      	b.n	8008d02 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	891a      	ldrh	r2, [r3, #8]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	7958      	ldrb	r0, [r3, #5]
 8008b30:	2301      	movs	r3, #1
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	4603      	mov	r3, r0
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 fe9b 	bl	800a872 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2206      	movs	r2, #6
 8008b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b44:	e0e8      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	795b      	ldrb	r3, [r3, #5]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f004 ffcd 	bl	800daec <USBH_LL_GetURBState>
 8008b52:	4603      	mov	r3, r0
 8008b54:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b56:	7d3b      	ldrb	r3, [r7, #20]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d130      	bne.n	8008bbe <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	8912      	ldrh	r2, [r2, #8]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d910      	bls.n	8008b8a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	8912      	ldrh	r2, [r2, #8]
 8008b72:	441a      	add	r2, r3
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	8912      	ldrh	r2, [r2, #8]
 8008b82:	1a9a      	subs	r2, r3, r2
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b88:	e002      	b.n	8008b90 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00d      	beq.n	8008bb4 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	891a      	ldrh	r2, [r3, #8]
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	7958      	ldrb	r0, [r3, #5]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4603      	mov	r3, r0
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fe60 	bl	800a872 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008bb2:	e0a8      	b.n	8008d06 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	2207      	movs	r2, #7
 8008bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bbc:	e0a3      	b.n	8008d06 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bbe:	7d3b      	ldrb	r3, [r7, #20]
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d104      	bne.n	8008bce <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	2205      	movs	r2, #5
 8008bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bcc:	e09b      	b.n	8008d06 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8008bce:	7d3b      	ldrb	r3, [r7, #20]
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	f040 8098 	bne.w	8008d06 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	220a      	movs	r2, #10
 8008bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bde:	e092      	b.n	8008d06 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	791b      	ldrb	r3, [r3, #4]
 8008bea:	220d      	movs	r2, #13
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fe65 	bl	800a8bc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bfa:	e08d      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	791b      	ldrb	r3, [r3, #4]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f004 ff72 	bl	800daec <USBH_LL_GetURBState>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008c0c:	7d3b      	ldrb	r3, [r7, #20]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d115      	bne.n	8008c3e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f8aa 	bl	8008d7c <USBH_MSC_DecodeCSW>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008c2c:	7d7b      	ldrb	r3, [r7, #21]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008c36:	e068      	b.n	8008d0a <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3c:	e065      	b.n	8008d0a <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8008c3e:	7d3b      	ldrb	r3, [r7, #20]
 8008c40:	2b05      	cmp	r3, #5
 8008c42:	d162      	bne.n	8008d0a <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2209      	movs	r2, #9
 8008c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c4c:	e05d      	b.n	8008d0a <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	2200      	movs	r2, #0
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f865 	bl	8008d24 <USBH_MSC_BOT_Abort>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008c5e:	7dbb      	ldrb	r3, [r7, #22]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2207      	movs	r2, #7
 8008c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008c6c:	e04f      	b.n	8008d0e <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008c6e:	7dbb      	ldrb	r3, [r7, #22]
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d14c      	bne.n	8008d0e <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	220b      	movs	r2, #11
 8008c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c7c:	e047      	b.n	8008d0e <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	2201      	movs	r2, #1
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f84d 	bl	8008d24 <USBH_MSC_BOT_Abort>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11d      	bne.n	8008cd0 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	795b      	ldrb	r3, [r3, #5]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f004 ff83 	bl	800dba6 <USBH_LL_GetToggle>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	7959      	ldrb	r1, [r3, #5]
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	f1c3 0301 	rsb	r3, r3, #1
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f004 ff44 	bl	800db40 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	791b      	ldrb	r3, [r3, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f004 ff3d 	bl	800db40 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2209      	movs	r2, #9
 8008cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008cce:	e020      	b.n	8008d12 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8008cd0:	7dbb      	ldrb	r3, [r7, #22]
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d11d      	bne.n	8008d12 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	220b      	movs	r2, #11
 8008cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cde:	e018      	b.n	8008d12 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fdf0 	bl	80088c6 <USBH_MSC_BOT_REQ_Reset>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d112      	bne.n	8008d16 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008cf8:	e00d      	b.n	8008d16 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8008cfa:	bf00      	nop
 8008cfc:	e00c      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008cfe:	bf00      	nop
 8008d00:	e00a      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008d02:	bf00      	nop
 8008d04:	e008      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008d06:	bf00      	nop
 8008d08:	e006      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008d0a:	bf00      	nop
 8008d0c:	e004      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <USBH_MSC_BOT_Process+0x398>
      break;
 8008d16:	bf00      	nop
  }
  return status;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop

08008d24 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
 8008d30:	4613      	mov	r3, r2
 8008d32:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008d34:	2302      	movs	r3, #2
 8008d36:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008d42:	78bb      	ldrb	r3, [r7, #2]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <USBH_MSC_BOT_Abort+0x2a>
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d009      	beq.n	8008d60 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008d4c:	e011      	b.n	8008d72 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	79db      	ldrb	r3, [r3, #7]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f99c 	bl	800a092 <USBH_ClrFeature>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d5e:	e008      	b.n	8008d72 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	799b      	ldrb	r3, [r3, #6]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f993 	bl	800a092 <USBH_ClrFeature>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d70:	bf00      	nop
  }
  return status;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	791b      	ldrb	r3, [r3, #4]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f004 fe15 	bl	800d9c8 <USBH_LL_GetLastXferSize>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b0d      	cmp	r3, #13
 8008da2:	d002      	beq.n	8008daa <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008da4:	2302      	movs	r3, #2
 8008da6:	73fb      	strb	r3, [r7, #15]
 8008da8:	e024      	b.n	8008df4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dae:	4a14      	ldr	r2, [pc, #80]	; (8008e00 <USBH_MSC_DecodeCSW+0x84>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d11d      	bne.n	8008df0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d119      	bne.n	8008df4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d102      	bne.n	8008dd0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	e011      	b.n	8008df4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d102      	bne.n	8008de0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	73fb      	strb	r3, [r7, #15]
 8008dde:	e009      	b.n	8008df4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d104      	bne.n	8008df4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008dea:	2302      	movs	r3, #2
 8008dec:	73fb      	strb	r3, [r7, #15]
 8008dee:	e001      	b.n	8008df4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008df0:	2302      	movs	r3, #2
 8008df2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	53425355 	.word	0x53425355

08008e04 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008e10:	2302      	movs	r3, #2
 8008e12:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d002      	beq.n	8008e2e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d021      	beq.n	8008e70 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008e2c:	e028      	b.n	8008e80 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	220a      	movs	r2, #10
 8008e40:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3363      	adds	r3, #99	; 0x63
 8008e48:	2210      	movs	r2, #16
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f006 fe9c 	bl	800fb8a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2202      	movs	r2, #2
 8008e66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6e:	e007      	b.n	8008e80 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff fd83 	bl	8008980 <USBH_MSC_BOT_Process>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7e:	bf00      	nop
  }

  return error;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b086      	sub	sp, #24
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	460b      	mov	r3, r1
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d002      	beq.n	8008eb6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d027      	beq.n	8008f04 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008eb4:	e05f      	b.n	8008f76 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	2208      	movs	r2, #8
 8008eba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2280      	movs	r2, #128	; 0x80
 8008ec0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	220a      	movs	r2, #10
 8008ec8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	3363      	adds	r3, #99	; 0x63
 8008ed0:	2210      	movs	r2, #16
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f006 fe58 	bl	800fb8a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2225      	movs	r2, #37	; 0x25
 8008ede:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	2202      	movs	r2, #2
 8008eee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f103 0210 	add.w	r2, r3, #16
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008efe:	2301      	movs	r3, #1
 8008f00:	75fb      	strb	r3, [r7, #23]
      break;
 8008f02:	e038      	b.n	8008f76 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	4619      	mov	r1, r3
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fd39 	bl	8008980 <USBH_MSC_BOT_Process>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d12d      	bne.n	8008f74 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f1e:	3303      	adds	r3, #3
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	021b      	lsls	r3, r3, #8
 8008f30:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f38:	3301      	adds	r3, #1
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f3e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	061b      	lsls	r3, r3, #24
 8008f4a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f56:	3307      	adds	r3, #7
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f62:	3306      	adds	r3, #6
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	809a      	strh	r2, [r3, #4]
      break;
 8008f74:	bf00      	nop
  }

  return error;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d002      	beq.n	8008fac <USBH_MSC_SCSI_Inquiry+0x2c>
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d03d      	beq.n	8009026 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008faa:	e089      	b.n	80090c0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2224      	movs	r2, #36	; 0x24
 8008fb0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	2280      	movs	r2, #128	; 0x80
 8008fb6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	220a      	movs	r2, #10
 8008fbe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3363      	adds	r3, #99	; 0x63
 8008fc6:	220a      	movs	r2, #10
 8008fc8:	2100      	movs	r1, #0
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f006 fddd 	bl	800fb8a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2212      	movs	r2, #18
 8008fd4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	015b      	lsls	r3, r3, #5
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f103 0210 	add.w	r2, r3, #16
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009020:	2301      	movs	r3, #1
 8009022:	75fb      	strb	r3, [r7, #23]
      break;
 8009024:	e04c      	b.n	80090c0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	4619      	mov	r1, r3
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f7ff fca8 	bl	8008980 <USBH_MSC_BOT_Process>
 8009030:	4603      	mov	r3, r0
 8009032:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d141      	bne.n	80090be <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800903a:	2222      	movs	r2, #34	; 0x22
 800903c:	2100      	movs	r1, #0
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f006 fda3 	bl	800fb8a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	f003 031f 	and.w	r3, r3, #31
 8009050:	b2da      	uxtb	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	b2da      	uxtb	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800906c:	3301      	adds	r3, #1
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b25b      	sxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	da03      	bge.n	800907e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	709a      	strb	r2, [r3, #2]
 800907c:	e002      	b.n	8009084 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	1cd8      	adds	r0, r3, #3
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908e:	3308      	adds	r3, #8
 8009090:	2208      	movs	r2, #8
 8009092:	4619      	mov	r1, r3
 8009094:	f006 fd6e 	bl	800fb74 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f103 000c 	add.w	r0, r3, #12
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a4:	3310      	adds	r3, #16
 80090a6:	2210      	movs	r2, #16
 80090a8:	4619      	mov	r1, r3
 80090aa:	f006 fd63 	bl	800fb74 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	331d      	adds	r3, #29
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80090b8:	3220      	adds	r2, #32
 80090ba:	6812      	ldr	r2, [r2, #0]
 80090bc:	601a      	str	r2, [r3, #0]
      break;
 80090be:	bf00      	nop
  }

  return error;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b086      	sub	sp, #24
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	60f8      	str	r0, [r7, #12]
 80090d2:	460b      	mov	r3, r1
 80090d4:	607a      	str	r2, [r7, #4]
 80090d6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80090d8:	2302      	movs	r3, #2
 80090da:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d002      	beq.n	80090f6 <USBH_MSC_SCSI_RequestSense+0x2c>
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d03d      	beq.n	8009170 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80090f4:	e05d      	b.n	80091b2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	220e      	movs	r2, #14
 80090fa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	2280      	movs	r2, #128	; 0x80
 8009100:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	220a      	movs	r2, #10
 8009108:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3363      	adds	r3, #99	; 0x63
 8009110:	2210      	movs	r2, #16
 8009112:	2100      	movs	r1, #0
 8009114:	4618      	mov	r0, r3
 8009116:	f006 fd38 	bl	800fb8a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2203      	movs	r2, #3
 800911e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009122:	7afb      	ldrb	r3, [r7, #11]
 8009124:	015b      	lsls	r3, r3, #5
 8009126:	b2da      	uxtb	r2, r3
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	220e      	movs	r2, #14
 8009142:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2202      	movs	r2, #2
 800915a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f103 0210 	add.w	r2, r3, #16
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800916a:	2301      	movs	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
      break;
 800916e:	e020      	b.n	80091b2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	4619      	mov	r1, r3
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7ff fc03 	bl	8008980 <USBH_MSC_BOT_Process>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d115      	bne.n	80091b0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800918a:	3302      	adds	r3, #2
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	b2da      	uxtb	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800919e:	7b1a      	ldrb	r2, [r3, #12]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091aa:	7b5a      	ldrb	r2, [r3, #13]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	709a      	strb	r2, [r3, #2]
      break;
 80091b0:	bf00      	nop
  }

  return error;
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	607a      	str	r2, [r7, #4]
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	460b      	mov	r3, r1
 80091ca:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80091cc:	2302      	movs	r3, #2
 80091ce:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d002      	beq.n	80091ea <USBH_MSC_SCSI_Write+0x2e>
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d047      	beq.n	8009278 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80091e8:	e04e      	b.n	8009288 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80091f0:	461a      	mov	r2, r3
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	fb03 f202 	mul.w	r2, r3, r2
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	220a      	movs	r2, #10
 8009208:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	3363      	adds	r3, #99	; 0x63
 8009210:	2210      	movs	r2, #16
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f006 fcb8 	bl	800fb8a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	222a      	movs	r2, #42	; 0x2a
 800921e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800922a:	79ba      	ldrb	r2, [r7, #6]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009232:	797a      	ldrb	r2, [r7, #5]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800923a:	1d3b      	adds	r3, r7, #4
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009244:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800924e:	f107 0320 	add.w	r3, r7, #32
 8009252:	781a      	ldrb	r2, [r3, #0]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2202      	movs	r2, #2
 8009266:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009272:	2301      	movs	r3, #1
 8009274:	75fb      	strb	r3, [r7, #23]
      break;
 8009276:	e007      	b.n	8009288 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009278:	7afb      	ldrb	r3, [r7, #11]
 800927a:	4619      	mov	r1, r3
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff fb7f 	bl	8008980 <USBH_MSC_BOT_Process>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]
      break;
 8009286:	bf00      	nop
  }

  return error;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b086      	sub	sp, #24
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	603b      	str	r3, [r7, #0]
 800929e:	460b      	mov	r3, r1
 80092a0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80092a2:	2302      	movs	r3, #2
 80092a4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d002      	beq.n	80092c0 <USBH_MSC_SCSI_Read+0x2e>
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d047      	beq.n	800934e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80092be:	e04e      	b.n	800935e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80092c6:	461a      	mov	r2, r3
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	fb03 f202 	mul.w	r2, r3, r2
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2280      	movs	r2, #128	; 0x80
 80092d6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	220a      	movs	r2, #10
 80092de:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3363      	adds	r3, #99	; 0x63
 80092e6:	2210      	movs	r2, #16
 80092e8:	2100      	movs	r1, #0
 80092ea:	4618      	mov	r0, r3
 80092ec:	f006 fc4d 	bl	800fb8a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2228      	movs	r2, #40	; 0x28
 80092f4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80092f8:	79fa      	ldrb	r2, [r7, #7]
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009300:	79ba      	ldrb	r2, [r7, #6]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009308:	797a      	ldrb	r2, [r7, #5]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009310:	1d3b      	adds	r3, r7, #4
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800931a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009324:	f107 0320 	add.w	r3, r7, #32
 8009328:	781a      	ldrb	r2, [r3, #0]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2202      	movs	r2, #2
 800933c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009348:	2301      	movs	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]
      break;
 800934c:	e007      	b.n	800935e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800934e:	7afb      	ldrb	r3, [r7, #11]
 8009350:	4619      	mov	r1, r3
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff fb14 	bl	8008980 <USBH_MSC_BOT_Process>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]
      break;
 800935c:	bf00      	nop
  }

  return error;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800937c:	2302      	movs	r3, #2
 800937e:	e029      	b.n	80093d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	79fa      	ldrb	r2, [r7, #7]
 8009384:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f81f 	bl	80093dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f004 fa49 	bl	800d864 <USBH_LL_Init>

  return USBH_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e009      	b.n	8009402 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	33e0      	adds	r3, #224	; 0xe0
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	2200      	movs	r2, #0
 80093fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b0e      	cmp	r3, #14
 8009406:	d9f2      	bls.n	80093ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	e009      	b.n	8009422 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009428:	d3f1      	bcc.n	800940e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2240      	movs	r2, #64	; 0x40
 800944e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d016      	beq.n	80094c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10e      	bne.n	80094c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094a8:	1c59      	adds	r1, r3, #1
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	33de      	adds	r3, #222	; 0xde
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
 80094be:	e004      	b.n	80094ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80094c0:	2302      	movs	r3, #2
 80094c2:	73fb      	strb	r3, [r7, #15]
 80094c4:	e001      	b.n	80094ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d204      	bcs.n	80094fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80094fc:	e001      	b.n	8009502 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80094fe:	2302      	movs	r3, #2
 8009500:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	461a      	mov	r2, r3
 800951e:	4603      	mov	r3, r0
 8009520:	70fb      	strb	r3, [r7, #3]
 8009522:	460b      	mov	r3, r1
 8009524:	70bb      	strb	r3, [r7, #2]
 8009526:	4613      	mov	r3, r2
 8009528:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800952e:	2300      	movs	r3, #0
 8009530:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009538:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800953a:	e025      	b.n	8009588 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	221a      	movs	r2, #26
 8009540:	fb02 f303 	mul.w	r3, r2, r3
 8009544:	3308      	adds	r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	3302      	adds	r3, #2
 800954c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	429a      	cmp	r2, r3
 8009556:	d002      	beq.n	800955e <USBH_FindInterface+0x4e>
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2bff      	cmp	r3, #255	; 0xff
 800955c:	d111      	bne.n	8009582 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009562:	78ba      	ldrb	r2, [r7, #2]
 8009564:	429a      	cmp	r2, r3
 8009566:	d002      	beq.n	800956e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009568:	78bb      	ldrb	r3, [r7, #2]
 800956a:	2bff      	cmp	r3, #255	; 0xff
 800956c:	d109      	bne.n	8009582 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009572:	787a      	ldrb	r2, [r7, #1]
 8009574:	429a      	cmp	r2, r3
 8009576:	d002      	beq.n	800957e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009578:	787b      	ldrb	r3, [r7, #1]
 800957a:	2bff      	cmp	r3, #255	; 0xff
 800957c:	d101      	bne.n	8009582 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	e006      	b.n	8009590 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	3301      	adds	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d9d6      	bls.n	800953c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800958e:	23ff      	movs	r3, #255	; 0xff
}
 8009590:	4618      	mov	r0, r3
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f004 f999 	bl	800d8dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80095aa:	2101      	movs	r1, #1
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f004 fab0 	bl	800db12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80095c4:	2302      	movs	r3, #2
 80095c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d102      	bne.n	80095de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2203      	movs	r2, #3
 80095dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b0b      	cmp	r3, #11
 80095e6:	f200 81b3 	bhi.w	8009950 <USBH_Process+0x394>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <USBH_Process+0x34>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009621 	.word	0x08009621
 80095f4:	08009653 	.word	0x08009653
 80095f8:	080096bb 	.word	0x080096bb
 80095fc:	080098eb 	.word	0x080098eb
 8009600:	08009951 	.word	0x08009951
 8009604:	0800975f 	.word	0x0800975f
 8009608:	08009891 	.word	0x08009891
 800960c:	08009795 	.word	0x08009795
 8009610:	080097b5 	.word	0x080097b5
 8009614:	080097d5 	.word	0x080097d5
 8009618:	08009803 	.word	0x08009803
 800961c:	080098d3 	.word	0x080098d3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8193 	beq.w	8009954 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009634:	20c8      	movs	r0, #200	; 0xc8
 8009636:	f004 fae9 	bl	800dc0c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f004 f9a9 	bl	800d992 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009650:	e180      	b.n	8009954 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009658:	2b01      	cmp	r3, #1
 800965a:	d107      	bne.n	800966c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800966a:	e182      	b.n	8009972 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009676:	d914      	bls.n	80096a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800967e:	3301      	adds	r3, #1
 8009680:	b2da      	uxtb	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800968e:	2b03      	cmp	r3, #3
 8009690:	d903      	bls.n	800969a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	220d      	movs	r2, #13
 8009696:	701a      	strb	r2, [r3, #0]
      break;
 8009698:	e16b      	b.n	8009972 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	701a      	strb	r2, [r3, #0]
      break;
 80096a0:	e167      	b.n	8009972 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096a8:	f103 020a 	add.w	r2, r3, #10
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80096b2:	200a      	movs	r0, #10
 80096b4:	f004 faaa 	bl	800dc0c <USBH_Delay>
      break;
 80096b8:	e15b      	b.n	8009972 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096ca:	2104      	movs	r1, #4
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80096d0:	2064      	movs	r0, #100	; 0x64
 80096d2:	f004 fa9b 	bl	800dc0c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f004 f936 	bl	800d948 <USBH_LL_GetSpeed>
 80096dc:	4603      	mov	r3, r0
 80096de:	461a      	mov	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2205      	movs	r2, #5
 80096ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80096ec:	2100      	movs	r1, #0
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f001 f931 	bl	800a956 <USBH_AllocPipe>
 80096f4:	4603      	mov	r3, r0
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80096fc:	2180      	movs	r1, #128	; 0x80
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f001 f929 	bl	800a956 <USBH_AllocPipe>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	7919      	ldrb	r1, [r3, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009720:	b292      	uxth	r2, r2
 8009722:	9202      	str	r2, [sp, #8]
 8009724:	2200      	movs	r2, #0
 8009726:	9201      	str	r2, [sp, #4]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	4603      	mov	r3, r0
 800972c:	2280      	movs	r2, #128	; 0x80
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 f8e2 	bl	800a8f8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7959      	ldrb	r1, [r3, #5]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009748:	b292      	uxth	r2, r2
 800974a:	9202      	str	r2, [sp, #8]
 800974c:	2200      	movs	r2, #0
 800974e:	9201      	str	r2, [sp, #4]
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	4603      	mov	r3, r0
 8009754:	2200      	movs	r2, #0
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 f8ce 	bl	800a8f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800975c:	e109      	b.n	8009972 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f90c 	bl	800997c <USBH_HandleEnum>
 8009764:	4603      	mov	r3, r0
 8009766:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 80f3 	bne.w	8009958 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009780:	2b01      	cmp	r3, #1
 8009782:	d103      	bne.n	800978c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2208      	movs	r2, #8
 8009788:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800978a:	e0e5      	b.n	8009958 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2207      	movs	r2, #7
 8009790:	701a      	strb	r2, [r3, #0]
      break;
 8009792:	e0e1      	b.n	8009958 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80de 	beq.w	800995c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097a6:	2101      	movs	r1, #1
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2208      	movs	r2, #8
 80097b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80097b2:	e0d3      	b.n	800995c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc20 	bl	800a004 <USBH_SetCfg>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f040 80ca 	bne.w	8009960 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2209      	movs	r2, #9
 80097d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097d2:	e0c5      	b.n	8009960 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80097e2:	2101      	movs	r1, #1
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc30 	bl	800a04a <USBH_SetFeature>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f040 80b9 	bne.w	8009964 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	220a      	movs	r2, #10
 80097f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097f8:	e0b4      	b.n	8009964 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	220a      	movs	r2, #10
 80097fe:	701a      	strb	r2, [r3, #0]
      break;
 8009800:	e0b0      	b.n	8009964 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 80ad 	beq.w	8009968 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]
 800981a:	e016      	b.n	800984a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800981c:	7bfa      	ldrb	r2, [r7, #15]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	32de      	adds	r2, #222	; 0xde
 8009822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009826:	791a      	ldrb	r2, [r3, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800982e:	429a      	cmp	r2, r3
 8009830:	d108      	bne.n	8009844 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009832:	7bfa      	ldrb	r2, [r7, #15]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	32de      	adds	r2, #222	; 0xde
 8009838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009842:	e005      	b.n	8009850 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	3301      	adds	r3, #1
 8009848:	73fb      	strb	r3, [r7, #15]
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0e5      	beq.n	800981c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d016      	beq.n	8009888 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d109      	bne.n	8009880 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2206      	movs	r2, #6
 8009870:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009878:	2103      	movs	r1, #3
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800987e:	e073      	b.n	8009968 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	220d      	movs	r2, #13
 8009884:	701a      	strb	r2, [r3, #0]
      break;
 8009886:	e06f      	b.n	8009968 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	220d      	movs	r2, #13
 800988c:	701a      	strb	r2, [r3, #0]
      break;
 800988e:	e06b      	b.n	8009968 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009896:	2b00      	cmp	r3, #0
 8009898:	d017      	beq.n	80098ca <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d103      	bne.n	80098ba <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	220b      	movs	r2, #11
 80098b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098b8:	e058      	b.n	800996c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d154      	bne.n	800996c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	701a      	strb	r2, [r3, #0]
      break;
 80098c8:	e050      	b.n	800996c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	220d      	movs	r2, #13
 80098ce:	701a      	strb	r2, [r3, #0]
      break;
 80098d0:	e04c      	b.n	800996c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d049      	beq.n	8009970 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e2:	695b      	ldr	r3, [r3, #20]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
      }
      break;
 80098e8:	e042      	b.n	8009970 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f7ff fd72 	bl	80093dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009926:	2105      	movs	r1, #5
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b01      	cmp	r3, #1
 8009936:	d107      	bne.n	8009948 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fe2b 	bl	800959c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009946:	e014      	b.n	8009972 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f003 ffc7 	bl	800d8dc <USBH_LL_Start>
      break;
 800994e:	e010      	b.n	8009972 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009950:	bf00      	nop
 8009952:	e00e      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 8009954:	bf00      	nop
 8009956:	e00c      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 8009958:	bf00      	nop
 800995a:	e00a      	b.n	8009972 <USBH_Process+0x3b6>
    break;
 800995c:	bf00      	nop
 800995e:	e008      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 8009960:	bf00      	nop
 8009962:	e006      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 8009964:	bf00      	nop
 8009966:	e004      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 8009968:	bf00      	nop
 800996a:	e002      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <USBH_Process+0x3b6>
      break;
 8009970:	bf00      	nop
  }
  return USBH_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af04      	add	r7, sp, #16
 8009982:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009984:	2301      	movs	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009988:	2301      	movs	r3, #1
 800998a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	785b      	ldrb	r3, [r3, #1]
 8009990:	2b07      	cmp	r3, #7
 8009992:	f200 81c1 	bhi.w	8009d18 <USBH_HandleEnum+0x39c>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <USBH_HandleEnum+0x20>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099bd 	.word	0x080099bd
 80099a0:	08009a7b 	.word	0x08009a7b
 80099a4:	08009ae5 	.word	0x08009ae5
 80099a8:	08009b73 	.word	0x08009b73
 80099ac:	08009bdd 	.word	0x08009bdd
 80099b0:	08009c4d 	.word	0x08009c4d
 80099b4:	08009c93 	.word	0x08009c93
 80099b8:	08009cd9 	.word	0x08009cd9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80099bc:	2108      	movs	r1, #8
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fa50 	bl	8009e64 <USBH_Get_DevDesc>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d130      	bne.n	8009a30 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	7919      	ldrb	r1, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099f2:	b292      	uxth	r2, r2
 80099f4:	9202      	str	r2, [sp, #8]
 80099f6:	2200      	movs	r2, #0
 80099f8:	9201      	str	r2, [sp, #4]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	4603      	mov	r3, r0
 80099fe:	2280      	movs	r2, #128	; 0x80
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 ff79 	bl	800a8f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	7959      	ldrb	r1, [r3, #5]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a1a:	b292      	uxth	r2, r2
 8009a1c:	9202      	str	r2, [sp, #8]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	9201      	str	r2, [sp, #4]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	4603      	mov	r3, r0
 8009a26:	2200      	movs	r2, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 ff65 	bl	800a8f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a2e:	e175      	b.n	8009d1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	f040 8172 	bne.w	8009d1c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a3e:	3301      	adds	r3, #1
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d903      	bls.n	8009a5a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	220d      	movs	r2, #13
 8009a56:	701a      	strb	r2, [r3, #0]
      break;
 8009a58:	e160      	b.n	8009d1c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	795b      	ldrb	r3, [r3, #5]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 ff99 	bl	800a998 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	791b      	ldrb	r3, [r3, #4]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 ff93 	bl	800a998 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
      break;
 8009a78:	e150      	b.n	8009d1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009a7a:	2112      	movs	r1, #18
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f9f1 	bl	8009e64 <USBH_Get_DevDesc>
 8009a82:	4603      	mov	r3, r0
 8009a84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a92:	e145      	b.n	8009d20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	f040 8142 	bne.w	8009d20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d903      	bls.n	8009abe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	220d      	movs	r2, #13
 8009aba:	701a      	strb	r2, [r3, #0]
      break;
 8009abc:	e130      	b.n	8009d20 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	795b      	ldrb	r3, [r3, #5]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 ff67 	bl	800a998 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	791b      	ldrb	r3, [r3, #4]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 ff61 	bl	800a998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
      break;
 8009ae2:	e11d      	b.n	8009d20 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fa68 	bl	8009fbc <USBH_SetAddress>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009af0:	7bbb      	ldrb	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d132      	bne.n	8009b5c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009af6:	2002      	movs	r0, #2
 8009af8:	f004 f888 	bl	800dc0c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2203      	movs	r2, #3
 8009b08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	7919      	ldrb	r1, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b1e:	b292      	uxth	r2, r2
 8009b20:	9202      	str	r2, [sp, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	9201      	str	r2, [sp, #4]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2280      	movs	r2, #128	; 0x80
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fee3 	bl	800a8f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	7959      	ldrb	r1, [r3, #5]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b46:	b292      	uxth	r2, r2
 8009b48:	9202      	str	r2, [sp, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	9201      	str	r2, [sp, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	4603      	mov	r3, r0
 8009b52:	2200      	movs	r2, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fecf 	bl	800a8f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b5a:	e0e3      	b.n	8009d24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	f040 80e0 	bne.w	8009d24 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	220d      	movs	r2, #13
 8009b68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	705a      	strb	r2, [r3, #1]
      break;
 8009b70:	e0d8      	b.n	8009d24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009b72:	2109      	movs	r1, #9
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f99d 	bl	8009eb4 <USBH_Get_CfgDesc>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2204      	movs	r2, #4
 8009b88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b8a:	e0cd      	b.n	8009d28 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	f040 80ca 	bne.w	8009d28 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d903      	bls.n	8009bb6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	220d      	movs	r2, #13
 8009bb2:	701a      	strb	r2, [r3, #0]
      break;
 8009bb4:	e0b8      	b.n	8009d28 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	795b      	ldrb	r3, [r3, #5]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 feeb 	bl	800a998 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	791b      	ldrb	r3, [r3, #4]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fee5 	bl	800a998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
      break;
 8009bda:	e0a5      	b.n	8009d28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f965 	bl	8009eb4 <USBH_Get_CfgDesc>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2205      	movs	r2, #5
 8009bf8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bfa:	e097      	b.n	8009d2c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	f040 8094 	bne.w	8009d2c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	d903      	bls.n	8009c26 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	220d      	movs	r2, #13
 8009c22:	701a      	strb	r2, [r3, #0]
      break;
 8009c24:	e082      	b.n	8009d2c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	795b      	ldrb	r3, [r3, #5]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 feb3 	bl	800a998 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	791b      	ldrb	r3, [r3, #4]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fead 	bl	800a998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
      break;
 8009c4a:	e06f      	b.n	8009d2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d019      	beq.n	8009c8a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c62:	23ff      	movs	r3, #255	; 0xff
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f949 	bl	8009efc <USBH_Get_StringDesc>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d103      	bne.n	8009c7c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2206      	movs	r2, #6
 8009c78:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c7a:	e059      	b.n	8009d30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d156      	bne.n	8009d30 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2206      	movs	r2, #6
 8009c86:	705a      	strb	r2, [r3, #1]
      break;
 8009c88:	e052      	b.n	8009d30 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2206      	movs	r2, #6
 8009c8e:	705a      	strb	r2, [r3, #1]
      break;
 8009c90:	e04e      	b.n	8009d30 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d019      	beq.n	8009cd0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ca8:	23ff      	movs	r3, #255	; 0xff
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f926 	bl	8009efc <USBH_Get_StringDesc>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2207      	movs	r2, #7
 8009cbe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009cc0:	e038      	b.n	8009d34 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d135      	bne.n	8009d34 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2207      	movs	r2, #7
 8009ccc:	705a      	strb	r2, [r3, #1]
      break;
 8009cce:	e031      	b.n	8009d34 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2207      	movs	r2, #7
 8009cd4:	705a      	strb	r2, [r3, #1]
      break;
 8009cd6:	e02d      	b.n	8009d34 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d017      	beq.n	8009d12 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009cee:	23ff      	movs	r3, #255	; 0xff
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f903 	bl	8009efc <USBH_Get_StringDesc>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d04:	e018      	b.n	8009d38 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d115      	bne.n	8009d38 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d10:	e012      	b.n	8009d38 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	73fb      	strb	r3, [r7, #15]
      break;
 8009d16:	e00f      	b.n	8009d38 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009d18:	bf00      	nop
 8009d1a:	e00e      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d1c:	bf00      	nop
 8009d1e:	e00c      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d20:	bf00      	nop
 8009d22:	e00a      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d24:	bf00      	nop
 8009d26:	e008      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d28:	bf00      	nop
 8009d2a:	e006      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e004      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d30:	bf00      	nop
 8009d32:	e002      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <USBH_HandleEnum+0x3be>
      break;
 8009d38:	bf00      	nop
  }
  return Status;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009d56:	bf00      	nop
 8009d58:	370c      	adds	r7, #12
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f804 	bl	8009d86 <USBH_HandleSof>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b0b      	cmp	r3, #11
 8009d96:	d10a      	bne.n	8009dae <USBH_HandleSof+0x28>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d005      	beq.n	8009dae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
  }
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b083      	sub	sp, #12
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009dc6:	bf00      	nop
}
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009de2:	bf00      	nop
}
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f003 fd68 	bl	800d912 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	791b      	ldrb	r3, [r3, #4]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fda5 	bl	800a998 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	795b      	ldrb	r3, [r3, #5]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fd9f 	bl	800a998 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e82:	2100      	movs	r1, #0
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f864 	bl	8009f52 <USBH_GetDescriptor>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73fb      	strb	r3, [r7, #15]
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ea0:	78fa      	ldrb	r2, [r7, #3]
 8009ea2:	b292      	uxth	r2, r2
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	f000 f918 	bl	800a0da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3710      	adds	r7, #16
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	331c      	adds	r3, #28
 8009ec4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009ec6:	887b      	ldrh	r3, [r7, #2]
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f83d 	bl	8009f52 <USBH_GetDescriptor>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	72fb      	strb	r3, [r7, #11]
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d107      	bne.n	8009ef2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009ee8:	887a      	ldrh	r2, [r7, #2]
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 f964 	bl	800a1ba <USBH_ParseCfgDesc>
  }

  return status;
 8009ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	461a      	mov	r2, r3
 8009f08:	460b      	mov	r3, r1
 8009f0a:	72fb      	strb	r3, [r7, #11]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009f10:	7afb      	ldrb	r3, [r7, #11]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f18:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f20:	893b      	ldrh	r3, [r7, #8]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	460b      	mov	r3, r1
 8009f26:	2100      	movs	r1, #0
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 f812 	bl	8009f52 <USBH_GetDescriptor>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	75fb      	strb	r3, [r7, #23]
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d107      	bne.n	8009f48 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f3e:	893a      	ldrh	r2, [r7, #8]
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fa37 	bl	800a3b6 <USBH_ParseStringDesc>
  }

  return status;
 8009f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	607b      	str	r3, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	72fb      	strb	r3, [r7, #11]
 8009f60:	4613      	mov	r3, r2
 8009f62:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	789b      	ldrb	r3, [r3, #2]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d11c      	bne.n	8009fa6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2206      	movs	r2, #6
 8009f7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	893a      	ldrh	r2, [r7, #8]
 8009f82:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f84:	893b      	ldrh	r3, [r7, #8]
 8009f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f8e:	d104      	bne.n	8009f9a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f240 4209 	movw	r2, #1033	; 0x409
 8009f96:	829a      	strh	r2, [r3, #20]
 8009f98:	e002      	b.n	8009fa0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8b3a      	ldrh	r2, [r7, #24]
 8009fa4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009fa6:	8b3b      	ldrh	r3, [r7, #24]
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 fa50 	bl	800a452 <USBH_CtlReq>
 8009fb2:	4603      	mov	r3, r0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	789b      	ldrb	r3, [r3, #2]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d10f      	bne.n	8009ff0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2205      	movs	r2, #5
 8009fda:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa2c 	bl	800a452 <USBH_CtlReq>
 8009ffa:	4603      	mov	r3, r0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	789b      	ldrb	r3, [r3, #2]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d10e      	bne.n	800a036 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2209      	movs	r2, #9
 800a022:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	887a      	ldrh	r2, [r7, #2]
 800a028:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a036:	2200      	movs	r2, #0
 800a038:	2100      	movs	r1, #0
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fa09 	bl	800a452 <USBH_CtlReq>
 800a040:	4603      	mov	r3, r0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	460b      	mov	r3, r1
 800a054:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	789b      	ldrb	r3, [r3, #2]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d10f      	bne.n	800a07e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2203      	movs	r2, #3
 800a068:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a06a:	78fb      	ldrb	r3, [r7, #3]
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f9e5 	bl	800a452 <USBH_CtlReq>
 800a088:	4603      	mov	r3, r0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	789b      	ldrb	r3, [r3, #2]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d10f      	bne.n	800a0c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a0b8:	78fb      	ldrb	r3, [r7, #3]
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f9c1 	bl	800a452 <USBH_CtlReq>
 800a0d0:	4603      	mov	r3, r0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	785a      	ldrb	r2, [r3, #1]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	3303      	adds	r3, #3
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	b29b      	uxth	r3, r3
 800a108:	021b      	lsls	r3, r3, #8
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	4313      	orrs	r3, r2
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	791a      	ldrb	r2, [r3, #4]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	795a      	ldrb	r2, [r3, #5]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	799a      	ldrb	r2, [r3, #6]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	79da      	ldrb	r2, [r3, #7]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a134:	88fb      	ldrh	r3, [r7, #6]
 800a136:	2b08      	cmp	r3, #8
 800a138:	d939      	bls.n	800a1ae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	3308      	adds	r3, #8
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	b29a      	uxth	r2, r3
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	3309      	adds	r3, #9
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	b29a      	uxth	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	330a      	adds	r3, #10
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	330b      	adds	r3, #11
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	021b      	lsls	r3, r3, #8
 800a168:	b29b      	uxth	r3, r3
 800a16a:	4313      	orrs	r3, r2
 800a16c:	b29a      	uxth	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	330c      	adds	r3, #12
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	330d      	adds	r3, #13
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	b29b      	uxth	r3, r3
 800a186:	4313      	orrs	r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	7b9a      	ldrb	r2, [r3, #14]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	7bda      	ldrb	r2, [r3, #15]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	7c1a      	ldrb	r2, [r3, #16]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	7c5a      	ldrb	r2, [r3, #17]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	745a      	strb	r2, [r3, #17]
  }
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b08a      	sub	sp, #40	; 0x28
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	781a      	ldrb	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	785a      	ldrb	r2, [r3, #1]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	3303      	adds	r3, #3
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4313      	orrs	r3, r2
 800a202:	b29a      	uxth	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	791a      	ldrb	r2, [r3, #4]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	795a      	ldrb	r2, [r3, #5]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	799a      	ldrb	r2, [r3, #6]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	79da      	ldrb	r2, [r3, #7]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	7a1a      	ldrb	r2, [r3, #8]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	2b09      	cmp	r3, #9
 800a234:	d95f      	bls.n	800a2f6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a236:	2309      	movs	r3, #9
 800a238:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a23e:	e051      	b.n	800a2e4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a240:	f107 0316 	add.w	r3, r7, #22
 800a244:	4619      	mov	r1, r3
 800a246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a248:	f000 f8e8 	bl	800a41c <USBH_GetNextDesc>
 800a24c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	785b      	ldrb	r3, [r3, #1]
 800a252:	2b04      	cmp	r3, #4
 800a254:	d146      	bne.n	800a2e4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a25a:	221a      	movs	r2, #26
 800a25c:	fb02 f303 	mul.w	r3, r2, r3
 800a260:	3308      	adds	r3, #8
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	3302      	adds	r3, #2
 800a268:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a26a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a26c:	69f8      	ldr	r0, [r7, #28]
 800a26e:	f000 f846 	bl	800a2fe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a278:	2300      	movs	r3, #0
 800a27a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a27c:	e022      	b.n	800a2c4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a27e:	f107 0316 	add.w	r3, r7, #22
 800a282:	4619      	mov	r1, r3
 800a284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a286:	f000 f8c9 	bl	800a41c <USBH_GetNextDesc>
 800a28a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	785b      	ldrb	r3, [r3, #1]
 800a290:	2b05      	cmp	r3, #5
 800a292:	d117      	bne.n	800a2c4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a294:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a298:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a29c:	3201      	adds	r2, #1
 800a29e:	00d2      	lsls	r2, r2, #3
 800a2a0:	211a      	movs	r1, #26
 800a2a2:	fb01 f303 	mul.w	r3, r1, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3308      	adds	r3, #8
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a2b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2b4:	69b8      	ldr	r0, [r7, #24]
 800a2b6:	f000 f851 	bl	800a35c <USBH_ParseEPDesc>
            ep_ix++;
 800a2ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a2be:	3301      	adds	r3, #1
 800a2c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	791b      	ldrb	r3, [r3, #4]
 800a2c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d204      	bcs.n	800a2da <USBH_ParseCfgDesc+0x120>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	885a      	ldrh	r2, [r3, #2]
 800a2d4:	8afb      	ldrh	r3, [r7, #22]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d8d1      	bhi.n	800a27e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a2da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2de:	3301      	adds	r3, #1
 800a2e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d804      	bhi.n	800a2f6 <USBH_ParseCfgDesc+0x13c>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	885a      	ldrh	r2, [r3, #2]
 800a2f0:	8afb      	ldrh	r3, [r7, #22]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d8a4      	bhi.n	800a240 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a2f6:	bf00      	nop
 800a2f8:	3728      	adds	r7, #40	; 0x28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781a      	ldrb	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	785a      	ldrb	r2, [r3, #1]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	789a      	ldrb	r2, [r3, #2]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	78da      	ldrb	r2, [r3, #3]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	791a      	ldrb	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	795a      	ldrb	r2, [r3, #5]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	799a      	ldrb	r2, [r3, #6]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	79da      	ldrb	r2, [r3, #7]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	7a1a      	ldrb	r2, [r3, #8]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	721a      	strb	r2, [r3, #8]
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781a      	ldrb	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	785a      	ldrb	r2, [r3, #1]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	789a      	ldrb	r2, [r3, #2]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	78da      	ldrb	r2, [r3, #3]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	3304      	adds	r3, #4
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	3305      	adds	r3, #5
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	021b      	lsls	r3, r3, #8
 800a398:	b29b      	uxth	r3, r3
 800a39a:	4313      	orrs	r3, r2
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	799a      	ldrb	r2, [r3, #6]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	719a      	strb	r2, [r3, #6]
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b087      	sub	sp, #28
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b03      	cmp	r3, #3
 800a3cc:	d120      	bne.n	800a410 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	1e9a      	subs	r2, r3, #2
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	bf28      	it	cs
 800a3da:	4613      	movcs	r3, r2
 800a3dc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	82fb      	strh	r3, [r7, #22]
 800a3e8:	e00b      	b.n	800a402 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3ea:	8afb      	ldrh	r3, [r7, #22]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781a      	ldrb	r2, [r3, #0]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3fc:	8afb      	ldrh	r3, [r7, #22]
 800a3fe:	3302      	adds	r3, #2
 800a400:	82fb      	strh	r3, [r7, #22]
 800a402:	8afa      	ldrh	r2, [r7, #22]
 800a404:	8abb      	ldrh	r3, [r7, #20]
 800a406:	429a      	cmp	r2, r3
 800a408:	d3ef      	bcc.n	800a3ea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2200      	movs	r2, #0
 800a40e:	701a      	strb	r2, [r3, #0]
  }
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	881a      	ldrh	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	4413      	add	r3, r2
 800a432:	b29a      	uxth	r2, r3
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4413      	add	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a444:	68fb      	ldr	r3, [r7, #12]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b086      	sub	sp, #24
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	4613      	mov	r3, r2
 800a45e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a460:	2301      	movs	r3, #1
 800a462:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	789b      	ldrb	r3, [r3, #2]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d002      	beq.n	800a472 <USBH_CtlReq+0x20>
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d00f      	beq.n	800a490 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a470:	e027      	b.n	800a4c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	88fa      	ldrh	r2, [r7, #6]
 800a47c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2202      	movs	r2, #2
 800a488:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a48a:	2301      	movs	r3, #1
 800a48c:	75fb      	strb	r3, [r7, #23]
      break;
 800a48e:	e018      	b.n	800a4c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f000 f81b 	bl	800a4cc <USBH_HandleControl>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <USBH_CtlReq+0x54>
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d106      	bne.n	800a4b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	761a      	strb	r2, [r3, #24]
      break;
 800a4b2:	e005      	b.n	800a4c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d102      	bne.n	800a4c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	709a      	strb	r2, [r3, #2]
      break;
 800a4c0:	bf00      	nop
  }
  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	7e1b      	ldrb	r3, [r3, #24]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	2b0a      	cmp	r3, #10
 800a4e4:	f200 8158 	bhi.w	800a798 <USBH_HandleControl+0x2cc>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBH_HandleControl+0x24>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a51d 	.word	0x0800a51d
 800a4f4:	0800a537 	.word	0x0800a537
 800a4f8:	0800a5a1 	.word	0x0800a5a1
 800a4fc:	0800a5c7 	.word	0x0800a5c7
 800a500:	0800a5ff 	.word	0x0800a5ff
 800a504:	0800a62b 	.word	0x0800a62b
 800a508:	0800a67d 	.word	0x0800a67d
 800a50c:	0800a69f 	.word	0x0800a69f
 800a510:	0800a6db 	.word	0x0800a6db
 800a514:	0800a703 	.word	0x0800a703
 800a518:	0800a741 	.word	0x0800a741
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0110 	add.w	r1, r3, #16
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	795b      	ldrb	r3, [r3, #5]
 800a526:	461a      	mov	r2, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f945 	bl	800a7b8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2202      	movs	r2, #2
 800a532:	761a      	strb	r2, [r3, #24]
      break;
 800a534:	e13b      	b.n	800a7ae <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	795b      	ldrb	r3, [r3, #5]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f003 fad5 	bl	800daec <USBH_LL_GetURBState>
 800a542:	4603      	mov	r3, r0
 800a544:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a546:	7bbb      	ldrb	r3, [r7, #14]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d11e      	bne.n	800a58a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	7c1b      	ldrb	r3, [r3, #16]
 800a550:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a554:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	8adb      	ldrh	r3, [r3, #22]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a55e:	7b7b      	ldrb	r3, [r7, #13]
 800a560:	2b80      	cmp	r3, #128	; 0x80
 800a562:	d103      	bne.n	800a56c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2203      	movs	r2, #3
 800a568:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a56a:	e117      	b.n	800a79c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2205      	movs	r2, #5
 800a570:	761a      	strb	r2, [r3, #24]
      break;
 800a572:	e113      	b.n	800a79c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a574:	7b7b      	ldrb	r3, [r7, #13]
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	d103      	bne.n	800a582 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2209      	movs	r2, #9
 800a57e:	761a      	strb	r2, [r3, #24]
      break;
 800a580:	e10c      	b.n	800a79c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2207      	movs	r2, #7
 800a586:	761a      	strb	r2, [r3, #24]
      break;
 800a588:	e108      	b.n	800a79c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d003      	beq.n	800a598 <USBH_HandleControl+0xcc>
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b02      	cmp	r3, #2
 800a594:	f040 8102 	bne.w	800a79c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	220b      	movs	r2, #11
 800a59c:	761a      	strb	r2, [r3, #24]
      break;
 800a59e:	e0fd      	b.n	800a79c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6899      	ldr	r1, [r3, #8]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	899a      	ldrh	r2, [r3, #12]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	791b      	ldrb	r3, [r3, #4]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f93c 	bl	800a836 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	761a      	strb	r2, [r3, #24]
      break;
 800a5c4:	e0f3      	b.n	800a7ae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	791b      	ldrb	r3, [r3, #4]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f003 fa8d 	bl	800daec <USBH_LL_GetURBState>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d102      	bne.n	800a5e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2209      	movs	r2, #9
 800a5e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b05      	cmp	r3, #5
 800a5e6:	d102      	bne.n	800a5ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5ec:	e0d8      	b.n	800a7a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	f040 80d5 	bne.w	800a7a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	220b      	movs	r2, #11
 800a5fa:	761a      	strb	r2, [r3, #24]
      break;
 800a5fc:	e0d0      	b.n	800a7a0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6899      	ldr	r1, [r3, #8]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	899a      	ldrh	r2, [r3, #12]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	7958      	ldrb	r0, [r3, #5]
 800a60a:	2301      	movs	r3, #1
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	4603      	mov	r3, r0
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f8eb 	bl	800a7ec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2206      	movs	r2, #6
 800a626:	761a      	strb	r2, [r3, #24]
      break;
 800a628:	e0c1      	b.n	800a7ae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	795b      	ldrb	r3, [r3, #5]
 800a62e:	4619      	mov	r1, r3
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f003 fa5b 	bl	800daec <USBH_LL_GetURBState>
 800a636:	4603      	mov	r3, r0
 800a638:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a63a:	7bbb      	ldrb	r3, [r7, #14]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d103      	bne.n	800a648 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2207      	movs	r2, #7
 800a644:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a646:	e0ad      	b.n	800a7a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	2b05      	cmp	r3, #5
 800a64c:	d105      	bne.n	800a65a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	220c      	movs	r2, #12
 800a652:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a654:	2303      	movs	r3, #3
 800a656:	73fb      	strb	r3, [r7, #15]
      break;
 800a658:	e0a4      	b.n	800a7a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a65a:	7bbb      	ldrb	r3, [r7, #14]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d103      	bne.n	800a668 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2205      	movs	r2, #5
 800a664:	761a      	strb	r2, [r3, #24]
      break;
 800a666:	e09d      	b.n	800a7a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a668:	7bbb      	ldrb	r3, [r7, #14]
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	f040 809a 	bne.w	800a7a4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	220b      	movs	r2, #11
 800a674:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a676:	2302      	movs	r3, #2
 800a678:	73fb      	strb	r3, [r7, #15]
      break;
 800a67a:	e093      	b.n	800a7a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	791b      	ldrb	r3, [r3, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	2100      	movs	r1, #0
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f8d6 	bl	800a836 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2208      	movs	r2, #8
 800a69a:	761a      	strb	r2, [r3, #24]

      break;
 800a69c:	e087      	b.n	800a7ae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	791b      	ldrb	r3, [r3, #4]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f003 fa21 	bl	800daec <USBH_LL_GetURBState>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d105      	bne.n	800a6c0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	220d      	movs	r2, #13
 800a6b8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6be:	e073      	b.n	800a7a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d103      	bne.n	800a6ce <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	220b      	movs	r2, #11
 800a6ca:	761a      	strb	r2, [r3, #24]
      break;
 800a6cc:	e06c      	b.n	800a7a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b05      	cmp	r3, #5
 800a6d2:	d169      	bne.n	800a7a8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d8:	e066      	b.n	800a7a8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	795a      	ldrb	r2, [r3, #5]
 800a6de:	2301      	movs	r3, #1
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f87f 	bl	800a7ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	220a      	movs	r2, #10
 800a6fe:	761a      	strb	r2, [r3, #24]
      break;
 800a700:	e055      	b.n	800a7ae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	795b      	ldrb	r3, [r3, #5]
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f003 f9ef 	bl	800daec <USBH_LL_GetURBState>
 800a70e:	4603      	mov	r3, r0
 800a710:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a712:	7bbb      	ldrb	r3, [r7, #14]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d105      	bne.n	800a724 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a718:	2300      	movs	r3, #0
 800a71a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	220d      	movs	r2, #13
 800a720:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a722:	e043      	b.n	800a7ac <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d103      	bne.n	800a732 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2209      	movs	r2, #9
 800a72e:	761a      	strb	r2, [r3, #24]
      break;
 800a730:	e03c      	b.n	800a7ac <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b04      	cmp	r3, #4
 800a736:	d139      	bne.n	800a7ac <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	220b      	movs	r2, #11
 800a73c:	761a      	strb	r2, [r3, #24]
      break;
 800a73e:	e035      	b.n	800a7ac <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	7e5b      	ldrb	r3, [r3, #25]
 800a744:	3301      	adds	r3, #1
 800a746:	b2da      	uxtb	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	765a      	strb	r2, [r3, #25]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	7e5b      	ldrb	r3, [r3, #25]
 800a750:	2b02      	cmp	r3, #2
 800a752:	d806      	bhi.n	800a762 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a760:	e025      	b.n	800a7ae <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a768:	2106      	movs	r1, #6
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	795b      	ldrb	r3, [r3, #5]
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f90c 	bl	800a998 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	791b      	ldrb	r3, [r3, #4]
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 f906 	bl	800a998 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a792:	2302      	movs	r3, #2
 800a794:	73fb      	strb	r3, [r7, #15]
      break;
 800a796:	e00a      	b.n	800a7ae <USBH_HandleControl+0x2e2>

    default:
      break;
 800a798:	bf00      	nop
 800a79a:	e008      	b.n	800a7ae <USBH_HandleControl+0x2e2>
      break;
 800a79c:	bf00      	nop
 800a79e:	e006      	b.n	800a7ae <USBH_HandleControl+0x2e2>
      break;
 800a7a0:	bf00      	nop
 800a7a2:	e004      	b.n	800a7ae <USBH_HandleControl+0x2e2>
      break;
 800a7a4:	bf00      	nop
 800a7a6:	e002      	b.n	800a7ae <USBH_HandleControl+0x2e2>
      break;
 800a7a8:	bf00      	nop
 800a7aa:	e000      	b.n	800a7ae <USBH_HandleControl+0x2e2>
      break;
 800a7ac:	bf00      	nop
  }

  return status;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af04      	add	r7, sp, #16
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a7c6:	79f9      	ldrb	r1, [r7, #7]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9303      	str	r3, [sp, #12]
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	2200      	movs	r2, #0
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f003 f954 	bl	800da8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af04      	add	r7, sp, #16
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	80fb      	strh	r3, [r7, #6]
 800a7fe:	4613      	mov	r3, r2
 800a800:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a810:	7979      	ldrb	r1, [r7, #5]
 800a812:	7e3b      	ldrb	r3, [r7, #24]
 800a814:	9303      	str	r3, [sp, #12]
 800a816:	88fb      	ldrh	r3, [r7, #6]
 800a818:	9302      	str	r3, [sp, #8]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	2301      	movs	r3, #1
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	2300      	movs	r3, #0
 800a824:	2200      	movs	r2, #0
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f003 f92f 	bl	800da8a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b088      	sub	sp, #32
 800a83a:	af04      	add	r7, sp, #16
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	4611      	mov	r1, r2
 800a842:	461a      	mov	r2, r3
 800a844:	460b      	mov	r3, r1
 800a846:	80fb      	strh	r3, [r7, #6]
 800a848:	4613      	mov	r3, r2
 800a84a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a84c:	7979      	ldrb	r1, [r7, #5]
 800a84e:	2300      	movs	r3, #0
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	88fb      	ldrh	r3, [r7, #6]
 800a854:	9302      	str	r3, [sp, #8]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	2301      	movs	r3, #1
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	2300      	movs	r3, #0
 800a860:	2201      	movs	r2, #1
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f003 f911 	bl	800da8a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a868:	2300      	movs	r3, #0

}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b088      	sub	sp, #32
 800a876:	af04      	add	r7, sp, #16
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	4611      	mov	r1, r2
 800a87e:	461a      	mov	r2, r3
 800a880:	460b      	mov	r3, r1
 800a882:	80fb      	strh	r3, [r7, #6]
 800a884:	4613      	mov	r3, r2
 800a886:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a896:	7979      	ldrb	r1, [r7, #5]
 800a898:	7e3b      	ldrb	r3, [r7, #24]
 800a89a:	9303      	str	r3, [sp, #12]
 800a89c:	88fb      	ldrh	r3, [r7, #6]
 800a89e:	9302      	str	r3, [sp, #8]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f003 f8ec 	bl	800da8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af04      	add	r7, sp, #16
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	80fb      	strh	r3, [r7, #6]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8d2:	7979      	ldrb	r1, [r7, #5]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9303      	str	r3, [sp, #12]
 800a8d8:	88fb      	ldrh	r3, [r7, #6]
 800a8da:	9302      	str	r3, [sp, #8]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f003 f8ce 	bl	800da8a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af04      	add	r7, sp, #16
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	4608      	mov	r0, r1
 800a902:	4611      	mov	r1, r2
 800a904:	461a      	mov	r2, r3
 800a906:	4603      	mov	r3, r0
 800a908:	70fb      	strb	r3, [r7, #3]
 800a90a:	460b      	mov	r3, r1
 800a90c:	70bb      	strb	r3, [r7, #2]
 800a90e:	4613      	mov	r3, r2
 800a910:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a912:	7878      	ldrb	r0, [r7, #1]
 800a914:	78ba      	ldrb	r2, [r7, #2]
 800a916:	78f9      	ldrb	r1, [r7, #3]
 800a918:	8b3b      	ldrh	r3, [r7, #24]
 800a91a:	9302      	str	r3, [sp, #8]
 800a91c:	7d3b      	ldrb	r3, [r7, #20]
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	7c3b      	ldrb	r3, [r7, #16]
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	4603      	mov	r3, r0
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f003 f861 	bl	800d9ee <USBH_LL_OpenPipe>

  return USBH_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a942:	78fb      	ldrb	r3, [r7, #3]
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f003 f880 	bl	800da4c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	460b      	mov	r3, r1
 800a960:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f836 	bl	800a9d4 <USBH_GetFreePipe>
 800a968:	4603      	mov	r3, r0
 800a96a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a972:	4293      	cmp	r3, r2
 800a974:	d00a      	beq.n	800a98c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a976:	78fa      	ldrb	r2, [r7, #3]
 800a978:	89fb      	ldrh	r3, [r7, #14]
 800a97a:	f003 030f 	and.w	r3, r3, #15
 800a97e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	33e0      	adds	r3, #224	; 0xe0
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	440b      	add	r3, r1
 800a98a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a98c:	89fb      	ldrh	r3, [r7, #14]
 800a98e:	b2db      	uxtb	r3, r3
}
 800a990:	4618      	mov	r0, r3
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	2b0a      	cmp	r3, #10
 800a9a8:	d80d      	bhi.n	800a9c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	33e0      	adds	r3, #224	; 0xe0
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	685a      	ldr	r2, [r3, #4]
 800a9b6:	78fb      	ldrb	r3, [r7, #3]
 800a9b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a9bc:	6879      	ldr	r1, [r7, #4]
 800a9be:	33e0      	adds	r3, #224	; 0xe0
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	440b      	add	r3, r1
 800a9c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
 800a9e4:	e00f      	b.n	800aa06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	33e0      	adds	r3, #224	; 0xe0
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	e007      	b.n	800aa10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	3301      	adds	r3, #1
 800aa04:	73fb      	strb	r3, [r7, #15]
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	2b0a      	cmp	r3, #10
 800aa0a:	d9ec      	bls.n	800a9e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	4a08      	ldr	r2, [pc, #32]	; (800aa4c <disk_status+0x30>)
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	79fa      	ldrb	r2, [r7, #7]
 800aa34:	4905      	ldr	r1, [pc, #20]	; (800aa4c <disk_status+0x30>)
 800aa36:	440a      	add	r2, r1
 800aa38:	7a12      	ldrb	r2, [r2, #8]
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000698 	.word	0x20000698

0800aa50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	4a0d      	ldr	r2, [pc, #52]	; (800aa98 <disk_initialize+0x48>)
 800aa62:	5cd3      	ldrb	r3, [r2, r3]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d111      	bne.n	800aa8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	4a0b      	ldr	r2, [pc, #44]	; (800aa98 <disk_initialize+0x48>)
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	4a09      	ldr	r2, [pc, #36]	; (800aa98 <disk_initialize+0x48>)
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	79fa      	ldrb	r2, [r7, #7]
 800aa7e:	4906      	ldr	r1, [pc, #24]	; (800aa98 <disk_initialize+0x48>)
 800aa80:	440a      	add	r2, r1
 800aa82:	7a12      	ldrb	r2, [r2, #8]
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20000698 	.word	0x20000698

0800aa9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa9c:	b590      	push	{r4, r7, lr}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4a0a      	ldr	r2, [pc, #40]	; (800aad8 <disk_read+0x3c>)
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	689c      	ldr	r4, [r3, #8]
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	4a07      	ldr	r2, [pc, #28]	; (800aad8 <disk_read+0x3c>)
 800aabc:	4413      	add	r3, r2
 800aabe:	7a18      	ldrb	r0, [r3, #8]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68b9      	ldr	r1, [r7, #8]
 800aac6:	47a0      	blx	r4
 800aac8:	4603      	mov	r3, r0
 800aaca:	75fb      	strb	r3, [r7, #23]
  return res;
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000698 	.word	0x20000698

0800aadc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	607a      	str	r2, [r7, #4]
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	4a0a      	ldr	r2, [pc, #40]	; (800ab18 <disk_write+0x3c>)
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	68dc      	ldr	r4, [r3, #12]
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	4a07      	ldr	r2, [pc, #28]	; (800ab18 <disk_write+0x3c>)
 800aafc:	4413      	add	r3, r2
 800aafe:	7a18      	ldrb	r0, [r3, #8]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	47a0      	blx	r4
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd90      	pop	{r4, r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000698 	.word	0x20000698

0800ab1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	603a      	str	r2, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <disk_ioctl+0x38>)
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	79fa      	ldrb	r2, [r7, #7]
 800ab3a:	4906      	ldr	r1, [pc, #24]	; (800ab54 <disk_ioctl+0x38>)
 800ab3c:	440a      	add	r2, r1
 800ab3e:	7a10      	ldrb	r0, [r2, #8]
 800ab40:	79b9      	ldrb	r1, [r7, #6]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
  return res;
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20000698 	.word	0x20000698

0800ab58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3301      	adds	r3, #1
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	021b      	lsls	r3, r3, #8
 800ab6c:	b21a      	sxth	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b21b      	sxth	r3, r3
 800ab74:	4313      	orrs	r3, r2
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ab7a:	89fb      	ldrh	r3, [r7, #14]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3303      	adds	r3, #3
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	021b      	lsls	r3, r3, #8
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	3202      	adds	r2, #2
 800aba0:	7812      	ldrb	r2, [r2, #0]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	3201      	adds	r2, #1
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	7812      	ldrb	r2, [r2, #0]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
	return rv;
 800abc0:	68fb      	ldr	r3, [r7, #12]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	887a      	ldrh	r2, [r7, #2]
 800abe2:	b2d2      	uxtb	r2, r2
 800abe4:	701a      	strb	r2, [r3, #0]
 800abe6:	887b      	ldrh	r3, [r7, #2]
 800abe8:	0a1b      	lsrs	r3, r3, #8
 800abea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	887a      	ldrh	r2, [r7, #2]
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	701a      	strb	r2, [r3, #0]
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	0a1b      	lsrs	r3, r3, #8
 800ac1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	b2d2      	uxtb	r2, r2
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	1c5a      	adds	r2, r3, #1
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	0a1b      	lsrs	r3, r3, #8
 800ac42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	701a      	strb	r2, [r3, #0]
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	1c53      	adds	r3, r2, #1
 800ac7a:	613b      	str	r3, [r7, #16]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	6179      	str	r1, [r7, #20]
 800ac82:	7812      	ldrb	r2, [r2, #0]
 800ac84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1f1      	bne.n	800ac76 <mem_cpy+0x1a>
	}
}
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac9e:	b480      	push	{r7}
 800aca0:	b087      	sub	sp, #28
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	617a      	str	r2, [r7, #20]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	607b      	str	r3, [r7, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1f3      	bne.n	800acae <mem_set+0x10>
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800acd2:	b480      	push	{r7}
 800acd4:	b089      	sub	sp, #36	; 0x24
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	61fb      	str	r3, [r7, #28]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	61fa      	str	r2, [r7, #28]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	4619      	mov	r1, r3
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	1c5a      	adds	r2, r3, #1
 800acf8:	61ba      	str	r2, [r7, #24]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	1acb      	subs	r3, r1, r3
 800acfe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <mem_cmp+0x40>
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0eb      	beq.n	800acea <mem_cmp+0x18>

	return r;
 800ad12:	697b      	ldr	r3, [r7, #20]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3724      	adds	r7, #36	; 0x24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ad2a:	e002      	b.n	800ad32 <chk_chr+0x12>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	607b      	str	r3, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <chk_chr+0x26>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d1f2      	bne.n	800ad2c <chk_chr+0xc>
	return *str;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	781b      	ldrb	r3, [r3, #0]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad62:	2300      	movs	r3, #0
 800ad64:	60bb      	str	r3, [r7, #8]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e029      	b.n	800adc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ad6c:	4a27      	ldr	r2, [pc, #156]	; (800ae0c <chk_lock+0xb4>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	4413      	add	r3, r2
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01d      	beq.n	800adb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad7a:	4a24      	ldr	r2, [pc, #144]	; (800ae0c <chk_lock+0xb4>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	4413      	add	r3, r2
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d116      	bne.n	800adba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad8c:	4a1f      	ldr	r2, [pc, #124]	; (800ae0c <chk_lock+0xb4>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	4413      	add	r3, r2
 800ad94:	3304      	adds	r3, #4
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d10c      	bne.n	800adba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ada0:	4a1a      	ldr	r2, [pc, #104]	; (800ae0c <chk_lock+0xb4>)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	4413      	add	r3, r2
 800ada8:	3308      	adds	r3, #8
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d102      	bne.n	800adba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800adb4:	e007      	b.n	800adc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800adb6:	2301      	movs	r3, #1
 800adb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d9d2      	bls.n	800ad6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d109      	bne.n	800ade0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d102      	bne.n	800add8 <chk_lock+0x80>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d101      	bne.n	800addc <chk_lock+0x84>
 800add8:	2300      	movs	r3, #0
 800adda:	e010      	b.n	800adfe <chk_lock+0xa6>
 800addc:	2312      	movs	r3, #18
 800adde:	e00e      	b.n	800adfe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d108      	bne.n	800adf8 <chk_lock+0xa0>
 800ade6:	4a09      	ldr	r2, [pc, #36]	; (800ae0c <chk_lock+0xb4>)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	4413      	add	r3, r2
 800adee:	330c      	adds	r3, #12
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf6:	d101      	bne.n	800adfc <chk_lock+0xa4>
 800adf8:	2310      	movs	r3, #16
 800adfa:	e000      	b.n	800adfe <chk_lock+0xa6>
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	20000678 	.word	0x20000678

0800ae10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae16:	2300      	movs	r3, #0
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	e002      	b.n	800ae22 <enq_lock+0x12>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	607b      	str	r3, [r7, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d806      	bhi.n	800ae36 <enq_lock+0x26>
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <enq_lock+0x40>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	4413      	add	r3, r2
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1f2      	bne.n	800ae1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	bf14      	ite	ne
 800ae3c:	2301      	movne	r3, #1
 800ae3e:	2300      	moveq	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20000678 	.word	0x20000678

0800ae54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e01f      	b.n	800aea4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ae64:	4a41      	ldr	r2, [pc, #260]	; (800af6c <inc_lock+0x118>)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	4413      	add	r3, r2
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d113      	bne.n	800ae9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ae76:	4a3d      	ldr	r2, [pc, #244]	; (800af6c <inc_lock+0x118>)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	4413      	add	r3, r2
 800ae7e:	3304      	adds	r3, #4
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d109      	bne.n	800ae9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae8a:	4a38      	ldr	r2, [pc, #224]	; (800af6c <inc_lock+0x118>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	4413      	add	r3, r2
 800ae92:	3308      	adds	r3, #8
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d006      	beq.n	800aeac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d9dc      	bls.n	800ae64 <inc_lock+0x10>
 800aeaa:	e000      	b.n	800aeae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aeac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d132      	bne.n	800af1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	e002      	b.n	800aec0 <inc_lock+0x6c>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3301      	adds	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d806      	bhi.n	800aed4 <inc_lock+0x80>
 800aec6:	4a29      	ldr	r2, [pc, #164]	; (800af6c <inc_lock+0x118>)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	4413      	add	r3, r2
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1f2      	bne.n	800aeba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d101      	bne.n	800aede <inc_lock+0x8a>
 800aeda:	2300      	movs	r3, #0
 800aedc:	e040      	b.n	800af60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	4922      	ldr	r1, [pc, #136]	; (800af6c <inc_lock+0x118>)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	440b      	add	r3, r1
 800aeea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	491e      	ldr	r1, [pc, #120]	; (800af6c <inc_lock+0x118>)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	440b      	add	r3, r1
 800aef8:	3304      	adds	r3, #4
 800aefa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	695a      	ldr	r2, [r3, #20]
 800af00:	491a      	ldr	r1, [pc, #104]	; (800af6c <inc_lock+0x118>)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	440b      	add	r3, r1
 800af08:	3308      	adds	r3, #8
 800af0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af0c:	4a17      	ldr	r2, [pc, #92]	; (800af6c <inc_lock+0x118>)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	4413      	add	r3, r2
 800af14:	330c      	adds	r3, #12
 800af16:	2200      	movs	r2, #0
 800af18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d009      	beq.n	800af34 <inc_lock+0xe0>
 800af20:	4a12      	ldr	r2, [pc, #72]	; (800af6c <inc_lock+0x118>)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	4413      	add	r3, r2
 800af28:	330c      	adds	r3, #12
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <inc_lock+0xe0>
 800af30:	2300      	movs	r3, #0
 800af32:	e015      	b.n	800af60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d108      	bne.n	800af4c <inc_lock+0xf8>
 800af3a:	4a0c      	ldr	r2, [pc, #48]	; (800af6c <inc_lock+0x118>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	4413      	add	r3, r2
 800af42:	330c      	adds	r3, #12
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	b29a      	uxth	r2, r3
 800af4a:	e001      	b.n	800af50 <inc_lock+0xfc>
 800af4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af50:	4906      	ldr	r1, [pc, #24]	; (800af6c <inc_lock+0x118>)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	440b      	add	r3, r1
 800af58:	330c      	adds	r3, #12
 800af5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3301      	adds	r3, #1
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20000678 	.word	0x20000678

0800af70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	607b      	str	r3, [r7, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d825      	bhi.n	800afd0 <dec_lock+0x60>
		n = Files[i].ctr;
 800af84:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <dec_lock+0x74>)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	4413      	add	r3, r2
 800af8c:	330c      	adds	r3, #12
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af92:	89fb      	ldrh	r3, [r7, #14]
 800af94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af98:	d101      	bne.n	800af9e <dec_lock+0x2e>
 800af9a:	2300      	movs	r3, #0
 800af9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af9e:	89fb      	ldrh	r3, [r7, #14]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <dec_lock+0x3a>
 800afa4:	89fb      	ldrh	r3, [r7, #14]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800afaa:	4a0e      	ldr	r2, [pc, #56]	; (800afe4 <dec_lock+0x74>)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	4413      	add	r3, r2
 800afb2:	330c      	adds	r3, #12
 800afb4:	89fa      	ldrh	r2, [r7, #14]
 800afb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d105      	bne.n	800afca <dec_lock+0x5a>
 800afbe:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <dec_lock+0x74>)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	4413      	add	r3, r2
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	737b      	strb	r3, [r7, #13]
 800afce:	e001      	b.n	800afd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800afd0:	2302      	movs	r3, #2
 800afd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800afd4:	7b7b      	ldrb	r3, [r7, #13]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20000678 	.word	0x20000678

0800afe8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e010      	b.n	800b018 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aff6:	4a0d      	ldr	r2, [pc, #52]	; (800b02c <clear_lock+0x44>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	4413      	add	r3, r2
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d105      	bne.n	800b012 <clear_lock+0x2a>
 800b006:	4a09      	ldr	r2, [pc, #36]	; (800b02c <clear_lock+0x44>)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	4413      	add	r3, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3301      	adds	r3, #1
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d9eb      	bls.n	800aff6 <clear_lock+0xe>
	}
}
 800b01e:	bf00      	nop
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	20000678 	.word	0x20000678

0800b030 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	78db      	ldrb	r3, [r3, #3]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d034      	beq.n	800b0ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b048:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7858      	ldrb	r0, [r3, #1]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b054:	2301      	movs	r3, #1
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	f7ff fd40 	bl	800aadc <disk_write>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b062:	2301      	movs	r3, #1
 800b064:	73fb      	strb	r3, [r7, #15]
 800b066:	e022      	b.n	800b0ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	1ad2      	subs	r2, r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d217      	bcs.n	800b0ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	789b      	ldrb	r3, [r3, #2]
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	e010      	b.n	800b0a8 <sync_window+0x78>
					wsect += fs->fsize;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	4413      	add	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7858      	ldrb	r0, [r3, #1]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b09a:	2301      	movs	r3, #1
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	f7ff fd1d 	bl	800aadc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	613b      	str	r3, [r7, #16]
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d8eb      	bhi.n	800b086 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d01b      	beq.n	800b108 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff ffad 	bl	800b030 <sync_window>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d113      	bne.n	800b108 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7858      	ldrb	r0, [r3, #1]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	f7ff fcd5 	bl	800aa9c <disk_read>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b108:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff ff87 	bl	800b030 <sync_window>
 800b122:	4603      	mov	r3, r0
 800b124:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d159      	bne.n	800b1e0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b03      	cmp	r3, #3
 800b132:	d149      	bne.n	800b1c8 <sync_fs+0xb4>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	791b      	ldrb	r3, [r3, #4]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d145      	bne.n	800b1c8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	899b      	ldrh	r3, [r3, #12]
 800b146:	461a      	mov	r2, r3
 800b148:	2100      	movs	r1, #0
 800b14a:	f7ff fda8 	bl	800ac9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3334      	adds	r3, #52	; 0x34
 800b152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b156:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fd37 	bl	800abce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3334      	adds	r3, #52	; 0x34
 800b164:	4921      	ldr	r1, [pc, #132]	; (800b1ec <sync_fs+0xd8>)
 800b166:	4618      	mov	r0, r3
 800b168:	f7ff fd4c 	bl	800ac04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3334      	adds	r3, #52	; 0x34
 800b170:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b174:	491e      	ldr	r1, [pc, #120]	; (800b1f0 <sync_fs+0xdc>)
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff fd44 	bl	800ac04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3334      	adds	r3, #52	; 0x34
 800b180:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7ff fd3a 	bl	800ac04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3334      	adds	r3, #52	; 0x34
 800b194:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f7ff fd30 	bl	800ac04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7858      	ldrb	r0, [r3, #1]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f7ff fc8d 	bl	800aadc <disk_write>
			fs->fsi_flag = 0;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	785b      	ldrb	r3, [r3, #1]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff fca3 	bl	800ab1c <disk_ioctl>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <sync_fs+0xcc>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	41615252 	.word	0x41615252
 800b1f0:	61417272 	.word	0x61417272

0800b1f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	3b02      	subs	r3, #2
 800b202:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	3b02      	subs	r3, #2
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d301      	bcc.n	800b214 <clust2sect+0x20>
 800b210:	2300      	movs	r3, #0
 800b212:	e008      	b.n	800b226 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	895b      	ldrh	r3, [r3, #10]
 800b218:	461a      	mov	r2, r3
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	fb03 f202 	mul.w	r2, r3, r2
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b224:	4413      	add	r3, r2
}
 800b226:	4618      	mov	r0, r3
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d904      	bls.n	800b252 <get_fat+0x20>
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d302      	bcc.n	800b258 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b252:	2301      	movs	r3, #1
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e0b7      	b.n	800b3c8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b258:	f04f 33ff 	mov.w	r3, #4294967295
 800b25c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b02      	cmp	r3, #2
 800b264:	d05a      	beq.n	800b31c <get_fat+0xea>
 800b266:	2b03      	cmp	r3, #3
 800b268:	d07d      	beq.n	800b366 <get_fat+0x134>
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	f040 80a2 	bne.w	800b3b4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	085b      	lsrs	r3, r3, #1
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	899b      	ldrh	r3, [r3, #12]
 800b286:	4619      	mov	r1, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b28e:	4413      	add	r3, r2
 800b290:	4619      	mov	r1, r3
 800b292:	6938      	ldr	r0, [r7, #16]
 800b294:	f7ff ff10 	bl	800b0b8 <move_window>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f040 808d 	bne.w	800b3ba <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	60fa      	str	r2, [r7, #12]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	8992      	ldrh	r2, [r2, #12]
 800b2aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2ae:	fb02 f201 	mul.w	r2, r2, r1
 800b2b2:	1a9b      	subs	r3, r3, r2
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	899b      	ldrh	r3, [r3, #12]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6938      	ldr	r0, [r7, #16]
 800b2d4:	f7ff fef0 	bl	800b0b8 <move_window>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d16f      	bne.n	800b3be <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	899b      	ldrh	r3, [r3, #12]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2ea:	fb02 f201 	mul.w	r2, r2, r1
 800b2ee:	1a9b      	subs	r3, r3, r2
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2f8:	021b      	lsls	r3, r3, #8
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <get_fat+0xe0>
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	091b      	lsrs	r3, r3, #4
 800b310:	e002      	b.n	800b318 <get_fat+0xe6>
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b318:	617b      	str	r3, [r7, #20]
			break;
 800b31a:	e055      	b.n	800b3c8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	899b      	ldrh	r3, [r3, #12]
 800b324:	085b      	lsrs	r3, r3, #1
 800b326:	b29b      	uxth	r3, r3
 800b328:	4619      	mov	r1, r3
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b330:	4413      	add	r3, r2
 800b332:	4619      	mov	r1, r3
 800b334:	6938      	ldr	r0, [r7, #16]
 800b336:	f7ff febf 	bl	800b0b8 <move_window>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d140      	bne.n	800b3c2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	8992      	ldrh	r2, [r2, #12]
 800b34e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b352:	fb02 f200 	mul.w	r2, r2, r0
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	440b      	add	r3, r1
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7ff fbfc 	bl	800ab58 <ld_word>
 800b360:	4603      	mov	r3, r0
 800b362:	617b      	str	r3, [r7, #20]
			break;
 800b364:	e030      	b.n	800b3c8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	899b      	ldrh	r3, [r3, #12]
 800b36e:	089b      	lsrs	r3, r3, #2
 800b370:	b29b      	uxth	r3, r3
 800b372:	4619      	mov	r1, r3
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	fbb3 f3f1 	udiv	r3, r3, r1
 800b37a:	4413      	add	r3, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	6938      	ldr	r0, [r7, #16]
 800b380:	f7ff fe9a 	bl	800b0b8 <move_window>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d11d      	bne.n	800b3c6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	8992      	ldrh	r2, [r2, #12]
 800b398:	fbb3 f0f2 	udiv	r0, r3, r2
 800b39c:	fb02 f200 	mul.w	r2, r2, r0
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	440b      	add	r3, r1
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fbef 	bl	800ab88 <ld_dword>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b3b0:	617b      	str	r3, [r7, #20]
			break;
 800b3b2:	e009      	b.n	800b3c8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
 800b3b8:	e006      	b.n	800b3c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3ba:	bf00      	nop
 800b3bc:	e004      	b.n	800b3c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3be:	bf00      	nop
 800b3c0:	e002      	b.n	800b3c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3c2:	bf00      	nop
 800b3c4:	e000      	b.n	800b3c8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3c6:	bf00      	nop
		}
	}

	return val;
 800b3c8:	697b      	ldr	r3, [r7, #20]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b3d2:	b590      	push	{r4, r7, lr}
 800b3d4:	b089      	sub	sp, #36	; 0x24
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b3de:	2302      	movs	r3, #2
 800b3e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	f240 8106 	bls.w	800b5f6 <put_fat+0x224>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	f080 8100 	bcs.w	800b5f6 <put_fat+0x224>
		switch (fs->fs_type) {
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	f000 8088 	beq.w	800b510 <put_fat+0x13e>
 800b400:	2b03      	cmp	r3, #3
 800b402:	f000 80b0 	beq.w	800b566 <put_fat+0x194>
 800b406:	2b01      	cmp	r3, #1
 800b408:	f040 80f5 	bne.w	800b5f6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	61bb      	str	r3, [r7, #24]
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	085b      	lsrs	r3, r3, #1
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	4413      	add	r3, r2
 800b418:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	899b      	ldrh	r3, [r3, #12]
 800b422:	4619      	mov	r1, r3
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	fbb3 f3f1 	udiv	r3, r3, r1
 800b42a:	4413      	add	r3, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff fe42 	bl	800b0b8 <move_window>
 800b434:	4603      	mov	r3, r0
 800b436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b438:	7ffb      	ldrb	r3, [r7, #31]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 80d4 	bne.w	800b5e8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	61ba      	str	r2, [r7, #24]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	8992      	ldrh	r2, [r2, #12]
 800b450:	fbb3 f0f2 	udiv	r0, r3, r2
 800b454:	fb02 f200 	mul.w	r2, r2, r0
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	440b      	add	r3, r1
 800b45c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00d      	beq.n	800b484 <put_fat+0xb2>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	b25b      	sxtb	r3, r3
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	b25a      	sxtb	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	b2db      	uxtb	r3, r3
 800b478:	011b      	lsls	r3, r3, #4
 800b47a:	b25b      	sxtb	r3, r3
 800b47c:	4313      	orrs	r3, r2
 800b47e:	b25b      	sxtb	r3, r3
 800b480:	b2db      	uxtb	r3, r3
 800b482:	e001      	b.n	800b488 <put_fat+0xb6>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	b2db      	uxtb	r3, r3
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2201      	movs	r2, #1
 800b490:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	899b      	ldrh	r3, [r3, #12]
 800b49a:	4619      	mov	r1, r3
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a2:	4413      	add	r3, r2
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f7ff fe06 	bl	800b0b8 <move_window>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4b0:	7ffb      	ldrb	r3, [r7, #31]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f040 809a 	bne.w	800b5ec <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	899b      	ldrh	r3, [r3, #12]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4ca:	fb02 f200 	mul.w	r2, r2, r0
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <put_fat+0x114>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	091b      	lsrs	r3, r3, #4
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	e00e      	b.n	800b504 <put_fat+0x132>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	b25b      	sxtb	r3, r3
 800b4ec:	f023 030f 	bic.w	r3, r3, #15
 800b4f0:	b25a      	sxtb	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	0a1b      	lsrs	r3, r3, #8
 800b4f6:	b25b      	sxtb	r3, r3
 800b4f8:	f003 030f 	and.w	r3, r3, #15
 800b4fc:	b25b      	sxtb	r3, r3
 800b4fe:	4313      	orrs	r3, r2
 800b500:	b25b      	sxtb	r3, r3
 800b502:	b2db      	uxtb	r3, r3
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2201      	movs	r2, #1
 800b50c:	70da      	strb	r2, [r3, #3]
			break;
 800b50e:	e072      	b.n	800b5f6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	899b      	ldrh	r3, [r3, #12]
 800b518:	085b      	lsrs	r3, r3, #1
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4619      	mov	r1, r3
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	fbb3 f3f1 	udiv	r3, r3, r1
 800b524:	4413      	add	r3, r2
 800b526:	4619      	mov	r1, r3
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff fdc5 	bl	800b0b8 <move_window>
 800b52e:	4603      	mov	r3, r0
 800b530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b532:	7ffb      	ldrb	r3, [r7, #31]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d15b      	bne.n	800b5f0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	005b      	lsls	r3, r3, #1
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	8992      	ldrh	r2, [r2, #12]
 800b546:	fbb3 f0f2 	udiv	r0, r3, r2
 800b54a:	fb02 f200 	mul.w	r2, r2, r0
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	440b      	add	r3, r1
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	b292      	uxth	r2, r2
 800b556:	4611      	mov	r1, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff fb38 	bl	800abce <st_word>
			fs->wflag = 1;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2201      	movs	r2, #1
 800b562:	70da      	strb	r2, [r3, #3]
			break;
 800b564:	e047      	b.n	800b5f6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	899b      	ldrh	r3, [r3, #12]
 800b56e:	089b      	lsrs	r3, r3, #2
 800b570:	b29b      	uxth	r3, r3
 800b572:	4619      	mov	r1, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	fbb3 f3f1 	udiv	r3, r3, r1
 800b57a:	4413      	add	r3, r2
 800b57c:	4619      	mov	r1, r3
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7ff fd9a 	bl	800b0b8 <move_window>
 800b584:	4603      	mov	r3, r0
 800b586:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b588:	7ffb      	ldrb	r3, [r7, #31]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d132      	bne.n	800b5f4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	8992      	ldrh	r2, [r2, #12]
 800b5a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5a6:	fb02 f200 	mul.w	r2, r2, r0
 800b5aa:	1a9b      	subs	r3, r3, r2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff faea 	bl	800ab88 <ld_dword>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b5ba:	4323      	orrs	r3, r4
 800b5bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	8992      	ldrh	r2, [r2, #12]
 800b5cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b5d0:	fb02 f200 	mul.w	r2, r2, r0
 800b5d4:	1a9b      	subs	r3, r3, r2
 800b5d6:	440b      	add	r3, r1
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7ff fb12 	bl	800ac04 <st_dword>
			fs->wflag = 1;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	70da      	strb	r2, [r3, #3]
			break;
 800b5e6:	e006      	b.n	800b5f6 <put_fat+0x224>
			if (res != FR_OK) break;
 800b5e8:	bf00      	nop
 800b5ea:	e004      	b.n	800b5f6 <put_fat+0x224>
			if (res != FR_OK) break;
 800b5ec:	bf00      	nop
 800b5ee:	e002      	b.n	800b5f6 <put_fat+0x224>
			if (res != FR_OK) break;
 800b5f0:	bf00      	nop
 800b5f2:	e000      	b.n	800b5f6 <put_fat+0x224>
			if (res != FR_OK) break;
 800b5f4:	bf00      	nop
		}
	}
	return res;
 800b5f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3724      	adds	r7, #36	; 0x24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd90      	pop	{r4, r7, pc}

0800b600 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b60c:	2300      	movs	r3, #0
 800b60e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d904      	bls.n	800b626 <remove_chain+0x26>
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	699b      	ldr	r3, [r3, #24]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	429a      	cmp	r2, r3
 800b624:	d301      	bcc.n	800b62a <remove_chain+0x2a>
 800b626:	2302      	movs	r3, #2
 800b628:	e04b      	b.n	800b6c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00c      	beq.n	800b64a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b630:	f04f 32ff 	mov.w	r2, #4294967295
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	69b8      	ldr	r0, [r7, #24]
 800b638:	f7ff fecb 	bl	800b3d2 <put_fat>
 800b63c:	4603      	mov	r3, r0
 800b63e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b640:	7ffb      	ldrb	r3, [r7, #31]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <remove_chain+0x4a>
 800b646:	7ffb      	ldrb	r3, [r7, #31]
 800b648:	e03b      	b.n	800b6c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b64a:	68b9      	ldr	r1, [r7, #8]
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f7ff fdf0 	bl	800b232 <get_fat>
 800b652:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d031      	beq.n	800b6be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d101      	bne.n	800b664 <remove_chain+0x64>
 800b660:	2302      	movs	r3, #2
 800b662:	e02e      	b.n	800b6c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66a:	d101      	bne.n	800b670 <remove_chain+0x70>
 800b66c:	2301      	movs	r3, #1
 800b66e:	e028      	b.n	800b6c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b670:	2200      	movs	r2, #0
 800b672:	68b9      	ldr	r1, [r7, #8]
 800b674:	69b8      	ldr	r0, [r7, #24]
 800b676:	f7ff feac 	bl	800b3d2 <put_fat>
 800b67a:	4603      	mov	r3, r0
 800b67c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b67e:	7ffb      	ldrb	r3, [r7, #31]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <remove_chain+0x88>
 800b684:	7ffb      	ldrb	r3, [r7, #31]
 800b686:	e01c      	b.n	800b6c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	695a      	ldr	r2, [r3, #20]
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	3b02      	subs	r3, #2
 800b692:	429a      	cmp	r2, r3
 800b694:	d20b      	bcs.n	800b6ae <remove_chain+0xae>
			fs->free_clst++;
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	791b      	ldrb	r3, [r3, #4]
 800b6a4:	f043 0301 	orr.w	r3, r3, #1
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d3c6      	bcc.n	800b64a <remove_chain+0x4a>
 800b6bc:	e000      	b.n	800b6c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b6be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3720      	adds	r7, #32
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b088      	sub	sp, #32
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10d      	bne.n	800b6fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d004      	beq.n	800b6f6 <create_chain+0x2c>
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d31b      	bcc.n	800b72e <create_chain+0x64>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	61bb      	str	r3, [r7, #24]
 800b6fa:	e018      	b.n	800b72e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff fd97 	bl	800b232 <get_fat>
 800b704:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d801      	bhi.n	800b710 <create_chain+0x46>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e070      	b.n	800b7f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d101      	bne.n	800b71c <create_chain+0x52>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	e06a      	b.n	800b7f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	429a      	cmp	r2, r3
 800b724:	d201      	bcs.n	800b72a <create_chain+0x60>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	e063      	b.n	800b7f2 <create_chain+0x128>
		scl = clst;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	3301      	adds	r3, #1
 800b736:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	69fa      	ldr	r2, [r7, #28]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d307      	bcc.n	800b752 <create_chain+0x88>
				ncl = 2;
 800b742:	2302      	movs	r3, #2
 800b744:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b746:	69fa      	ldr	r2, [r7, #28]
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d901      	bls.n	800b752 <create_chain+0x88>
 800b74e:	2300      	movs	r3, #0
 800b750:	e04f      	b.n	800b7f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b752:	69f9      	ldr	r1, [r7, #28]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff fd6c 	bl	800b232 <get_fat>
 800b75a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00e      	beq.n	800b780 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d003      	beq.n	800b770 <create_chain+0xa6>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d101      	bne.n	800b774 <create_chain+0xaa>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	e03e      	b.n	800b7f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b774:	69fa      	ldr	r2, [r7, #28]
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d1da      	bne.n	800b732 <create_chain+0x68>
 800b77c:	2300      	movs	r3, #0
 800b77e:	e038      	b.n	800b7f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b780:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b782:	f04f 32ff 	mov.w	r2, #4294967295
 800b786:	69f9      	ldr	r1, [r7, #28]
 800b788:	6938      	ldr	r0, [r7, #16]
 800b78a:	f7ff fe22 	bl	800b3d2 <put_fat>
 800b78e:	4603      	mov	r3, r0
 800b790:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d109      	bne.n	800b7ac <create_chain+0xe2>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d006      	beq.n	800b7ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6938      	ldr	r0, [r7, #16]
 800b7a4:	f7ff fe15 	bl	800b3d2 <put_fat>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d116      	bne.n	800b7e0 <create_chain+0x116>
		fs->last_clst = ncl;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	69fa      	ldr	r2, [r7, #28]
 800b7b6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	695a      	ldr	r2, [r3, #20]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	3b02      	subs	r3, #2
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d804      	bhi.n	800b7d0 <create_chain+0x106>
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	1e5a      	subs	r2, r3, #1
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	791b      	ldrb	r3, [r3, #4]
 800b7d4:	f043 0301 	orr.w	r3, r3, #1
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	711a      	strb	r2, [r3, #4]
 800b7de:	e007      	b.n	800b7f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d102      	bne.n	800b7ec <create_chain+0x122>
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ea:	e000      	b.n	800b7ee <create_chain+0x124>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b7f0:	69fb      	ldr	r3, [r7, #28]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80e:	3304      	adds	r3, #4
 800b810:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	899b      	ldrh	r3, [r3, #12]
 800b816:	461a      	mov	r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	8952      	ldrh	r2, [r2, #10]
 800b822:	fbb3 f3f2 	udiv	r3, r3, r2
 800b826:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	1d1a      	adds	r2, r3, #4
 800b82c:	613a      	str	r2, [r7, #16]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <clmt_clust+0x42>
 800b838:	2300      	movs	r3, #0
 800b83a:	e010      	b.n	800b85e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b83c:	697a      	ldr	r2, [r7, #20]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	429a      	cmp	r2, r3
 800b842:	d307      	bcc.n	800b854 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	3304      	adds	r3, #4
 800b850:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b852:	e7e9      	b.n	800b828 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b854:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	4413      	add	r3, r2
}
 800b85e:	4618      	mov	r0, r3
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b086      	sub	sp, #24
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b880:	d204      	bcs.n	800b88c <dir_sdi+0x22>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	f003 031f 	and.w	r3, r3, #31
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b88c:	2302      	movs	r3, #2
 800b88e:	e071      	b.n	800b974 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d106      	bne.n	800b8b0 <dir_sdi+0x46>
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d902      	bls.n	800b8b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10c      	bne.n	800b8d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	095b      	lsrs	r3, r3, #5
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	8912      	ldrh	r2, [r2, #8]
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d301      	bcc.n	800b8c6 <dir_sdi+0x5c>
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	e056      	b.n	800b974 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	61da      	str	r2, [r3, #28]
 800b8ce:	e02d      	b.n	800b92c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	895b      	ldrh	r3, [r3, #10]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	899b      	ldrh	r3, [r3, #12]
 800b8da:	fb03 f302 	mul.w	r3, r3, r2
 800b8de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8e0:	e019      	b.n	800b916 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6979      	ldr	r1, [r7, #20]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fca3 	bl	800b232 <get_fat>
 800b8ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d101      	bne.n	800b8fa <dir_sdi+0x90>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e03c      	b.n	800b974 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d904      	bls.n	800b90a <dir_sdi+0xa0>
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	429a      	cmp	r2, r3
 800b908:	d301      	bcc.n	800b90e <dir_sdi+0xa4>
 800b90a:	2302      	movs	r3, #2
 800b90c:	e032      	b.n	800b974 <dir_sdi+0x10a>
			ofs -= csz;
 800b90e:	683a      	ldr	r2, [r7, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d2e1      	bcs.n	800b8e2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b91e:	6979      	ldr	r1, [r7, #20]
 800b920:	6938      	ldr	r0, [r7, #16]
 800b922:	f7ff fc67 	bl	800b1f4 <clust2sect>
 800b926:	4602      	mov	r2, r0
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <dir_sdi+0xd4>
 800b93a:	2302      	movs	r3, #2
 800b93c:	e01a      	b.n	800b974 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	69da      	ldr	r2, [r3, #28]
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	899b      	ldrh	r3, [r3, #12]
 800b946:	4619      	mov	r1, r3
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b94e:	441a      	add	r2, r3
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	899b      	ldrh	r3, [r3, #12]
 800b95e:	461a      	mov	r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	fbb3 f0f2 	udiv	r0, r3, r2
 800b966:	fb02 f200 	mul.w	r2, r2, r0
 800b96a:	1a9b      	subs	r3, r3, r2
 800b96c:	18ca      	adds	r2, r1, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	3320      	adds	r3, #32
 800b992:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <dir_next+0x28>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9a2:	d301      	bcc.n	800b9a8 <dir_next+0x2c>
 800b9a4:	2304      	movs	r3, #4
 800b9a6:	e0bb      	b.n	800bb20 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	899b      	ldrh	r3, [r3, #12]
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9b4:	fb02 f201 	mul.w	r2, r2, r1
 800b9b8:	1a9b      	subs	r3, r3, r2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f040 809d 	bne.w	800bafa <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10b      	bne.n	800b9ea <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	095b      	lsrs	r3, r3, #5
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	8912      	ldrh	r2, [r2, #8]
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	f0c0 808d 	bcc.w	800bafa <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	61da      	str	r2, [r3, #28]
 800b9e6:	2304      	movs	r3, #4
 800b9e8:	e09a      	b.n	800bb20 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	899b      	ldrh	r3, [r3, #12]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	8952      	ldrh	r2, [r2, #10]
 800b9fa:	3a01      	subs	r2, #1
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d17b      	bne.n	800bafa <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	f7ff fc11 	bl	800b232 <get_fat>
 800ba10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d801      	bhi.n	800ba1c <dir_next+0xa0>
 800ba18:	2302      	movs	r3, #2
 800ba1a:	e081      	b.n	800bb20 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba22:	d101      	bne.n	800ba28 <dir_next+0xac>
 800ba24:	2301      	movs	r3, #1
 800ba26:	e07b      	b.n	800bb20 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d359      	bcc.n	800bae6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d104      	bne.n	800ba42 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	61da      	str	r2, [r3, #28]
 800ba3e:	2304      	movs	r3, #4
 800ba40:	e06e      	b.n	800bb20 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f7ff fe3d 	bl	800b6ca <create_chain>
 800ba50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <dir_next+0xe0>
 800ba58:	2307      	movs	r3, #7
 800ba5a:	e061      	b.n	800bb20 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <dir_next+0xea>
 800ba62:	2302      	movs	r3, #2
 800ba64:	e05c      	b.n	800bb20 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6c:	d101      	bne.n	800ba72 <dir_next+0xf6>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e056      	b.n	800bb20 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff fadc 	bl	800b030 <sync_window>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <dir_next+0x106>
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e04e      	b.n	800bb20 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	899b      	ldrh	r3, [r3, #12]
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	2100      	movs	r1, #0
 800ba90:	f7ff f905 	bl	800ac9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba94:	2300      	movs	r3, #0
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	6979      	ldr	r1, [r7, #20]
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fbaa 	bl	800b1f4 <clust2sect>
 800baa0:	4602      	mov	r2, r0
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	631a      	str	r2, [r3, #48]	; 0x30
 800baa6:	e012      	b.n	800bace <dir_next+0x152>
						fs->wflag = 1;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2201      	movs	r2, #1
 800baac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff fabe 	bl	800b030 <sync_window>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <dir_next+0x142>
 800baba:	2301      	movs	r3, #1
 800babc:	e030      	b.n	800bb20 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3301      	adds	r3, #1
 800bac2:	613b      	str	r3, [r7, #16]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	631a      	str	r2, [r3, #48]	; 0x30
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	895b      	ldrh	r3, [r3, #10]
 800bad2:	461a      	mov	r2, r3
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d3e6      	bcc.n	800baa8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	1ad2      	subs	r2, r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800baec:	6979      	ldr	r1, [r7, #20]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f7ff fb80 	bl	800b1f4 <clust2sect>
 800baf4:	4602      	mov	r2, r0
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	899b      	ldrh	r3, [r3, #12]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb12:	fb02 f200 	mul.w	r2, r2, r0
 800bb16:	1a9b      	subs	r3, r3, r2
 800bb18:	18ca      	adds	r2, r1, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3718      	adds	r7, #24
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb38:	2100      	movs	r1, #0
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff fe95 	bl	800b86a <dir_sdi>
 800bb40:	4603      	mov	r3, r0
 800bb42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d12b      	bne.n	800bba2 <dir_alloc+0x7a>
		n = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	4619      	mov	r1, r3
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff faaf 	bl	800b0b8 <move_window>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d11d      	bne.n	800bba0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a1b      	ldr	r3, [r3, #32]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2be5      	cmp	r3, #229	; 0xe5
 800bb6c:	d004      	beq.n	800bb78 <dir_alloc+0x50>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	613b      	str	r3, [r7, #16]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d102      	bne.n	800bb8c <dir_alloc+0x64>
 800bb86:	e00c      	b.n	800bba2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bb88:	2300      	movs	r3, #0
 800bb8a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7ff fef4 	bl	800b97c <dir_next>
 800bb94:	4603      	mov	r3, r0
 800bb96:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bb98:	7dfb      	ldrb	r3, [r7, #23]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d0d7      	beq.n	800bb4e <dir_alloc+0x26>
 800bb9e:	e000      	b.n	800bba2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bba0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	d101      	bne.n	800bbac <dir_alloc+0x84>
 800bba8:	2307      	movs	r3, #7
 800bbaa:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b084      	sub	sp, #16
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	331a      	adds	r3, #26
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fe ffc7 	bl	800ab58 <ld_word>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	d109      	bne.n	800bbea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	3314      	adds	r3, #20
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fe ffbc 	bl	800ab58 <ld_word>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	041b      	lsls	r3, r3, #16
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bbea:	68fb      	ldr	r3, [r7, #12]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	331a      	adds	r3, #26
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	b292      	uxth	r2, r2
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fe ffdf 	bl	800abce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d109      	bne.n	800bc2c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f103 0214 	add.w	r2, r3, #20
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	0c1b      	lsrs	r3, r3, #16
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f7fe ffd1 	bl	800abce <st_word>
	}
}
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bc3e:	2304      	movs	r3, #4
 800bc40:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800bc48:	e03c      	b.n	800bcc4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6938      	ldr	r0, [r7, #16]
 800bc52:	f7ff fa31 	bl	800b0b8 <move_window>
 800bc56:	4603      	mov	r3, r0
 800bc58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d136      	bne.n	800bcce <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bc6e:	2304      	movs	r3, #4
 800bc70:	75fb      	strb	r3, [r7, #23]
 800bc72:	e031      	b.n	800bcd8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	330b      	adds	r3, #11
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc80:	73bb      	strb	r3, [r7, #14]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	7bba      	ldrb	r2, [r7, #14]
 800bc86:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	2be5      	cmp	r3, #229	; 0xe5
 800bc8c:	d011      	beq.n	800bcb2 <dir_read+0x7e>
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	2b2e      	cmp	r3, #46	; 0x2e
 800bc92:	d00e      	beq.n	800bcb2 <dir_read+0x7e>
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	2b0f      	cmp	r3, #15
 800bc98:	d00b      	beq.n	800bcb2 <dir_read+0x7e>
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
 800bc9c:	f023 0320 	bic.w	r3, r3, #32
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	bf0c      	ite	eq
 800bca4:	2301      	moveq	r3, #1
 800bca6:	2300      	movne	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	461a      	mov	r2, r3
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d00f      	beq.n	800bcd2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff fe61 	bl	800b97c <dir_next>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d108      	bne.n	800bcd6 <dir_read+0xa2>
	while (dp->sect) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	69db      	ldr	r3, [r3, #28]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1be      	bne.n	800bc4a <dir_read+0x16>
 800bccc:	e004      	b.n	800bcd8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800bcce:	bf00      	nop
 800bcd0:	e002      	b.n	800bcd8 <dir_read+0xa4>
				break;
 800bcd2:	bf00      	nop
 800bcd4:	e000      	b.n	800bcd8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800bcd6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <dir_read+0xb0>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	61da      	str	r2, [r3, #28]
	return res;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b086      	sub	sp, #24
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff fdb3 	bl	800b86a <dir_sdi>
 800bd04:	4603      	mov	r3, r0
 800bd06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <dir_find+0x24>
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
 800bd10:	e03e      	b.n	800bd90 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	4619      	mov	r1, r3
 800bd18:	6938      	ldr	r0, [r7, #16]
 800bd1a:	f7ff f9cd 	bl	800b0b8 <move_window>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d12f      	bne.n	800bd88 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6a1b      	ldr	r3, [r3, #32]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bd30:	7bfb      	ldrb	r3, [r7, #15]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d102      	bne.n	800bd3c <dir_find+0x4e>
 800bd36:	2304      	movs	r3, #4
 800bd38:	75fb      	strb	r3, [r7, #23]
 800bd3a:	e028      	b.n	800bd8e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	330b      	adds	r3, #11
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	330b      	adds	r3, #11
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10a      	bne.n	800bd74 <dir_find+0x86>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a18      	ldr	r0, [r3, #32]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3324      	adds	r3, #36	; 0x24
 800bd66:	220b      	movs	r2, #11
 800bd68:	4619      	mov	r1, r3
 800bd6a:	f7fe ffb2 	bl	800acd2 <mem_cmp>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bd74:	2100      	movs	r1, #0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff fe00 	bl	800b97c <dir_next>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0c5      	beq.n	800bd12 <dir_find+0x24>
 800bd86:	e002      	b.n	800bd8e <dir_find+0xa0>
		if (res != FR_OK) break;
 800bd88:	bf00      	nop
 800bd8a:	e000      	b.n	800bd8e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bd8c:	bf00      	nop

	return res;
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bda6:	2101      	movs	r1, #1
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7ff febd 	bl	800bb28 <dir_alloc>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d11c      	bne.n	800bdf2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	68b8      	ldr	r0, [r7, #8]
 800bdc0:	f7ff f97a 	bl	800b0b8 <move_window>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bdc8:	7bfb      	ldrb	r3, [r7, #15]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d111      	bne.n	800bdf2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a1b      	ldr	r3, [r3, #32]
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fe ff61 	bl	800ac9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a18      	ldr	r0, [r3, #32]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3324      	adds	r3, #36	; 0x24
 800bde4:	220b      	movs	r2, #11
 800bde6:	4619      	mov	r1, r3
 800bde8:	f7fe ff38 	bl	800ac5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	4619      	mov	r1, r3
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7ff f951 	bl	800b0b8 <move_window>
 800be16:	4603      	mov	r3, r0
 800be18:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800be1a:	7afb      	ldrb	r3, [r7, #11]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d106      	bne.n	800be2e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	22e5      	movs	r2, #229	; 0xe5
 800be26:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2201      	movs	r2, #1
 800be2c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800be2e:	7afb      	ldrb	r3, [r7, #11]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3710      	adds	r7, #16
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3324      	adds	r3, #36	; 0x24
 800be4c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800be4e:	220b      	movs	r2, #11
 800be50:	2120      	movs	r1, #32
 800be52:	68b8      	ldr	r0, [r7, #8]
 800be54:	f7fe ff23 	bl	800ac9e <mem_set>
	si = i = 0; ni = 8;
 800be58:	2300      	movs	r3, #0
 800be5a:	613b      	str	r3, [r7, #16]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	2308      	movs	r3, #8
 800be62:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	617a      	str	r2, [r7, #20]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be72:	7ffb      	ldrb	r3, [r7, #31]
 800be74:	2b20      	cmp	r3, #32
 800be76:	d94e      	bls.n	800bf16 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800be78:	7ffb      	ldrb	r3, [r7, #31]
 800be7a:	2b2f      	cmp	r3, #47	; 0x2f
 800be7c:	d006      	beq.n	800be8c <create_name+0x54>
 800be7e:	7ffb      	ldrb	r3, [r7, #31]
 800be80:	2b5c      	cmp	r3, #92	; 0x5c
 800be82:	d110      	bne.n	800bea6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be84:	e002      	b.n	800be8c <create_name+0x54>
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	3301      	adds	r3, #1
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	4413      	add	r3, r2
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b2f      	cmp	r3, #47	; 0x2f
 800be96:	d0f6      	beq.n	800be86 <create_name+0x4e>
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	4413      	add	r3, r2
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b5c      	cmp	r3, #92	; 0x5c
 800bea2:	d0f0      	beq.n	800be86 <create_name+0x4e>
			break;
 800bea4:	e038      	b.n	800bf18 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bea6:	7ffb      	ldrb	r3, [r7, #31]
 800bea8:	2b2e      	cmp	r3, #46	; 0x2e
 800beaa:	d003      	beq.n	800beb4 <create_name+0x7c>
 800beac:	693a      	ldr	r2, [r7, #16]
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d30c      	bcc.n	800bece <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	2b0b      	cmp	r3, #11
 800beb8:	d002      	beq.n	800bec0 <create_name+0x88>
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	2b2e      	cmp	r3, #46	; 0x2e
 800bebe:	d001      	beq.n	800bec4 <create_name+0x8c>
 800bec0:	2306      	movs	r3, #6
 800bec2:	e044      	b.n	800bf4e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bec4:	2308      	movs	r3, #8
 800bec6:	613b      	str	r3, [r7, #16]
 800bec8:	230b      	movs	r3, #11
 800beca:	61bb      	str	r3, [r7, #24]
			continue;
 800becc:	e022      	b.n	800bf14 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bece:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	da04      	bge.n	800bee0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bed6:	7ffb      	ldrb	r3, [r7, #31]
 800bed8:	3b80      	subs	r3, #128	; 0x80
 800beda:	4a1f      	ldr	r2, [pc, #124]	; (800bf58 <create_name+0x120>)
 800bedc:	5cd3      	ldrb	r3, [r2, r3]
 800bede:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bee0:	7ffb      	ldrb	r3, [r7, #31]
 800bee2:	4619      	mov	r1, r3
 800bee4:	481d      	ldr	r0, [pc, #116]	; (800bf5c <create_name+0x124>)
 800bee6:	f7fe ff1b 	bl	800ad20 <chk_chr>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <create_name+0xbc>
 800bef0:	2306      	movs	r3, #6
 800bef2:	e02c      	b.n	800bf4e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bef4:	7ffb      	ldrb	r3, [r7, #31]
 800bef6:	2b60      	cmp	r3, #96	; 0x60
 800bef8:	d905      	bls.n	800bf06 <create_name+0xce>
 800befa:	7ffb      	ldrb	r3, [r7, #31]
 800befc:	2b7a      	cmp	r3, #122	; 0x7a
 800befe:	d802      	bhi.n	800bf06 <create_name+0xce>
 800bf00:	7ffb      	ldrb	r3, [r7, #31]
 800bf02:	3b20      	subs	r3, #32
 800bf04:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	613a      	str	r2, [r7, #16]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	4413      	add	r3, r2
 800bf10:	7ffa      	ldrb	r2, [r7, #31]
 800bf12:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bf14:	e7a6      	b.n	800be64 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bf16:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	441a      	add	r2, r3
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <create_name+0xf4>
 800bf28:	2306      	movs	r3, #6
 800bf2a:	e010      	b.n	800bf4e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	2be5      	cmp	r3, #229	; 0xe5
 800bf32:	d102      	bne.n	800bf3a <create_name+0x102>
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	2205      	movs	r2, #5
 800bf38:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf3a:	7ffb      	ldrb	r3, [r7, #31]
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d801      	bhi.n	800bf44 <create_name+0x10c>
 800bf40:	2204      	movs	r2, #4
 800bf42:	e000      	b.n	800bf46 <create_name+0x10e>
 800bf44:	2200      	movs	r2, #0
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	330b      	adds	r3, #11
 800bf4a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bf4c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3720      	adds	r7, #32
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	0801125c 	.word	0x0801125c
 800bf5c:	080111ac 	.word	0x080111ac

0800bf60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bf74:	e002      	b.n	800bf7c <follow_path+0x1c>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	603b      	str	r3, [r7, #0]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b2f      	cmp	r3, #47	; 0x2f
 800bf82:	d0f8      	beq.n	800bf76 <follow_path+0x16>
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	2b5c      	cmp	r3, #92	; 0x5c
 800bf8a:	d0f4      	beq.n	800bf76 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b1f      	cmp	r3, #31
 800bf98:	d80a      	bhi.n	800bfb0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2280      	movs	r2, #128	; 0x80
 800bf9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f7ff fc60 	bl	800b86a <dir_sdi>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	75fb      	strb	r3, [r7, #23]
 800bfae:	e048      	b.n	800c042 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bfb0:	463b      	mov	r3, r7
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff ff3f 	bl	800be38 <create_name>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d139      	bne.n	800c038 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff fe92 	bl	800bcee <dir_find>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfd4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00a      	beq.n	800bff2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	2b04      	cmp	r3, #4
 800bfe0:	d12c      	bne.n	800c03c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bfe2:	7afb      	ldrb	r3, [r7, #11]
 800bfe4:	f003 0304 	and.w	r3, r3, #4
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d127      	bne.n	800c03c <follow_path+0xdc>
 800bfec:	2305      	movs	r3, #5
 800bfee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bff0:	e024      	b.n	800c03c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d121      	bne.n	800c040 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	799b      	ldrb	r3, [r3, #6]
 800c000:	f003 0310 	and.w	r3, r3, #16
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c008:	2305      	movs	r3, #5
 800c00a:	75fb      	strb	r3, [r7, #23]
 800c00c:	e019      	b.n	800c042 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	695b      	ldr	r3, [r3, #20]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	8992      	ldrh	r2, [r2, #12]
 800c01c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c020:	fb02 f200 	mul.w	r2, r2, r0
 800c024:	1a9b      	subs	r3, r3, r2
 800c026:	440b      	add	r3, r1
 800c028:	4619      	mov	r1, r3
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff fdc3 	bl	800bbb6 <ld_clust>
 800c030:	4602      	mov	r2, r0
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c036:	e7bb      	b.n	800bfb0 <follow_path+0x50>
			if (res != FR_OK) break;
 800c038:	bf00      	nop
 800c03a:	e002      	b.n	800c042 <follow_path+0xe2>
				break;
 800c03c:	bf00      	nop
 800c03e:	e000      	b.n	800c042 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c040:	bf00      	nop
			}
		}
	}

	return res;
 800c042:	7dfb      	ldrb	r3, [r7, #23]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3718      	adds	r7, #24
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b087      	sub	sp, #28
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c054:	f04f 33ff 	mov.w	r3, #4294967295
 800c058:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d031      	beq.n	800c0c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	617b      	str	r3, [r7, #20]
 800c068:	e002      	b.n	800c070 <get_ldnumber+0x24>
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	3301      	adds	r3, #1
 800c06e:	617b      	str	r3, [r7, #20]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b20      	cmp	r3, #32
 800c076:	d903      	bls.n	800c080 <get_ldnumber+0x34>
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b3a      	cmp	r3, #58	; 0x3a
 800c07e:	d1f4      	bne.n	800c06a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2b3a      	cmp	r3, #58	; 0x3a
 800c086:	d11c      	bne.n	800c0c2 <get_ldnumber+0x76>
			tp = *path;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	60fa      	str	r2, [r7, #12]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	3b30      	subs	r3, #48	; 0x30
 800c098:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b09      	cmp	r3, #9
 800c09e:	d80e      	bhi.n	800c0be <get_ldnumber+0x72>
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d10a      	bne.n	800c0be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d107      	bne.n	800c0be <get_ldnumber+0x72>
					vol = (int)i;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	e002      	b.n	800c0c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c0c6:	693b      	ldr	r3, [r7, #16]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	70da      	strb	r2, [r3, #3]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ea:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7fe ffe2 	bl	800b0b8 <move_window>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <check_fs+0x2a>
 800c0fa:	2304      	movs	r3, #4
 800c0fc:	e038      	b.n	800c170 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	3334      	adds	r3, #52	; 0x34
 800c102:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fd26 	bl	800ab58 <ld_word>
 800c10c:	4603      	mov	r3, r0
 800c10e:	461a      	mov	r2, r3
 800c110:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c114:	429a      	cmp	r2, r3
 800c116:	d001      	beq.n	800c11c <check_fs+0x48>
 800c118:	2303      	movs	r3, #3
 800c11a:	e029      	b.n	800c170 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c122:	2be9      	cmp	r3, #233	; 0xe9
 800c124:	d009      	beq.n	800c13a <check_fs+0x66>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c12c:	2beb      	cmp	r3, #235	; 0xeb
 800c12e:	d11e      	bne.n	800c16e <check_fs+0x9a>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c136:	2b90      	cmp	r3, #144	; 0x90
 800c138:	d119      	bne.n	800c16e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	3334      	adds	r3, #52	; 0x34
 800c13e:	3336      	adds	r3, #54	; 0x36
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fd21 	bl	800ab88 <ld_dword>
 800c146:	4603      	mov	r3, r0
 800c148:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c14c:	4a0a      	ldr	r2, [pc, #40]	; (800c178 <check_fs+0xa4>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d101      	bne.n	800c156 <check_fs+0x82>
 800c152:	2300      	movs	r3, #0
 800c154:	e00c      	b.n	800c170 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	3334      	adds	r3, #52	; 0x34
 800c15a:	3352      	adds	r3, #82	; 0x52
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fe fd13 	bl	800ab88 <ld_dword>
 800c162:	4602      	mov	r2, r0
 800c164:	4b05      	ldr	r3, [pc, #20]	; (800c17c <check_fs+0xa8>)
 800c166:	429a      	cmp	r2, r3
 800c168:	d101      	bne.n	800c16e <check_fs+0x9a>
 800c16a:	2300      	movs	r3, #0
 800c16c:	e000      	b.n	800c170 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c16e:	2302      	movs	r3, #2
}
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	00544146 	.word	0x00544146
 800c17c:	33544146 	.word	0x33544146

0800c180 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b096      	sub	sp, #88	; 0x58
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	4613      	mov	r3, r2
 800c18c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2200      	movs	r2, #0
 800c192:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff ff59 	bl	800c04c <get_ldnumber>
 800c19a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	da01      	bge.n	800c1a6 <find_volume+0x26>
 800c1a2:	230b      	movs	r3, #11
 800c1a4:	e265      	b.n	800c672 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c1a6:	4ab0      	ldr	r2, [pc, #704]	; (800c468 <find_volume+0x2e8>)
 800c1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <find_volume+0x3a>
 800c1b6:	230c      	movs	r3, #12
 800c1b8:	e25b      	b.n	800c672 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	f023 0301 	bic.w	r3, r3, #1
 800c1c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01a      	beq.n	800c206 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	785b      	ldrb	r3, [r3, #1]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fc21 	bl	800aa1c <disk_status>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10c      	bne.n	800c206 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d007      	beq.n	800c202 <find_volume+0x82>
 800c1f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1f6:	f003 0304 	and.w	r3, r3, #4
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d001      	beq.n	800c202 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c1fe:	230a      	movs	r3, #10
 800c200:	e237      	b.n	800c672 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c202:	2300      	movs	r3, #0
 800c204:	e235      	b.n	800c672 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	785b      	ldrb	r3, [r3, #1]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fe fc19 	bl	800aa50 <disk_initialize>
 800c21e:	4603      	mov	r3, r0
 800c220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c230:	2303      	movs	r3, #3
 800c232:	e21e      	b.n	800c672 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c234:	79fb      	ldrb	r3, [r7, #7]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d007      	beq.n	800c24a <find_volume+0xca>
 800c23a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c23e:	f003 0304 	and.w	r3, r3, #4
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c246:	230a      	movs	r3, #10
 800c248:	e213      	b.n	800c672 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	7858      	ldrb	r0, [r3, #1]
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	330c      	adds	r3, #12
 800c252:	461a      	mov	r2, r3
 800c254:	2102      	movs	r1, #2
 800c256:	f7fe fc61 	bl	800ab1c <disk_ioctl>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <find_volume+0xe4>
 800c260:	2301      	movs	r3, #1
 800c262:	e206      	b.n	800c672 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	899b      	ldrh	r3, [r3, #12]
 800c268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c26c:	d80d      	bhi.n	800c28a <find_volume+0x10a>
 800c26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c270:	899b      	ldrh	r3, [r3, #12]
 800c272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c276:	d308      	bcc.n	800c28a <find_volume+0x10a>
 800c278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27a:	899b      	ldrh	r3, [r3, #12]
 800c27c:	461a      	mov	r2, r3
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	899b      	ldrh	r3, [r3, #12]
 800c282:	3b01      	subs	r3, #1
 800c284:	4013      	ands	r3, r2
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <find_volume+0x10e>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e1f1      	b.n	800c672 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c296:	f7ff ff1d 	bl	800c0d4 <check_fs>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c2a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d14b      	bne.n	800c340 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	643b      	str	r3, [r7, #64]	; 0x40
 800c2ac:	e01f      	b.n	800c2ee <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c2bc:	4413      	add	r3, r2
 800c2be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d006      	beq.n	800c2d8 <find_volume+0x158>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fc5a 	bl	800ab88 <ld_dword>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	e000      	b.n	800c2da <find_volume+0x15a>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c2e2:	440b      	add	r3, r1
 800c2e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800c2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d9dc      	bls.n	800c2ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <find_volume+0x184>
 800c2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c300:	3b01      	subs	r3, #1
 800c302:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c30c:	4413      	add	r3, r2
 800c30e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c312:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c316:	2b00      	cmp	r3, #0
 800c318:	d005      	beq.n	800c326 <find_volume+0x1a6>
 800c31a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c31c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c31e:	f7ff fed9 	bl	800c0d4 <check_fs>
 800c322:	4603      	mov	r3, r0
 800c324:	e000      	b.n	800c328 <find_volume+0x1a8>
 800c326:	2303      	movs	r3, #3
 800c328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c330:	2b01      	cmp	r3, #1
 800c332:	d905      	bls.n	800c340 <find_volume+0x1c0>
 800c334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c336:	3301      	adds	r3, #1
 800c338:	643b      	str	r3, [r7, #64]	; 0x40
 800c33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d9e1      	bls.n	800c304 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c344:	2b04      	cmp	r3, #4
 800c346:	d101      	bne.n	800c34c <find_volume+0x1cc>
 800c348:	2301      	movs	r3, #1
 800c34a:	e192      	b.n	800c672 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c350:	2b01      	cmp	r3, #1
 800c352:	d901      	bls.n	800c358 <find_volume+0x1d8>
 800c354:	230d      	movs	r3, #13
 800c356:	e18c      	b.n	800c672 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	3334      	adds	r3, #52	; 0x34
 800c35c:	330b      	adds	r3, #11
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fbfa 	bl	800ab58 <ld_word>
 800c364:	4603      	mov	r3, r0
 800c366:	461a      	mov	r2, r3
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	899b      	ldrh	r3, [r3, #12]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d001      	beq.n	800c374 <find_volume+0x1f4>
 800c370:	230d      	movs	r3, #13
 800c372:	e17e      	b.n	800c672 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	3334      	adds	r3, #52	; 0x34
 800c378:	3316      	adds	r3, #22
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fe fbec 	bl	800ab58 <ld_word>
 800c380:	4603      	mov	r3, r0
 800c382:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c386:	2b00      	cmp	r3, #0
 800c388:	d106      	bne.n	800c398 <find_volume+0x218>
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	3334      	adds	r3, #52	; 0x34
 800c38e:	3324      	adds	r3, #36	; 0x24
 800c390:	4618      	mov	r0, r3
 800c392:	f7fe fbf9 	bl	800ab88 <ld_dword>
 800c396:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c39c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	789b      	ldrb	r3, [r3, #2]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d005      	beq.n	800c3bc <find_volume+0x23c>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	789b      	ldrb	r3, [r3, #2]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d001      	beq.n	800c3bc <find_volume+0x23c>
 800c3b8:	230d      	movs	r3, #13
 800c3ba:	e15a      	b.n	800c672 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3be:	789b      	ldrb	r3, [r3, #2]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c4:	fb02 f303 	mul.w	r3, r2, r3
 800c3c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	895b      	ldrh	r3, [r3, #10]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d008      	beq.n	800c3f0 <find_volume+0x270>
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	895b      	ldrh	r3, [r3, #10]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	895b      	ldrh	r3, [r3, #10]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <find_volume+0x274>
 800c3f0:	230d      	movs	r3, #13
 800c3f2:	e13e      	b.n	800c672 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	3334      	adds	r3, #52	; 0x34
 800c3f8:	3311      	adds	r3, #17
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fbac 	bl	800ab58 <ld_word>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	891b      	ldrh	r3, [r3, #8]
 800c40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c40e:	8992      	ldrh	r2, [r2, #12]
 800c410:	0952      	lsrs	r2, r2, #5
 800c412:	b292      	uxth	r2, r2
 800c414:	fbb3 f1f2 	udiv	r1, r3, r2
 800c418:	fb02 f201 	mul.w	r2, r2, r1
 800c41c:	1a9b      	subs	r3, r3, r2
 800c41e:	b29b      	uxth	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <find_volume+0x2a8>
 800c424:	230d      	movs	r3, #13
 800c426:	e124      	b.n	800c672 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	3334      	adds	r3, #52	; 0x34
 800c42c:	3313      	adds	r3, #19
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe fb92 	bl	800ab58 <ld_word>
 800c434:	4603      	mov	r3, r0
 800c436:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <find_volume+0x2cc>
 800c43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c440:	3334      	adds	r3, #52	; 0x34
 800c442:	3320      	adds	r3, #32
 800c444:	4618      	mov	r0, r3
 800c446:	f7fe fb9f 	bl	800ab88 <ld_dword>
 800c44a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44e:	3334      	adds	r3, #52	; 0x34
 800c450:	330e      	adds	r3, #14
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fb80 	bl	800ab58 <ld_word>
 800c458:	4603      	mov	r3, r0
 800c45a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c45c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d104      	bne.n	800c46c <find_volume+0x2ec>
 800c462:	230d      	movs	r3, #13
 800c464:	e105      	b.n	800c672 <find_volume+0x4f2>
 800c466:	bf00      	nop
 800c468:	20000670 	.word	0x20000670

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c46c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c470:	4413      	add	r3, r2
 800c472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c474:	8911      	ldrh	r1, [r2, #8]
 800c476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c478:	8992      	ldrh	r2, [r2, #12]
 800c47a:	0952      	lsrs	r2, r2, #5
 800c47c:	b292      	uxth	r2, r2
 800c47e:	fbb1 f2f2 	udiv	r2, r1, r2
 800c482:	b292      	uxth	r2, r2
 800c484:	4413      	add	r3, r2
 800c486:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c488:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d201      	bcs.n	800c494 <find_volume+0x314>
 800c490:	230d      	movs	r3, #13
 800c492:	e0ee      	b.n	800c672 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c49c:	8952      	ldrh	r2, [r2, #10]
 800c49e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <find_volume+0x32e>
 800c4aa:	230d      	movs	r3, #13
 800c4ac:	e0e1      	b.n	800c672 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d802      	bhi.n	800c4c4 <find_volume+0x344>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d802      	bhi.n	800c4d4 <find_volume+0x354>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	1c9a      	adds	r2, r3, #2
 800c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4da:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4e0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c4e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4e6:	441a      	add	r2, r3
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c4ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f0:	441a      	add	r2, r3
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c4f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d11e      	bne.n	800c53c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	3334      	adds	r3, #52	; 0x34
 800c502:	332a      	adds	r3, #42	; 0x2a
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fb27 	bl	800ab58 <ld_word>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <find_volume+0x394>
 800c510:	230d      	movs	r3, #13
 800c512:	e0ae      	b.n	800c672 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c516:	891b      	ldrh	r3, [r3, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <find_volume+0x3a0>
 800c51c:	230d      	movs	r3, #13
 800c51e:	e0a8      	b.n	800c672 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	3334      	adds	r3, #52	; 0x34
 800c524:	332c      	adds	r3, #44	; 0x2c
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe fb2e 	bl	800ab88 <ld_dword>
 800c52c:	4602      	mov	r2, r0
 800c52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c530:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	647b      	str	r3, [r7, #68]	; 0x44
 800c53a:	e01f      	b.n	800c57c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	891b      	ldrh	r3, [r3, #8]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <find_volume+0x3c8>
 800c544:	230d      	movs	r3, #13
 800c546:	e094      	b.n	800c672 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c54e:	441a      	add	r2, r3
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d103      	bne.n	800c564 <find_volume+0x3e4>
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	e00a      	b.n	800c57a <find_volume+0x3fa>
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	699a      	ldr	r2, [r3, #24]
 800c568:	4613      	mov	r3, r2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	4413      	add	r3, r2
 800c56e:	085a      	lsrs	r2, r3, #1
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	699b      	ldr	r3, [r3, #24]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c57a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57e:	69da      	ldr	r2, [r3, #28]
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	899b      	ldrh	r3, [r3, #12]
 800c584:	4619      	mov	r1, r3
 800c586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c588:	440b      	add	r3, r1
 800c58a:	3b01      	subs	r3, #1
 800c58c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c58e:	8989      	ldrh	r1, [r1, #12]
 800c590:	fbb3 f3f1 	udiv	r3, r3, r1
 800c594:	429a      	cmp	r2, r3
 800c596:	d201      	bcs.n	800c59c <find_volume+0x41c>
 800c598:	230d      	movs	r3, #13
 800c59a:	e06a      	b.n	800c672 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59e:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a2:	615a      	str	r2, [r3, #20]
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	695a      	ldr	r2, [r3, #20]
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	2280      	movs	r2, #128	; 0x80
 800c5b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c5b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d149      	bne.n	800c64e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5bc:	3334      	adds	r3, #52	; 0x34
 800c5be:	3330      	adds	r3, #48	; 0x30
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fe fac9 	bl	800ab58 <ld_word>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d140      	bne.n	800c64e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5d4:	f7fe fd70 	bl	800b0b8 <move_window>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d137      	bne.n	800c64e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e6:	3334      	adds	r3, #52	; 0x34
 800c5e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fe fab3 	bl	800ab58 <ld_word>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d127      	bne.n	800c64e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c600:	3334      	adds	r3, #52	; 0x34
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fac0 	bl	800ab88 <ld_dword>
 800c608:	4602      	mov	r2, r0
 800c60a:	4b1c      	ldr	r3, [pc, #112]	; (800c67c <find_volume+0x4fc>)
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d11e      	bne.n	800c64e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	3334      	adds	r3, #52	; 0x34
 800c614:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fab5 	bl	800ab88 <ld_dword>
 800c61e:	4602      	mov	r2, r0
 800c620:	4b17      	ldr	r3, [pc, #92]	; (800c680 <find_volume+0x500>)
 800c622:	429a      	cmp	r2, r3
 800c624:	d113      	bne.n	800c64e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	3334      	adds	r3, #52	; 0x34
 800c62a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fe faaa 	bl	800ab88 <ld_dword>
 800c634:	4602      	mov	r2, r0
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	3334      	adds	r3, #52	; 0x34
 800c63e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe faa0 	bl	800ab88 <ld_dword>
 800c648:	4602      	mov	r2, r0
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c654:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <find_volume+0x504>)
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	4b09      	ldr	r3, [pc, #36]	; (800c684 <find_volume+0x504>)
 800c660:	801a      	strh	r2, [r3, #0]
 800c662:	4b08      	ldr	r3, [pc, #32]	; (800c684 <find_volume+0x504>)
 800c664:	881a      	ldrh	r2, [r3, #0]
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c66a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c66c:	f7fe fcbc 	bl	800afe8 <clear_lock>
#endif
	return FR_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3758      	adds	r7, #88	; 0x58
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	41615252 	.word	0x41615252
 800c680:	61417272 	.word	0x61417272
 800c684:	20000674 	.word	0x20000674

0800c688 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c692:	2309      	movs	r3, #9
 800c694:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d01c      	beq.n	800c6d6 <validate+0x4e>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d018      	beq.n	800c6d6 <validate+0x4e>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d013      	beq.n	800c6d6 <validate+0x4e>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	889a      	ldrh	r2, [r3, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	88db      	ldrh	r3, [r3, #6]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d10c      	bne.n	800c6d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe f9aa 	bl	800aa1c <disk_status>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f003 0301 	and.w	r3, r3, #1
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d101      	bne.n	800c6d6 <validate+0x4e>
			res = FR_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d102      	bne.n	800c6e2 <validate+0x5a>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	e000      	b.n	800c6e4 <validate+0x5c>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	683a      	ldr	r2, [r7, #0]
 800c6e6:	6013      	str	r3, [r2, #0]
	return res;
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	4613      	mov	r3, r2
 800c700:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c706:	f107 0310 	add.w	r3, r7, #16
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fc9e 	bl	800c04c <get_ldnumber>
 800c710:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	2b00      	cmp	r3, #0
 800c716:	da01      	bge.n	800c71c <f_mount+0x28>
 800c718:	230b      	movs	r3, #11
 800c71a:	e02b      	b.n	800c774 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c71c:	4a17      	ldr	r2, [pc, #92]	; (800c77c <f_mount+0x88>)
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c724:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d005      	beq.n	800c738 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c72c:	69b8      	ldr	r0, [r7, #24]
 800c72e:	f7fe fc5b 	bl	800afe8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	2200      	movs	r2, #0
 800c736:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d002      	beq.n	800c744 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	490d      	ldr	r1, [pc, #52]	; (800c77c <f_mount+0x88>)
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d002      	beq.n	800c75a <f_mount+0x66>
 800c754:	79fb      	ldrb	r3, [r7, #7]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d001      	beq.n	800c75e <f_mount+0x6a>
 800c75a:	2300      	movs	r3, #0
 800c75c:	e00a      	b.n	800c774 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c75e:	f107 010c 	add.w	r1, r7, #12
 800c762:	f107 0308 	add.w	r3, r7, #8
 800c766:	2200      	movs	r2, #0
 800c768:	4618      	mov	r0, r3
 800c76a:	f7ff fd09 	bl	800c180 <find_volume>
 800c76e:	4603      	mov	r3, r0
 800c770:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c772:	7dfb      	ldrb	r3, [r7, #23]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	20000670 	.word	0x20000670

0800c780 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b098      	sub	sp, #96	; 0x60
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	4613      	mov	r3, r2
 800c78c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <f_open+0x18>
 800c794:	2309      	movs	r3, #9
 800c796:	e1bb      	b.n	800cb10 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c79e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c7a0:	79fa      	ldrb	r2, [r7, #7]
 800c7a2:	f107 0110 	add.w	r1, r7, #16
 800c7a6:	f107 0308 	add.w	r3, r7, #8
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff fce8 	bl	800c180 <find_volume>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f040 819f 	bne.w	800cafe <f_open+0x37e>
		dj.obj.fs = fs;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	f107 0314 	add.w	r3, r7, #20
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7ff fbc7 	bl	800bf60 <follow_path>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c7d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d11a      	bne.n	800c816 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c7e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7e4:	b25b      	sxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	da03      	bge.n	800c7f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c7ea:	2306      	movs	r3, #6
 800c7ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7f0:	e011      	b.n	800c816 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7f2:	79fb      	ldrb	r3, [r7, #7]
 800c7f4:	f023 0301 	bic.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	bf14      	ite	ne
 800c7fc:	2301      	movne	r3, #1
 800c7fe:	2300      	moveq	r3, #0
 800c800:	b2db      	uxtb	r3, r3
 800c802:	461a      	mov	r2, r3
 800c804:	f107 0314 	add.w	r3, r7, #20
 800c808:	4611      	mov	r1, r2
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe faa4 	bl	800ad58 <chk_lock>
 800c810:	4603      	mov	r3, r0
 800c812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c816:	79fb      	ldrb	r3, [r7, #7]
 800c818:	f003 031c 	and.w	r3, r3, #28
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d07f      	beq.n	800c920 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c824:	2b00      	cmp	r3, #0
 800c826:	d017      	beq.n	800c858 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	d10e      	bne.n	800c84e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c830:	f7fe faee 	bl	800ae10 <enq_lock>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d006      	beq.n	800c848 <f_open+0xc8>
 800c83a:	f107 0314 	add.w	r3, r7, #20
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff faaa 	bl	800bd98 <dir_register>
 800c844:	4603      	mov	r3, r0
 800c846:	e000      	b.n	800c84a <f_open+0xca>
 800c848:	2312      	movs	r3, #18
 800c84a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	f043 0308 	orr.w	r3, r3, #8
 800c854:	71fb      	strb	r3, [r7, #7]
 800c856:	e010      	b.n	800c87a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c858:	7ebb      	ldrb	r3, [r7, #26]
 800c85a:	f003 0311 	and.w	r3, r3, #17
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <f_open+0xea>
					res = FR_DENIED;
 800c862:	2307      	movs	r3, #7
 800c864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c868:	e007      	b.n	800c87a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <f_open+0xfa>
 800c874:	2308      	movs	r3, #8
 800c876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c87a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d168      	bne.n	800c954 <f_open+0x1d4>
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	f003 0308 	and.w	r3, r3, #8
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d063      	beq.n	800c954 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c88c:	f7fb f8ce 	bl	8007a2c <get_fattime>
 800c890:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c894:	330e      	adds	r3, #14
 800c896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe f9b3 	bl	800ac04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a0:	3316      	adds	r3, #22
 800c8a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe f9ad 	bl	800ac04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ac:	330b      	adds	r3, #11
 800c8ae:	2220      	movs	r2, #32
 800c8b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7ff f97c 	bl	800bbb6 <ld_clust>
 800c8be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7ff f994 	bl	800bbf4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ce:	331c      	adds	r3, #28
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fe f996 	bl	800ac04 <st_dword>
					fs->wflag = 1;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d037      	beq.n	800c954 <f_open+0x1d4>
						dw = fs->winsect;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c8ea:	f107 0314 	add.w	r3, r7, #20
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fe84 	bl	800b600 <remove_chain>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c8fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c902:	2b00      	cmp	r3, #0
 800c904:	d126      	bne.n	800c954 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe fbd4 	bl	800b0b8 <move_window>
 800c910:	4603      	mov	r3, r0
 800c912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c91a:	3a01      	subs	r2, #1
 800c91c:	611a      	str	r2, [r3, #16]
 800c91e:	e019      	b.n	800c954 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c924:	2b00      	cmp	r3, #0
 800c926:	d115      	bne.n	800c954 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c928:	7ebb      	ldrb	r3, [r7, #26]
 800c92a:	f003 0310 	and.w	r3, r3, #16
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c932:	2304      	movs	r3, #4
 800c934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c938:	e00c      	b.n	800c954 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	f003 0302 	and.w	r3, r3, #2
 800c940:	2b00      	cmp	r3, #0
 800c942:	d007      	beq.n	800c954 <f_open+0x1d4>
 800c944:	7ebb      	ldrb	r3, [r7, #26]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <f_open+0x1d4>
						res = FR_DENIED;
 800c94e:	2307      	movs	r3, #7
 800c950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d128      	bne.n	800c9ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c95c:	79fb      	ldrb	r3, [r7, #7]
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	2b00      	cmp	r3, #0
 800c964:	d003      	beq.n	800c96e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c966:	79fb      	ldrb	r3, [r7, #7]
 800c968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c96c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c97c:	79fb      	ldrb	r3, [r7, #7]
 800c97e:	f023 0301 	bic.w	r3, r3, #1
 800c982:	2b00      	cmp	r3, #0
 800c984:	bf14      	ite	ne
 800c986:	2301      	movne	r3, #1
 800c988:	2300      	moveq	r3, #0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	f107 0314 	add.w	r3, r7, #20
 800c992:	4611      	mov	r1, r2
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe fa5d 	bl	800ae54 <inc_lock>
 800c99a:	4602      	mov	r2, r0
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d102      	bne.n	800c9ae <f_open+0x22e>
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f040 80a3 	bne.w	800cafe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff f8f9 	bl	800bbb6 <ld_clust>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9cc:	331c      	adds	r3, #28
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe f8da 	bl	800ab88 <ld_dword>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	88da      	ldrh	r2, [r3, #6]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	79fa      	ldrb	r2, [r7, #7]
 800c9f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3330      	adds	r3, #48	; 0x30
 800ca0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca0e:	2100      	movs	r1, #0
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fe f944 	bl	800ac9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	f003 0320 	and.w	r3, r3, #32
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d06e      	beq.n	800cafe <f_open+0x37e>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d06a      	beq.n	800cafe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	68da      	ldr	r2, [r3, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	895b      	ldrh	r3, [r3, #10]
 800ca34:	461a      	mov	r2, r3
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	899b      	ldrh	r3, [r3, #12]
 800ca3a:	fb03 f302 	mul.w	r3, r3, r2
 800ca3e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ca4c:	e016      	b.n	800ca7c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fe fbed 	bl	800b232 <get_fat>
 800ca58:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ca5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d802      	bhi.n	800ca66 <f_open+0x2e6>
 800ca60:	2302      	movs	r3, #2
 800ca62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ca66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6c:	d102      	bne.n	800ca74 <f_open+0x2f4>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	657b      	str	r3, [r7, #84]	; 0x54
 800ca7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d103      	bne.n	800ca8c <f_open+0x30c>
 800ca84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d8e0      	bhi.n	800ca4e <f_open+0x2ce>
				}
				fp->clust = clst;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ca92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d131      	bne.n	800cafe <f_open+0x37e>
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	899b      	ldrh	r3, [r3, #12]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caa2:	fbb3 f1f2 	udiv	r1, r3, r2
 800caa6:	fb02 f201 	mul.w	r2, r2, r1
 800caaa:	1a9b      	subs	r3, r3, r2
 800caac:	2b00      	cmp	r3, #0
 800caae:	d026      	beq.n	800cafe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fe fb9d 	bl	800b1f4 <clust2sect>
 800caba:	6478      	str	r0, [r7, #68]	; 0x44
 800cabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d103      	bne.n	800caca <f_open+0x34a>
						res = FR_INT_ERR;
 800cac2:	2302      	movs	r3, #2
 800cac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cac8:	e019      	b.n	800cafe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	899b      	ldrh	r3, [r3, #12]
 800cace:	461a      	mov	r2, r3
 800cad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cad8:	441a      	add	r2, r3
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	7858      	ldrb	r0, [r3, #1]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6a1a      	ldr	r2, [r3, #32]
 800caec:	2301      	movs	r3, #1
 800caee:	f7fd ffd5 	bl	800aa9c <disk_read>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <f_open+0x37e>
 800caf8:	2301      	movs	r3, #1
 800cafa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cafe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d002      	beq.n	800cb0c <f_open+0x38c>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cb0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3760      	adds	r7, #96	; 0x60
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b08c      	sub	sp, #48	; 0x30
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f107 0210 	add.w	r2, r7, #16
 800cb36:	4611      	mov	r1, r2
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7ff fda5 	bl	800c688 <validate>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d107      	bne.n	800cb5c <f_write+0x44>
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	7d5b      	ldrb	r3, [r3, #21]
 800cb50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cb54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <f_write+0x4a>
 800cb5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb60:	e16a      	b.n	800ce38 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	f003 0302 	and.w	r3, r3, #2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <f_write+0x5a>
 800cb6e:	2307      	movs	r3, #7
 800cb70:	e162      	b.n	800ce38 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	699a      	ldr	r2, [r3, #24]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	441a      	add	r2, r3
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	f080 814c 	bcs.w	800ce1c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	43db      	mvns	r3, r3
 800cb8a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cb8c:	e146      	b.n	800ce1c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	8992      	ldrh	r2, [r2, #12]
 800cb96:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb9a:	fb02 f201 	mul.w	r2, r2, r1
 800cb9e:	1a9b      	subs	r3, r3, r2
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f040 80f1 	bne.w	800cd88 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	8992      	ldrh	r2, [r2, #12]
 800cbae:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	8952      	ldrh	r2, [r2, #10]
 800cbb6:	3a01      	subs	r2, #1
 800cbb8:	4013      	ands	r3, r2
 800cbba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d143      	bne.n	800cc4a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10c      	bne.n	800cbe4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d11a      	bne.n	800cc0c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2100      	movs	r1, #0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe fd75 	bl	800b6ca <create_chain>
 800cbe0:	62b8      	str	r0, [r7, #40]	; 0x28
 800cbe2:	e013      	b.n	800cc0c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d007      	beq.n	800cbfc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7fe fe01 	bl	800b7fa <clmt_clust>
 800cbf8:	62b8      	str	r0, [r7, #40]	; 0x28
 800cbfa:	e007      	b.n	800cc0c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	69db      	ldr	r3, [r3, #28]
 800cc02:	4619      	mov	r1, r3
 800cc04:	4610      	mov	r0, r2
 800cc06:	f7fe fd60 	bl	800b6ca <create_chain>
 800cc0a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 8109 	beq.w	800ce26 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d104      	bne.n	800cc24 <f_write+0x10c>
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	755a      	strb	r2, [r3, #21]
 800cc20:	2302      	movs	r3, #2
 800cc22:	e109      	b.n	800ce38 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2a:	d104      	bne.n	800cc36 <f_write+0x11e>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	755a      	strb	r2, [r3, #21]
 800cc32:	2301      	movs	r3, #1
 800cc34:	e100      	b.n	800ce38 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc3a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d102      	bne.n	800cc4a <f_write+0x132>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc48:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	b25b      	sxtb	r3, r3
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	da18      	bge.n	800cc86 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	7858      	ldrb	r0, [r3, #1]
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6a1a      	ldr	r2, [r3, #32]
 800cc62:	2301      	movs	r3, #1
 800cc64:	f7fd ff3a 	bl	800aadc <disk_write>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <f_write+0x160>
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2201      	movs	r2, #1
 800cc72:	755a      	strb	r2, [r3, #21]
 800cc74:	2301      	movs	r3, #1
 800cc76:	e0df      	b.n	800ce38 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	7d1b      	ldrb	r3, [r3, #20]
 800cc7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cc86:	693a      	ldr	r2, [r7, #16]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	69db      	ldr	r3, [r3, #28]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fe fab0 	bl	800b1f4 <clust2sect>
 800cc94:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d104      	bne.n	800cca6 <f_write+0x18e>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2202      	movs	r2, #2
 800cca0:	755a      	strb	r2, [r3, #21]
 800cca2:	2302      	movs	r3, #2
 800cca4:	e0c8      	b.n	800ce38 <f_write+0x320>
			sect += csect;
 800cca6:	697a      	ldr	r2, [r7, #20]
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	4413      	add	r3, r2
 800ccac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	899b      	ldrh	r3, [r3, #12]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccba:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d043      	beq.n	800cd4a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ccc2:	69ba      	ldr	r2, [r7, #24]
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	8952      	ldrh	r2, [r2, #10]
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d905      	bls.n	800ccdc <f_write+0x1c4>
					cc = fs->csize - csect;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	895b      	ldrh	r3, [r3, #10]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	7858      	ldrb	r0, [r3, #1]
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	69f9      	ldr	r1, [r7, #28]
 800cce6:	f7fd fef9 	bl	800aadc <disk_write>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d004      	beq.n	800ccfa <f_write+0x1e2>
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	755a      	strb	r2, [r3, #21]
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	e09e      	b.n	800ce38 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6a1a      	ldr	r2, [r3, #32]
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	6a3a      	ldr	r2, [r7, #32]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d918      	bls.n	800cd3a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6a1a      	ldr	r2, [r3, #32]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	8992      	ldrh	r2, [r2, #12]
 800cd1a:	fb02 f303 	mul.w	r3, r2, r3
 800cd1e:	69fa      	ldr	r2, [r7, #28]
 800cd20:	18d1      	adds	r1, r2, r3
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	461a      	mov	r2, r3
 800cd28:	f7fd ff98 	bl	800ac5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	7d1b      	ldrb	r3, [r3, #20]
 800cd30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	899b      	ldrh	r3, [r3, #12]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	6a3b      	ldr	r3, [r7, #32]
 800cd42:	fb02 f303 	mul.w	r3, r2, r3
 800cd46:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800cd48:	e04b      	b.n	800cde2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d016      	beq.n	800cd82 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	699a      	ldr	r2, [r3, #24]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d210      	bcs.n	800cd82 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	7858      	ldrb	r0, [r3, #1]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	697a      	ldr	r2, [r7, #20]
 800cd6e:	f7fd fe95 	bl	800aa9c <disk_read>
 800cd72:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d004      	beq.n	800cd82 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	755a      	strb	r2, [r3, #21]
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e05a      	b.n	800ce38 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	899b      	ldrh	r3, [r3, #12]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	8992      	ldrh	r2, [r2, #12]
 800cd96:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd9a:	fb02 f201 	mul.w	r2, r2, r1
 800cd9e:	1a9b      	subs	r3, r3, r2
 800cda0:	1ac3      	subs	r3, r0, r3
 800cda2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d901      	bls.n	800cdb0 <f_write+0x298>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	8992      	ldrh	r2, [r2, #12]
 800cdbe:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdc2:	fb02 f200 	mul.w	r2, r2, r0
 800cdc6:	1a9b      	subs	r3, r3, r2
 800cdc8:	440b      	add	r3, r1
 800cdca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdcc:	69f9      	ldr	r1, [r7, #28]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fd ff44 	bl	800ac5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	7d1b      	ldrb	r3, [r3, #20]
 800cdd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cde2:	69fa      	ldr	r2, [r7, #28]
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	4413      	add	r3, r2
 800cde8:	61fb      	str	r3, [r7, #28]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	699a      	ldr	r2, [r3, #24]
 800cdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf0:	441a      	add	r2, r3
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	619a      	str	r2, [r3, #24]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	bf38      	it	cc
 800ce02:	461a      	movcc	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	60da      	str	r2, [r3, #12]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	441a      	add	r2, r3
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f47f aeb5 	bne.w	800cb8e <f_write+0x76>
 800ce24:	e000      	b.n	800ce28 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ce26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	7d1b      	ldrb	r3, [r3, #20]
 800ce2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3730      	adds	r7, #48	; 0x30
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f107 0208 	add.w	r2, r7, #8
 800ce4e:	4611      	mov	r1, r2
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fc19 	bl	800c688 <validate>
 800ce56:	4603      	mov	r3, r0
 800ce58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d168      	bne.n	800cf32 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d062      	beq.n	800cf32 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7d1b      	ldrb	r3, [r3, #20]
 800ce70:	b25b      	sxtb	r3, r3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	da15      	bge.n	800cea2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	7858      	ldrb	r0, [r3, #1]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6a1a      	ldr	r2, [r3, #32]
 800ce84:	2301      	movs	r3, #1
 800ce86:	f7fd fe29 	bl	800aadc <disk_write>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <f_sync+0x54>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e04f      	b.n	800cf34 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	7d1b      	ldrb	r3, [r3, #20]
 800ce98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cea2:	f7fa fdc3 	bl	8007a2c <get_fattime>
 800cea6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f7fe f901 	bl	800b0b8 <move_window>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d138      	bne.n	800cf32 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	330b      	adds	r3, #11
 800ceca:	781a      	ldrb	r2, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	330b      	adds	r3, #11
 800ced0:	f042 0220 	orr.w	r2, r2, #32
 800ced4:	b2d2      	uxtb	r2, r2
 800ced6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	461a      	mov	r2, r3
 800cee2:	68f9      	ldr	r1, [r7, #12]
 800cee4:	f7fe fe86 	bl	800bbf4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f103 021c 	add.w	r2, r3, #28
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	f7fd fe85 	bl	800ac04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3316      	adds	r3, #22
 800cefe:	6939      	ldr	r1, [r7, #16]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fd fe7f 	bl	800ac04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3312      	adds	r3, #18
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fd fe5e 	bl	800abce <st_word>
					fs->wflag = 1;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2201      	movs	r2, #1
 800cf16:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fe f8fa 	bl	800b114 <sync_fs>
 800cf20:	4603      	mov	r3, r0
 800cf22:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7d1b      	ldrb	r3, [r3, #20]
 800cf28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cf32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff ff7b 	bl	800ce40 <f_sync>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d118      	bne.n	800cf86 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f107 0208 	add.w	r2, r7, #8
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fb93 	bl	800c688 <validate>
 800cf62:	4603      	mov	r3, r0
 800cf64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10c      	bne.n	800cf86 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fd fffd 	bl	800af70 <dec_lock>
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d102      	bne.n	800cf86 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b090      	sub	sp, #64	; 0x40
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f107 0208 	add.w	r2, r7, #8
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff fb70 	bl	800c688 <validate>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cfae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d103      	bne.n	800cfbe <f_lseek+0x2e>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	7d5b      	ldrb	r3, [r3, #21]
 800cfba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cfbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d002      	beq.n	800cfcc <f_lseek+0x3c>
 800cfc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cfca:	e201      	b.n	800d3d0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 80d9 	beq.w	800d188 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfdc:	d15a      	bne.n	800d094 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	1d1a      	adds	r2, r3, #4
 800cfe8:	627a      	str	r2, [r7, #36]	; 0x24
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	617b      	str	r3, [r7, #20]
 800cfee:	2302      	movs	r3, #2
 800cff0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d03a      	beq.n	800d074 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	2300      	movs	r3, #0
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	3302      	adds	r3, #2
 800d00a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	3301      	adds	r3, #1
 800d014:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe f909 	bl	800b232 <get_fat>
 800d020:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d024:	2b01      	cmp	r3, #1
 800d026:	d804      	bhi.n	800d032 <f_lseek+0xa2>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2202      	movs	r2, #2
 800d02c:	755a      	strb	r2, [r3, #21]
 800d02e:	2302      	movs	r3, #2
 800d030:	e1ce      	b.n	800d3d0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d038:	d104      	bne.n	800d044 <f_lseek+0xb4>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	755a      	strb	r2, [r3, #21]
 800d040:	2301      	movs	r3, #1
 800d042:	e1c5      	b.n	800d3d0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3301      	adds	r3, #1
 800d048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d0de      	beq.n	800d00c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	429a      	cmp	r2, r3
 800d054:	d809      	bhi.n	800d06a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d058:	1d1a      	adds	r2, r3, #4
 800d05a:	627a      	str	r2, [r7, #36]	; 0x24
 800d05c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d05e:	601a      	str	r2, [r3, #0]
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	1d1a      	adds	r2, r3, #4
 800d064:	627a      	str	r2, [r7, #36]	; 0x24
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d070:	429a      	cmp	r2, r3
 800d072:	d3c4      	bcc.n	800cffe <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d07a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	429a      	cmp	r2, r3
 800d082:	d803      	bhi.n	800d08c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d086:	2200      	movs	r2, #0
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	e19f      	b.n	800d3cc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d08c:	2311      	movs	r3, #17
 800d08e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d092:	e19b      	b.n	800d3cc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d902      	bls.n	800d0a4 <f_lseek+0x114>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f000 818d 	beq.w	800d3cc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7fe fb9e 	bl	800b7fa <clmt_clust>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	69db      	ldr	r3, [r3, #28]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	4610      	mov	r0, r2
 800d0ce:	f7fe f891 	bl	800b1f4 <clust2sect>
 800d0d2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d104      	bne.n	800d0e4 <f_lseek+0x154>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2202      	movs	r2, #2
 800d0de:	755a      	strb	r2, [r3, #21]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e175      	b.n	800d3d0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	8992      	ldrh	r2, [r2, #12]
 800d0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0f0:	68ba      	ldr	r2, [r7, #8]
 800d0f2:	8952      	ldrh	r2, [r2, #10]
 800d0f4:	3a01      	subs	r2, #1
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	69ba      	ldr	r2, [r7, #24]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	8992      	ldrh	r2, [r2, #12]
 800d106:	fbb3 f1f2 	udiv	r1, r3, r2
 800d10a:	fb02 f201 	mul.w	r2, r2, r1
 800d10e:	1a9b      	subs	r3, r3, r2
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 815b 	beq.w	800d3cc <f_lseek+0x43c>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	69ba      	ldr	r2, [r7, #24]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	f000 8155 	beq.w	800d3cc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	7d1b      	ldrb	r3, [r3, #20]
 800d126:	b25b      	sxtb	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	da18      	bge.n	800d15e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	7858      	ldrb	r0, [r3, #1]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1a      	ldr	r2, [r3, #32]
 800d13a:	2301      	movs	r3, #1
 800d13c:	f7fd fcce 	bl	800aadc <disk_write>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d004      	beq.n	800d150 <f_lseek+0x1c0>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	755a      	strb	r2, [r3, #21]
 800d14c:	2301      	movs	r3, #1
 800d14e:	e13f      	b.n	800d3d0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7d1b      	ldrb	r3, [r3, #20]
 800d154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	7858      	ldrb	r0, [r3, #1]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d168:	2301      	movs	r3, #1
 800d16a:	69ba      	ldr	r2, [r7, #24]
 800d16c:	f7fd fc96 	bl	800aa9c <disk_read>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d004      	beq.n	800d180 <f_lseek+0x1f0>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	755a      	strb	r2, [r3, #21]
 800d17c:	2301      	movs	r3, #1
 800d17e:	e127      	b.n	800d3d0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	69ba      	ldr	r2, [r7, #24]
 800d184:	621a      	str	r2, [r3, #32]
 800d186:	e121      	b.n	800d3cc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d908      	bls.n	800d1a4 <f_lseek+0x214>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7d1b      	ldrb	r3, [r3, #20]
 800d196:	f003 0302 	and.w	r3, r3, #2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d102      	bne.n	800d1a4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 80b5 	beq.w	800d326 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	895b      	ldrh	r3, [r3, #10]
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	899b      	ldrh	r3, [r3, #12]
 800d1c6:	fb03 f302 	mul.w	r3, r3, r2
 800d1ca:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01b      	beq.n	800d20a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	1e5a      	subs	r2, r3, #1
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	1e59      	subs	r1, r3, #1
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d30f      	bcc.n	800d20a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	1e5a      	subs	r2, r3, #1
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	425b      	negs	r3, r3
 800d1f2:	401a      	ands	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	63bb      	str	r3, [r7, #56]	; 0x38
 800d208:	e022      	b.n	800d250 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d212:	2b00      	cmp	r3, #0
 800d214:	d119      	bne.n	800d24a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2100      	movs	r1, #0
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fa55 	bl	800b6ca <create_chain>
 800d220:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d224:	2b01      	cmp	r3, #1
 800d226:	d104      	bne.n	800d232 <f_lseek+0x2a2>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	755a      	strb	r2, [r3, #21]
 800d22e:	2302      	movs	r3, #2
 800d230:	e0ce      	b.n	800d3d0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d238:	d104      	bne.n	800d244 <f_lseek+0x2b4>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	755a      	strb	r2, [r3, #21]
 800d240:	2301      	movs	r3, #1
 800d242:	e0c5      	b.n	800d3d0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d248:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d24e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d252:	2b00      	cmp	r3, #0
 800d254:	d067      	beq.n	800d326 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d256:	e03a      	b.n	800d2ce <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	441a      	add	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	7d1b      	ldrb	r3, [r3, #20]
 800d270:	f003 0302 	and.w	r3, r3, #2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00b      	beq.n	800d290 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe fa24 	bl	800b6ca <create_chain>
 800d282:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d286:	2b00      	cmp	r3, #0
 800d288:	d108      	bne.n	800d29c <f_lseek+0x30c>
							ofs = 0; break;
 800d28a:	2300      	movs	r3, #0
 800d28c:	603b      	str	r3, [r7, #0]
 800d28e:	e022      	b.n	800d2d6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d294:	4618      	mov	r0, r3
 800d296:	f7fd ffcc 	bl	800b232 <get_fat>
 800d29a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d104      	bne.n	800d2ae <f_lseek+0x31e>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	755a      	strb	r2, [r3, #21]
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e090      	b.n	800d3d0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d904      	bls.n	800d2be <f_lseek+0x32e>
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d304      	bcc.n	800d2c8 <f_lseek+0x338>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	755a      	strb	r2, [r3, #21]
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	e083      	b.n	800d3d0 <f_lseek+0x440>
					fp->clust = clst;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2cc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d8c0      	bhi.n	800d258 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	699a      	ldr	r2, [r3, #24]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	441a      	add	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	899b      	ldrh	r3, [r3, #12]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2ee:	fb02 f201 	mul.w	r2, r2, r1
 800d2f2:	1a9b      	subs	r3, r3, r2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d016      	beq.n	800d326 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fd ff79 	bl	800b1f4 <clust2sect>
 800d302:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d306:	2b00      	cmp	r3, #0
 800d308:	d104      	bne.n	800d314 <f_lseek+0x384>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2202      	movs	r2, #2
 800d30e:	755a      	strb	r2, [r3, #21]
 800d310:	2302      	movs	r3, #2
 800d312:	e05d      	b.n	800d3d0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	899b      	ldrh	r3, [r3, #12]
 800d318:	461a      	mov	r2, r3
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d322:	4413      	add	r3, r2
 800d324:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	699a      	ldr	r2, [r3, #24]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d90a      	bls.n	800d348 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	699a      	ldr	r2, [r3, #24]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	7d1b      	ldrb	r3, [r3, #20]
 800d33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d342:	b2da      	uxtb	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	8992      	ldrh	r2, [r2, #12]
 800d350:	fbb3 f1f2 	udiv	r1, r3, r2
 800d354:	fb02 f201 	mul.w	r2, r2, r1
 800d358:	1a9b      	subs	r3, r3, r2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d036      	beq.n	800d3cc <f_lseek+0x43c>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d364:	429a      	cmp	r2, r3
 800d366:	d031      	beq.n	800d3cc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	b25b      	sxtb	r3, r3
 800d36e:	2b00      	cmp	r3, #0
 800d370:	da18      	bge.n	800d3a4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	7858      	ldrb	r0, [r3, #1]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a1a      	ldr	r2, [r3, #32]
 800d380:	2301      	movs	r3, #1
 800d382:	f7fd fbab 	bl	800aadc <disk_write>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d004      	beq.n	800d396 <f_lseek+0x406>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	755a      	strb	r2, [r3, #21]
 800d392:	2301      	movs	r3, #1
 800d394:	e01c      	b.n	800d3d0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	7d1b      	ldrb	r3, [r3, #20]
 800d39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d39e:	b2da      	uxtb	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	7858      	ldrb	r0, [r3, #1]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3b2:	f7fd fb73 	bl	800aa9c <disk_read>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d004      	beq.n	800d3c6 <f_lseek+0x436>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	755a      	strb	r2, [r3, #21]
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e004      	b.n	800d3d0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ca:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d3cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3740      	adds	r7, #64	; 0x40
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b09e      	sub	sp, #120	; 0x78
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d3e4:	f107 010c 	add.w	r1, r7, #12
 800d3e8:	1d3b      	adds	r3, r7, #4
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fec7 	bl	800c180 <find_volume>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800d3fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d400:	2b00      	cmp	r3, #0
 800d402:	f040 808e 	bne.w	800d522 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d40c:	4611      	mov	r1, r2
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe fda6 	bl	800bf60 <follow_path>
 800d414:	4603      	mov	r3, r0
 800d416:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800d41a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d108      	bne.n	800d434 <f_unlink+0x5c>
 800d422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d426:	2102      	movs	r1, #2
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fd fc95 	bl	800ad58 <chk_lock>
 800d42e:	4603      	mov	r3, r0
 800d430:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800d434:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d172      	bne.n	800d522 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d43c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d440:	b25b      	sxtb	r3, r3
 800d442:	2b00      	cmp	r3, #0
 800d444:	da03      	bge.n	800d44e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800d446:	2306      	movs	r3, #6
 800d448:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800d44c:	e008      	b.n	800d460 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800d44e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d452:	f003 0301 	and.w	r3, r3, #1
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800d45a:	2307      	movs	r3, #7
 800d45c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800d460:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d464:	2b00      	cmp	r3, #0
 800d466:	d134      	bne.n	800d4d2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fba1 	bl	800bbb6 <ld_clust>
 800d474:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800d476:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800d47a:	f003 0310 	and.w	r3, r3, #16
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d027      	beq.n	800d4d2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800d486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d488:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800d48a:	f107 0310 	add.w	r3, r7, #16
 800d48e:	2100      	movs	r1, #0
 800d490:	4618      	mov	r0, r3
 800d492:	f7fe f9ea 	bl	800b86a <dir_sdi>
 800d496:	4603      	mov	r3, r0
 800d498:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800d49c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d116      	bne.n	800d4d2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800d4a4:	f107 0310 	add.w	r3, r7, #16
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe fbc2 	bl	800bc34 <dir_read>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800d4b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d102      	bne.n	800d4c4 <f_unlink+0xec>
 800d4be:	2307      	movs	r3, #7
 800d4c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d4c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d4c8:	2b04      	cmp	r3, #4
 800d4ca:	d102      	bne.n	800d4d2 <f_unlink+0xfa>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800d4d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d123      	bne.n	800d522 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d4da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fc8c 	bl	800bdfc <dir_remove>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d4ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10c      	bne.n	800d50c <f_unlink+0x134>
 800d4f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d009      	beq.n	800d50c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d4f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe f87d 	bl	800b600 <remove_chain>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d50c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d510:	2b00      	cmp	r3, #0
 800d512:	d106      	bne.n	800d522 <f_unlink+0x14a>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	4618      	mov	r0, r3
 800d518:	f7fd fdfc 	bl	800b114 <sync_fs>
 800d51c:	4603      	mov	r3, r0
 800d51e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d522:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800d526:	4618      	mov	r0, r3
 800d528:	3778      	adds	r7, #120	; 0x78
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d530:	b480      	push	{r7}
 800d532:	b087      	sub	sp, #28
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	4613      	mov	r3, r2
 800d53c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d53e:	2301      	movs	r3, #1
 800d540:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d546:	4b1f      	ldr	r3, [pc, #124]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d548:	7a5b      	ldrb	r3, [r3, #9]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d131      	bne.n	800d5b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d550:	4b1c      	ldr	r3, [pc, #112]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d552:	7a5b      	ldrb	r3, [r3, #9]
 800d554:	b2db      	uxtb	r3, r3
 800d556:	461a      	mov	r2, r3
 800d558:	4b1a      	ldr	r3, [pc, #104]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d55a:	2100      	movs	r1, #0
 800d55c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d55e:	4b19      	ldr	r3, [pc, #100]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d560:	7a5b      	ldrb	r3, [r3, #9]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	4a17      	ldr	r2, [pc, #92]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d56e:	4b15      	ldr	r3, [pc, #84]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d570:	7a5b      	ldrb	r3, [r3, #9]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	461a      	mov	r2, r3
 800d576:	4b13      	ldr	r3, [pc, #76]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d578:	4413      	add	r3, r2
 800d57a:	79fa      	ldrb	r2, [r7, #7]
 800d57c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d57e:	4b11      	ldr	r3, [pc, #68]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d580:	7a5b      	ldrb	r3, [r3, #9]
 800d582:	b2db      	uxtb	r3, r3
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	b2d1      	uxtb	r1, r2
 800d588:	4a0e      	ldr	r2, [pc, #56]	; (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d58a:	7251      	strb	r1, [r2, #9]
 800d58c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d58e:	7dbb      	ldrb	r3, [r7, #22]
 800d590:	3330      	adds	r3, #48	; 0x30
 800d592:	b2da      	uxtb	r2, r3
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3301      	adds	r3, #1
 800d59c:	223a      	movs	r2, #58	; 0x3a
 800d59e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	3302      	adds	r3, #2
 800d5a4:	222f      	movs	r2, #47	; 0x2f
 800d5a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	3303      	adds	r3, #3
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	20000698 	.word	0x20000698

0800d5c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7ff ffaa 	bl	800d530 <FATFS_LinkDriverEx>
 800d5dc:	4603      	mov	r3, r0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
	...

0800d5e8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800d5ec:	4b10      	ldr	r3, [pc, #64]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800d5f2:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800d5f8:	4b0d      	ldr	r3, [pc, #52]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d5fa:	4a0e      	ldr	r2, [pc, #56]	; (800d634 <MX_PDM2PCM_Init+0x4c>)
 800d5fc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 2;
 800d5fe:	4b0c      	ldr	r3, [pc, #48]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d600:	2202      	movs	r2, #2
 800d602:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d606:	2202      	movs	r2, #2
 800d608:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800d60a:	4809      	ldr	r0, [pc, #36]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d60c:	f002 f8a2 	bl	800f754 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800d610:	4b09      	ldr	r3, [pc, #36]	; (800d638 <MX_PDM2PCM_Init+0x50>)
 800d612:	2202      	movs	r2, #2
 800d614:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800d616:	4b08      	ldr	r3, [pc, #32]	; (800d638 <MX_PDM2PCM_Init+0x50>)
 800d618:	2210      	movs	r2, #16
 800d61a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800d61c:	4b06      	ldr	r3, [pc, #24]	; (800d638 <MX_PDM2PCM_Init+0x50>)
 800d61e:	2200      	movs	r2, #0
 800d620:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800d622:	4905      	ldr	r1, [pc, #20]	; (800d638 <MX_PDM2PCM_Init+0x50>)
 800d624:	4802      	ldr	r0, [pc, #8]	; (800d630 <MX_PDM2PCM_Init+0x48>)
 800d626:	f002 f91f 	bl	800f868 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800d62a:	bf00      	nop
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	20005968 	.word	0x20005968
 800d634:	7d70a3d6 	.word	0x7d70a3d6
 800d638:	20005960 	.word	0x20005960

0800d63c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d640:	2201      	movs	r2, #1
 800d642:	490e      	ldr	r1, [pc, #56]	; (800d67c <MX_USB_HOST_Init+0x40>)
 800d644:	480e      	ldr	r0, [pc, #56]	; (800d680 <MX_USB_HOST_Init+0x44>)
 800d646:	f7fb fe8f 	bl	8009368 <USBH_Init>
 800d64a:	4603      	mov	r3, r0
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d650:	f7f3 fc10 	bl	8000e74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d654:	490b      	ldr	r1, [pc, #44]	; (800d684 <MX_USB_HOST_Init+0x48>)
 800d656:	480a      	ldr	r0, [pc, #40]	; (800d680 <MX_USB_HOST_Init+0x44>)
 800d658:	f7fb ff14 	bl	8009484 <USBH_RegisterClass>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d662:	f7f3 fc07 	bl	8000e74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d666:	4806      	ldr	r0, [pc, #24]	; (800d680 <MX_USB_HOST_Init+0x44>)
 800d668:	f7fb ff98 	bl	800959c <USBH_Start>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d001      	beq.n	800d676 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d672:	f7f3 fbff 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d676:	bf00      	nop
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	0800d69d 	.word	0x0800d69d
 800d680:	200059b4 	.word	0x200059b4
 800d684:	2000040c 	.word	0x2000040c

0800d688 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d68c:	4802      	ldr	r0, [pc, #8]	; (800d698 <MX_USB_HOST_Process+0x10>)
 800d68e:	f7fb ff95 	bl	80095bc <USBH_Process>
}
 800d692:	bf00      	nop
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	200059b4 	.word	0x200059b4

0800d69c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d6a8:	78fb      	ldrb	r3, [r7, #3]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d819      	bhi.n	800d6e4 <USBH_UserProcess+0x48>
 800d6b0:	a201      	add	r2, pc, #4	; (adr r2, 800d6b8 <USBH_UserProcess+0x1c>)
 800d6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b6:	bf00      	nop
 800d6b8:	0800d6e5 	.word	0x0800d6e5
 800d6bc:	0800d6d5 	.word	0x0800d6d5
 800d6c0:	0800d6e5 	.word	0x0800d6e5
 800d6c4:	0800d6dd 	.word	0x0800d6dd
 800d6c8:	0800d6cd 	.word	0x0800d6cd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d6cc:	4b09      	ldr	r3, [pc, #36]	; (800d6f4 <USBH_UserProcess+0x58>)
 800d6ce:	2203      	movs	r2, #3
 800d6d0:	701a      	strb	r2, [r3, #0]
  break;
 800d6d2:	e008      	b.n	800d6e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d6d4:	4b07      	ldr	r3, [pc, #28]	; (800d6f4 <USBH_UserProcess+0x58>)
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	701a      	strb	r2, [r3, #0]
  break;
 800d6da:	e004      	b.n	800d6e6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <USBH_UserProcess+0x58>)
 800d6de:	2201      	movs	r2, #1
 800d6e0:	701a      	strb	r2, [r3, #0]
  break;
 800d6e2:	e000      	b.n	800d6e6 <USBH_UserProcess+0x4a>

  default:
  break;
 800d6e4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d6e6:	bf00      	nop
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	200006a4 	.word	0x200006a4

0800d6f8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08a      	sub	sp, #40	; 0x28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d700:	f107 0314 	add.w	r3, r7, #20
 800d704:	2200      	movs	r2, #0
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	605a      	str	r2, [r3, #4]
 800d70a:	609a      	str	r2, [r3, #8]
 800d70c:	60da      	str	r2, [r3, #12]
 800d70e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d718:	d147      	bne.n	800d7aa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d71a:	2300      	movs	r3, #0
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	4b25      	ldr	r3, [pc, #148]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d722:	4a24      	ldr	r2, [pc, #144]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d724:	f043 0301 	orr.w	r3, r3, #1
 800d728:	6313      	str	r3, [r2, #48]	; 0x30
 800d72a:	4b22      	ldr	r3, [pc, #136]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	613b      	str	r3, [r7, #16]
 800d734:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d73a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d73c:	2300      	movs	r3, #0
 800d73e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d740:	2300      	movs	r3, #0
 800d742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	4619      	mov	r1, r3
 800d74a:	481b      	ldr	r0, [pc, #108]	; (800d7b8 <HAL_HCD_MspInit+0xc0>)
 800d74c:	f7f5 f90c 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d750:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d756:	2302      	movs	r3, #2
 800d758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d75e:	2303      	movs	r3, #3
 800d760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d762:	230a      	movs	r3, #10
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d766:	f107 0314 	add.w	r3, r7, #20
 800d76a:	4619      	mov	r1, r3
 800d76c:	4812      	ldr	r0, [pc, #72]	; (800d7b8 <HAL_HCD_MspInit+0xc0>)
 800d76e:	f7f5 f8fb 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d772:	4b10      	ldr	r3, [pc, #64]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	4a0f      	ldr	r2, [pc, #60]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d77c:	6353      	str	r3, [r2, #52]	; 0x34
 800d77e:	2300      	movs	r3, #0
 800d780:	60fb      	str	r3, [r7, #12]
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d786:	4a0b      	ldr	r2, [pc, #44]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d78c:	6453      	str	r3, [r2, #68]	; 0x44
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <HAL_HCD_MspInit+0xbc>)
 800d790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d796:	60fb      	str	r3, [r7, #12]
 800d798:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d79a:	2200      	movs	r2, #0
 800d79c:	2100      	movs	r1, #0
 800d79e:	2043      	movs	r0, #67	; 0x43
 800d7a0:	f7f4 fc53 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7a4:	2043      	movs	r0, #67	; 0x43
 800d7a6:	f7f4 fc6c 	bl	8002082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7aa:	bf00      	nop
 800d7ac:	3728      	adds	r7, #40	; 0x28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	40023800 	.word	0x40023800
 800d7b8:	40020000 	.word	0x40020000

0800d7bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fc fac9 	bl	8009d62 <USBH_LL_IncTimer>
}
 800d7d0:	bf00      	nop
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fc fb01 	bl	8009dee <USBH_LL_Connect>
}
 800d7ec:	bf00      	nop
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d802:	4618      	mov	r0, r3
 800d804:	f7fc fb0a 	bl	8009e1c <USBH_LL_Disconnect>
}
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
 800d81c:	4613      	mov	r3, r2
 800d81e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fc fabb 	bl	8009db6 <USBH_LL_PortEnabled>
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d856:	4618      	mov	r0, r3
 800d858:	f7fc fabb 	bl	8009dd2 <USBH_LL_PortDisabled>
}
 800d85c:	bf00      	nop
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d872:	2b01      	cmp	r3, #1
 800d874:	d12a      	bne.n	800d8cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d876:	4a18      	ldr	r2, [pc, #96]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d882:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d886:	4b14      	ldr	r3, [pc, #80]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d888:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d88c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d88e:	4b12      	ldr	r3, [pc, #72]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d890:	2208      	movs	r2, #8
 800d892:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d894:	4b10      	ldr	r3, [pc, #64]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d896:	2201      	movs	r2, #1
 800d898:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d89a:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d8a0:	4b0d      	ldr	r3, [pc, #52]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d8a2:	2202      	movs	r2, #2
 800d8a4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d8a6:	4b0c      	ldr	r3, [pc, #48]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d8ac:	480a      	ldr	r0, [pc, #40]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d8ae:	f7f5 fa0f 	bl	8002cd0 <HAL_HCD_Init>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d8b8:	f7f3 fadc 	bl	8000e74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d8bc:	4806      	ldr	r0, [pc, #24]	; (800d8d8 <USBH_LL_Init+0x74>)
 800d8be:	f7f5 fe13 	bl	80034e8 <HAL_HCD_GetCurrentFrame>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7fc fa3c 	bl	8009d44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20005d8c 	.word	0x20005d8c

0800d8dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7f5 fd80 	bl	80033f8 <HAL_HCD_Start>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 f990 	bl	800dc24 <USBH_Get_USB_Status>
 800d904:	4603      	mov	r3, r0
 800d906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d908:	7bbb      	ldrb	r3, [r7, #14]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d912:	b580      	push	{r7, lr}
 800d914:	b084      	sub	sp, #16
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d91a:	2300      	movs	r3, #0
 800d91c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d928:	4618      	mov	r0, r3
 800d92a:	f7f5 fd88 	bl	800343e <HAL_HCD_Stop>
 800d92e:	4603      	mov	r3, r0
 800d930:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	4618      	mov	r0, r3
 800d936:	f000 f975 	bl	800dc24 <USBH_Get_USB_Status>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d950:	2301      	movs	r3, #1
 800d952:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7f5 fdd2 	bl	8003504 <HAL_HCD_GetCurrentSpeed>
 800d960:	4603      	mov	r3, r0
 800d962:	2b01      	cmp	r3, #1
 800d964:	d007      	beq.n	800d976 <USBH_LL_GetSpeed+0x2e>
 800d966:	2b01      	cmp	r3, #1
 800d968:	d302      	bcc.n	800d970 <USBH_LL_GetSpeed+0x28>
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d006      	beq.n	800d97c <USBH_LL_GetSpeed+0x34>
 800d96e:	e008      	b.n	800d982 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d970:	2300      	movs	r3, #0
 800d972:	73fb      	strb	r3, [r7, #15]
    break;
 800d974:	e008      	b.n	800d988 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d976:	2301      	movs	r3, #1
 800d978:	73fb      	strb	r3, [r7, #15]
    break;
 800d97a:	e005      	b.n	800d988 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d97c:	2302      	movs	r3, #2
 800d97e:	73fb      	strb	r3, [r7, #15]
    break;
 800d980:	e002      	b.n	800d988 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d982:	2301      	movs	r3, #1
 800d984:	73fb      	strb	r3, [r7, #15]
    break;
 800d986:	bf00      	nop
  }
  return  speed;
 800d988:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b084      	sub	sp, #16
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7f5 fd65 	bl	8003478 <HAL_HCD_ResetPort>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f000 f935 	bl	800dc24 <USBH_Get_USB_Status>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9da:	78fa      	ldrb	r2, [r7, #3]
 800d9dc:	4611      	mov	r1, r2
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f7f5 fd6d 	bl	80034be <HAL_HCD_HC_GetXferCount>
 800d9e4:	4603      	mov	r3, r0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d9ee:	b590      	push	{r4, r7, lr}
 800d9f0:	b089      	sub	sp, #36	; 0x24
 800d9f2:	af04      	add	r7, sp, #16
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	4608      	mov	r0, r1
 800d9f8:	4611      	mov	r1, r2
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	70fb      	strb	r3, [r7, #3]
 800da00:	460b      	mov	r3, r1
 800da02:	70bb      	strb	r3, [r7, #2]
 800da04:	4613      	mov	r3, r2
 800da06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800da16:	787c      	ldrb	r4, [r7, #1]
 800da18:	78ba      	ldrb	r2, [r7, #2]
 800da1a:	78f9      	ldrb	r1, [r7, #3]
 800da1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da1e:	9302      	str	r3, [sp, #8]
 800da20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800da24:	9301      	str	r3, [sp, #4]
 800da26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	4623      	mov	r3, r4
 800da2e:	f7f5 f9b1 	bl	8002d94 <HAL_HCD_HC_Init>
 800da32:	4603      	mov	r3, r0
 800da34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800da36:	7bfb      	ldrb	r3, [r7, #15]
 800da38:	4618      	mov	r0, r3
 800da3a:	f000 f8f3 	bl	800dc24 <USBH_Get_USB_Status>
 800da3e:	4603      	mov	r3, r0
 800da40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da42:	7bbb      	ldrb	r3, [r7, #14]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd90      	pop	{r4, r7, pc}

0800da4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800da66:	78fa      	ldrb	r2, [r7, #3]
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7f5 fa2a 	bl	8002ec4 <HAL_HCD_HC_Halt>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f8d4 	bl	800dc24 <USBH_Get_USB_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da80:	7bbb      	ldrb	r3, [r7, #14]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800da8a:	b590      	push	{r4, r7, lr}
 800da8c:	b089      	sub	sp, #36	; 0x24
 800da8e:	af04      	add	r7, sp, #16
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	461a      	mov	r2, r3
 800da98:	4603      	mov	r3, r0
 800da9a:	70fb      	strb	r3, [r7, #3]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70bb      	strb	r3, [r7, #2]
 800daa0:	4613      	mov	r3, r2
 800daa2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dab2:	787c      	ldrb	r4, [r7, #1]
 800dab4:	78ba      	ldrb	r2, [r7, #2]
 800dab6:	78f9      	ldrb	r1, [r7, #3]
 800dab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dabc:	9303      	str	r3, [sp, #12]
 800dabe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dac0:	9302      	str	r3, [sp, #8]
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	4623      	mov	r3, r4
 800dace:	f7f5 fa1d 	bl	8002f0c <HAL_HCD_HC_SubmitRequest>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 f8a3 	bl	800dc24 <USBH_Get_USB_Status>
 800dade:	4603      	mov	r3, r0
 800dae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd90      	pop	{r4, r7, pc}

0800daec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dafe:	78fa      	ldrb	r2, [r7, #3]
 800db00:	4611      	mov	r1, r2
 800db02:	4618      	mov	r0, r3
 800db04:	f7f5 fcc6 	bl	8003494 <HAL_HCD_HC_GetURBState>
 800db08:	4603      	mov	r3, r0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	460b      	mov	r3, r1
 800db1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800db24:	2b01      	cmp	r3, #1
 800db26:	d103      	bne.n	800db30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800db28:	78fb      	ldrb	r3, [r7, #3]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f000 f8a6 	bl	800dc7c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800db30:	20c8      	movs	r0, #200	; 0xc8
 800db32:	f7f4 f98d 	bl	8001e50 <HAL_Delay>
  return USBH_OK;
 800db36:	2300      	movs	r3, #0
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
 800db4c:	4613      	mov	r3, r2
 800db4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800db58:	78fa      	ldrb	r2, [r7, #3]
 800db5a:	68f9      	ldr	r1, [r7, #12]
 800db5c:	4613      	mov	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	440b      	add	r3, r1
 800db66:	333b      	adds	r3, #59	; 0x3b
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00a      	beq.n	800db84 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	68f9      	ldr	r1, [r7, #12]
 800db72:	4613      	mov	r3, r2
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	00db      	lsls	r3, r3, #3
 800db7a:	440b      	add	r3, r1
 800db7c:	3350      	adds	r3, #80	; 0x50
 800db7e:	78ba      	ldrb	r2, [r7, #2]
 800db80:	701a      	strb	r2, [r3, #0]
 800db82:	e009      	b.n	800db98 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800db84:	78fa      	ldrb	r2, [r7, #3]
 800db86:	68f9      	ldr	r1, [r7, #12]
 800db88:	4613      	mov	r3, r2
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	440b      	add	r3, r1
 800db92:	3351      	adds	r3, #81	; 0x51
 800db94:	78ba      	ldrb	r2, [r7, #2]
 800db96:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b085      	sub	sp, #20
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbbc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800dbbe:	78fa      	ldrb	r2, [r7, #3]
 800dbc0:	68b9      	ldr	r1, [r7, #8]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	440b      	add	r3, r1
 800dbcc:	333b      	adds	r3, #59	; 0x3b
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00a      	beq.n	800dbea <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800dbd4:	78fa      	ldrb	r2, [r7, #3]
 800dbd6:	68b9      	ldr	r1, [r7, #8]
 800dbd8:	4613      	mov	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	4413      	add	r3, r2
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	440b      	add	r3, r1
 800dbe2:	3350      	adds	r3, #80	; 0x50
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	73fb      	strb	r3, [r7, #15]
 800dbe8:	e009      	b.n	800dbfe <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800dbea:	78fa      	ldrb	r2, [r7, #3]
 800dbec:	68b9      	ldr	r1, [r7, #8]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4413      	add	r3, r2
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	440b      	add	r3, r1
 800dbf8:	3351      	adds	r3, #81	; 0x51
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7f4 f91b 	bl	8001e50 <HAL_Delay>
}
 800dc1a:	bf00      	nop
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc32:	79fb      	ldrb	r3, [r7, #7]
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d817      	bhi.n	800dc68 <USBH_Get_USB_Status+0x44>
 800dc38:	a201      	add	r2, pc, #4	; (adr r2, 800dc40 <USBH_Get_USB_Status+0x1c>)
 800dc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3e:	bf00      	nop
 800dc40:	0800dc51 	.word	0x0800dc51
 800dc44:	0800dc57 	.word	0x0800dc57
 800dc48:	0800dc5d 	.word	0x0800dc5d
 800dc4c:	0800dc63 	.word	0x0800dc63
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800dc50:	2300      	movs	r3, #0
 800dc52:	73fb      	strb	r3, [r7, #15]
    break;
 800dc54:	e00b      	b.n	800dc6e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800dc56:	2302      	movs	r3, #2
 800dc58:	73fb      	strb	r3, [r7, #15]
    break;
 800dc5a:	e008      	b.n	800dc6e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800dc60:	e005      	b.n	800dc6e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800dc62:	2302      	movs	r3, #2
 800dc64:	73fb      	strb	r3, [r7, #15]
    break;
 800dc66:	e002      	b.n	800dc6e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800dc68:	2302      	movs	r3, #2
 800dc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc6c:	bf00      	nop
  }
  return usb_status;
 800dc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	4603      	mov	r3, r0
 800dc84:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d102      	bne.n	800dc96 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800dc90:	2301      	movs	r3, #1
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	e001      	b.n	800dc9a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800dc96:	2300      	movs	r3, #0
 800dc98:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	2101      	movs	r1, #1
 800dca0:	4803      	ldr	r0, [pc, #12]	; (800dcb0 <MX_DriverVbusFS+0x34>)
 800dca2:	f7f4 ffe3 	bl	8002c6c <HAL_GPIO_WritePin>
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	40020800 	.word	0x40020800

0800dcb4 <D16_GENERIC>:
 800dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb8:	b089      	sub	sp, #36	; 0x24
 800dcba:	68d4      	ldr	r4, [r2, #12]
 800dcbc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800dcbe:	6993      	ldr	r3, [r2, #24]
 800dcc0:	9407      	str	r4, [sp, #28]
 800dcc2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800dcc4:	9306      	str	r3, [sp, #24]
 800dcc6:	9402      	str	r4, [sp, #8]
 800dcc8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800dccc:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800dcd0:	69d3      	ldr	r3, [r2, #28]
 800dcd2:	6896      	ldr	r6, [r2, #8]
 800dcd4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800dcd6:	9103      	str	r1, [sp, #12]
 800dcd8:	2d00      	cmp	r5, #0
 800dcda:	d066      	beq.n	800ddaa <D16_GENERIC+0xf6>
 800dcdc:	f004 0510 	and.w	r5, r4, #16
 800dce0:	f004 0420 	and.w	r4, r4, #32
 800dce4:	9504      	str	r5, [sp, #16]
 800dce6:	4938      	ldr	r1, [pc, #224]	; (800ddc8 <D16_GENERIC+0x114>)
 800dce8:	9405      	str	r4, [sp, #20]
 800dcea:	f04f 0e00 	mov.w	lr, #0
 800dcee:	4635      	mov	r5, r6
 800dcf0:	e04f      	b.n	800dd92 <D16_GENERIC+0xde>
 800dcf2:	5d87      	ldrb	r7, [r0, r6]
 800dcf4:	7804      	ldrb	r4, [r0, #0]
 800dcf6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800dcfa:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800dcfe:	b2e6      	uxtb	r6, r4
 800dd00:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800dd04:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800dd08:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800dd0c:	4433      	add	r3, r6
 800dd0e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800dd12:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800dd16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd1a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800dd1e:	0aa3      	lsrs	r3, r4, #10
 800dd20:	4c2a      	ldr	r4, [pc, #168]	; (800ddcc <D16_GENERIC+0x118>)
 800dd22:	fb26 5404 	smlad	r4, r6, r4, r5
 800dd26:	4d2a      	ldr	r5, [pc, #168]	; (800ddd0 <D16_GENERIC+0x11c>)
 800dd28:	fb26 f505 	smuad	r5, r6, r5
 800dd2c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800dd30:	eb04 080a 	add.w	r8, r4, sl
 800dd34:	eba8 080b 	sub.w	r8, r8, fp
 800dd38:	4646      	mov	r6, r8
 800dd3a:	17f7      	asrs	r7, r6, #31
 800dd3c:	e9cd 6700 	strd	r6, r7, [sp]
 800dd40:	9e04      	ldr	r6, [sp, #16]
 800dd42:	f10e 0c01 	add.w	ip, lr, #1
 800dd46:	b16e      	cbz	r6, 800dd64 <D16_GENERIC+0xb0>
 800dd48:	6a16      	ldr	r6, [r2, #32]
 800dd4a:	9f01      	ldr	r7, [sp, #4]
 800dd4c:	fba8 8906 	umull	r8, r9, r8, r6
 800dd50:	fb06 9907 	mla	r9, r6, r7, r9
 800dd54:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800dd58:	f149 0900 	adc.w	r9, r9, #0
 800dd5c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800dd60:	46a3      	mov	fp, r4
 800dd62:	4654      	mov	r4, sl
 800dd64:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800dd66:	9f02      	ldr	r7, [sp, #8]
 800dd68:	0424      	lsls	r4, r4, #16
 800dd6a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dd6e:	f04f 0900 	mov.w	r9, #0
 800dd72:	fb0e fe06 	mul.w	lr, lr, r6
 800dd76:	fbc7 8904 	smlal	r8, r9, r7, r4
 800dd7a:	9e03      	ldr	r6, [sp, #12]
 800dd7c:	464f      	mov	r7, r9
 800dd7e:	10bc      	asrs	r4, r7, #2
 800dd80:	f304 040f 	ssat	r4, #16, r4
 800dd84:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800dd88:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800dd8a:	fa1f fe8c 	uxth.w	lr, ip
 800dd8e:	4574      	cmp	r4, lr
 800dd90:	d90a      	bls.n	800dda8 <D16_GENERIC+0xf4>
 800dd92:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800dd94:	2c01      	cmp	r4, #1
 800dd96:	b2e6      	uxtb	r6, r4
 800dd98:	d1ab      	bne.n	800dcf2 <D16_GENERIC+0x3e>
 800dd9a:	9e05      	ldr	r6, [sp, #20]
 800dd9c:	f850 4b02 	ldr.w	r4, [r0], #2
 800dda0:	2e00      	cmp	r6, #0
 800dda2:	d0ac      	beq.n	800dcfe <D16_GENERIC+0x4a>
 800dda4:	ba64      	rev16	r4, r4
 800dda6:	e7aa      	b.n	800dcfe <D16_GENERIC+0x4a>
 800dda8:	462e      	mov	r6, r5
 800ddaa:	9907      	ldr	r1, [sp, #28]
 800ddac:	61d3      	str	r3, [r2, #28]
 800ddae:	9b06      	ldr	r3, [sp, #24]
 800ddb0:	6096      	str	r6, [r2, #8]
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	60d1      	str	r1, [r2, #12]
 800ddb6:	f8c2 a010 	str.w	sl, [r2, #16]
 800ddba:	f8c2 b014 	str.w	fp, [r2, #20]
 800ddbe:	6193      	str	r3, [r2, #24]
 800ddc0:	b009      	add	sp, #36	; 0x24
 800ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc6:	bf00      	nop
 800ddc8:	20000000 	.word	0x20000000
 800ddcc:	00030001 	.word	0x00030001
 800ddd0:	00010003 	.word	0x00010003

0800ddd4 <D24_GENERIC>:
 800ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ddda:	6993      	ldr	r3, [r2, #24]
 800dddc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ddde:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800dde2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800dde6:	6894      	ldr	r4, [r2, #8]
 800dde8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800ddec:	b089      	sub	sp, #36	; 0x24
 800ddee:	9307      	str	r3, [sp, #28]
 800ddf0:	9503      	str	r5, [sp, #12]
 800ddf2:	69d3      	ldr	r3, [r2, #28]
 800ddf4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ddf6:	9104      	str	r1, [sp, #16]
 800ddf8:	2e00      	cmp	r6, #0
 800ddfa:	f000 8096 	beq.w	800df2a <D24_GENERIC+0x156>
 800ddfe:	f005 0610 	and.w	r6, r5, #16
 800de02:	f005 0520 	and.w	r5, r5, #32
 800de06:	4954      	ldr	r1, [pc, #336]	; (800df58 <D24_GENERIC+0x184>)
 800de08:	9605      	str	r6, [sp, #20]
 800de0a:	9506      	str	r5, [sp, #24]
 800de0c:	f04f 0e00 	mov.w	lr, #0
 800de10:	f8cd 9008 	str.w	r9, [sp, #8]
 800de14:	e06a      	b.n	800deec <D24_GENERIC+0x118>
 800de16:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800de1a:	f810 8007 	ldrb.w	r8, [r0, r7]
 800de1e:	f890 c000 	ldrb.w	ip, [r0]
 800de22:	042d      	lsls	r5, r5, #16
 800de24:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800de28:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800de2c:	44ac      	add	ip, r5
 800de2e:	4438      	add	r0, r7
 800de30:	fa5f f68c 	uxtb.w	r6, ip
 800de34:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800de38:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800de3c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800de40:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800de44:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800de48:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800de4c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800de50:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800de54:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800de58:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800de5c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800de60:	4d3e      	ldr	r5, [pc, #248]	; (800df5c <D24_GENERIC+0x188>)
 800de62:	fb26 b705 	smlad	r7, r6, r5, fp
 800de66:	4d3e      	ldr	r5, [pc, #248]	; (800df60 <D24_GENERIC+0x18c>)
 800de68:	fb26 4b05 	smlad	fp, r6, r5, r4
 800de6c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800de70:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800de74:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800de78:	2401      	movs	r4, #1
 800de7a:	fb26 f604 	smuad	r6, r6, r4
 800de7e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800de82:	9f02      	ldr	r7, [sp, #8]
 800de84:	eb0e 0c04 	add.w	ip, lr, r4
 800de88:	eb08 0406 	add.w	r4, r8, r6
 800de8c:	eb05 060a 	add.w	r6, r5, sl
 800de90:	1bf6      	subs	r6, r6, r7
 800de92:	4637      	mov	r7, r6
 800de94:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800de98:	e9cd 7800 	strd	r7, r8, [sp]
 800de9c:	9f05      	ldr	r7, [sp, #20]
 800de9e:	b177      	cbz	r7, 800debe <D24_GENERIC+0xea>
 800dea0:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800dea4:	9502      	str	r5, [sp, #8]
 800dea6:	fba6 9a08 	umull	r9, sl, r6, r8
 800deaa:	9e01      	ldr	r6, [sp, #4]
 800deac:	fb08 aa06 	mla	sl, r8, r6, sl
 800deb0:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800deb4:	f14a 0700 	adc.w	r7, sl, #0
 800deb8:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800debc:	4655      	mov	r5, sl
 800debe:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800dec0:	9f03      	ldr	r7, [sp, #12]
 800dec2:	03ad      	lsls	r5, r5, #14
 800dec4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dec8:	f04f 0900 	mov.w	r9, #0
 800decc:	fb0e fe06 	mul.w	lr, lr, r6
 800ded0:	fbc7 8905 	smlal	r8, r9, r7, r5
 800ded4:	9e04      	ldr	r6, [sp, #16]
 800ded6:	464f      	mov	r7, r9
 800ded8:	10bd      	asrs	r5, r7, #2
 800deda:	f305 050f 	ssat	r5, #16, r5
 800dede:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800dee2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800dee4:	fa1f fe8c 	uxth.w	lr, ip
 800dee8:	4575      	cmp	r5, lr
 800deea:	d91c      	bls.n	800df26 <D24_GENERIC+0x152>
 800deec:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800deee:	b2ef      	uxtb	r7, r5
 800def0:	2d01      	cmp	r5, #1
 800def2:	b23e      	sxth	r6, r7
 800def4:	d18f      	bne.n	800de16 <D24_GENERIC+0x42>
 800def6:	9d06      	ldr	r5, [sp, #24]
 800def8:	b15d      	cbz	r5, 800df12 <D24_GENERIC+0x13e>
 800defa:	f01e 0f01 	tst.w	lr, #1
 800defe:	d122      	bne.n	800df46 <D24_GENERIC+0x172>
 800df00:	7805      	ldrb	r5, [r0, #0]
 800df02:	78c7      	ldrb	r7, [r0, #3]
 800df04:	7846      	ldrb	r6, [r0, #1]
 800df06:	022d      	lsls	r5, r5, #8
 800df08:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800df0c:	44b4      	add	ip, r6
 800df0e:	3002      	adds	r0, #2
 800df10:	e78e      	b.n	800de30 <D24_GENERIC+0x5c>
 800df12:	7846      	ldrb	r6, [r0, #1]
 800df14:	f890 c002 	ldrb.w	ip, [r0, #2]
 800df18:	f810 5b03 	ldrb.w	r5, [r0], #3
 800df1c:	0236      	lsls	r6, r6, #8
 800df1e:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800df22:	44ac      	add	ip, r5
 800df24:	e784      	b.n	800de30 <D24_GENERIC+0x5c>
 800df26:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800df2a:	61d3      	str	r3, [r2, #28]
 800df2c:	9b07      	ldr	r3, [sp, #28]
 800df2e:	6094      	str	r4, [r2, #8]
 800df30:	2000      	movs	r0, #0
 800df32:	f8c2 b00c 	str.w	fp, [r2, #12]
 800df36:	f8c2 a010 	str.w	sl, [r2, #16]
 800df3a:	f8c2 9014 	str.w	r9, [r2, #20]
 800df3e:	6193      	str	r3, [r2, #24]
 800df40:	b009      	add	sp, #36	; 0x24
 800df42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df46:	78c5      	ldrb	r5, [r0, #3]
 800df48:	7887      	ldrb	r7, [r0, #2]
 800df4a:	f810 6b04 	ldrb.w	r6, [r0], #4
 800df4e:	022d      	lsls	r5, r5, #8
 800df50:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800df54:	44b4      	add	ip, r6
 800df56:	e76b      	b.n	800de30 <D24_GENERIC+0x5c>
 800df58:	20000000 	.word	0x20000000
 800df5c:	00030001 	.word	0x00030001
 800df60:	00060007 	.word	0x00060007

0800df64 <D32_GENERIC>:
 800df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800df6a:	6993      	ldr	r3, [r2, #24]
 800df6c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800df6e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800df72:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800df76:	69d6      	ldr	r6, [r2, #28]
 800df78:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800df7c:	b089      	sub	sp, #36	; 0x24
 800df7e:	9307      	str	r3, [sp, #28]
 800df80:	9403      	str	r4, [sp, #12]
 800df82:	6893      	ldr	r3, [r2, #8]
 800df84:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800df86:	9104      	str	r1, [sp, #16]
 800df88:	2d00      	cmp	r5, #0
 800df8a:	f000 809f 	beq.w	800e0cc <D32_GENERIC+0x168>
 800df8e:	f004 0510 	and.w	r5, r4, #16
 800df92:	f004 0420 	and.w	r4, r4, #32
 800df96:	9505      	str	r5, [sp, #20]
 800df98:	4953      	ldr	r1, [pc, #332]	; (800e0e8 <D32_GENERIC+0x184>)
 800df9a:	9406      	str	r4, [sp, #24]
 800df9c:	f04f 0c00 	mov.w	ip, #0
 800dfa0:	f8cd 9008 	str.w	r9, [sp, #8]
 800dfa4:	461d      	mov	r5, r3
 800dfa6:	4617      	mov	r7, r2
 800dfa8:	e077      	b.n	800e09a <D32_GENERIC+0x136>
 800dfaa:	f818 3003 	ldrb.w	r3, [r8, r3]
 800dfae:	f810 800e 	ldrb.w	r8, [r0, lr]
 800dfb2:	f810 e002 	ldrb.w	lr, [r0, r2]
 800dfb6:	7800      	ldrb	r0, [r0, #0]
 800dfb8:	041b      	lsls	r3, r3, #16
 800dfba:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800dfbe:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800dfc2:	4403      	add	r3, r0
 800dfc4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800dfc8:	b2dc      	uxtb	r4, r3
 800dfca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dfce:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800dfd2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800dfd6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800dfda:	0e1b      	lsrs	r3, r3, #24
 800dfdc:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800dfe0:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800dfe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dfe8:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800dfec:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800dff0:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800dff4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800dff8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800dffc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e000:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e004:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800e008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e00c:	4b37      	ldr	r3, [pc, #220]	; (800e0ec <D32_GENERIC+0x188>)
 800e00e:	fb22 b403 	smlad	r4, r2, r3, fp
 800e012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e016:	fb2e 4803 	smlad	r8, lr, r3, r4
 800e01a:	4b35      	ldr	r3, [pc, #212]	; (800e0f0 <D32_GENERIC+0x18c>)
 800e01c:	fb22 5503 	smlad	r5, r2, r3, r5
 800e020:	4b34      	ldr	r3, [pc, #208]	; (800e0f4 <D32_GENERIC+0x190>)
 800e022:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800e026:	2301      	movs	r3, #1
 800e028:	fb22 f203 	smuad	r2, r2, r3
 800e02c:	4b32      	ldr	r3, [pc, #200]	; (800e0f8 <D32_GENERIC+0x194>)
 800e02e:	fb2e 2503 	smlad	r5, lr, r3, r2
 800e032:	9b02      	ldr	r3, [sp, #8]
 800e034:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800e038:	eb04 080a 	add.w	r8, r4, sl
 800e03c:	eba8 0803 	sub.w	r8, r8, r3
 800e040:	4642      	mov	r2, r8
 800e042:	17d3      	asrs	r3, r2, #31
 800e044:	e9cd 2300 	strd	r2, r3, [sp]
 800e048:	9b05      	ldr	r3, [sp, #20]
 800e04a:	f10c 0e01 	add.w	lr, ip, #1
 800e04e:	b16b      	cbz	r3, 800e06c <D32_GENERIC+0x108>
 800e050:	6a3a      	ldr	r2, [r7, #32]
 800e052:	9b01      	ldr	r3, [sp, #4]
 800e054:	9402      	str	r4, [sp, #8]
 800e056:	fba8 8902 	umull	r8, r9, r8, r2
 800e05a:	fb02 9903 	mla	r9, r2, r3, r9
 800e05e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800e062:	f149 0900 	adc.w	r9, r9, #0
 800e066:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800e06a:	4654      	mov	r4, sl
 800e06c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e06e:	9a04      	ldr	r2, [sp, #16]
 800e070:	fb0c fc03 	mul.w	ip, ip, r3
 800e074:	9b03      	ldr	r3, [sp, #12]
 800e076:	0364      	lsls	r4, r4, #13
 800e078:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e07c:	f04f 0900 	mov.w	r9, #0
 800e080:	fbc3 8904 	smlal	r8, r9, r3, r4
 800e084:	464b      	mov	r3, r9
 800e086:	109b      	asrs	r3, r3, #2
 800e088:	f303 030f 	ssat	r3, #16, r3
 800e08c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800e090:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e092:	fa1f fc8e 	uxth.w	ip, lr
 800e096:	4563      	cmp	r3, ip
 800e098:	d914      	bls.n	800e0c4 <D32_GENERIC+0x160>
 800e09a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800e09c:	b2e2      	uxtb	r2, r4
 800e09e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800e0a2:	eb00 080e 	add.w	r8, r0, lr
 800e0a6:	4253      	negs	r3, r2
 800e0a8:	2c01      	cmp	r4, #1
 800e0aa:	eb08 0403 	add.w	r4, r8, r3
 800e0ae:	f47f af7c 	bne.w	800dfaa <D32_GENERIC+0x46>
 800e0b2:	1d02      	adds	r2, r0, #4
 800e0b4:	6803      	ldr	r3, [r0, #0]
 800e0b6:	9806      	ldr	r0, [sp, #24]
 800e0b8:	b110      	cbz	r0, 800e0c0 <D32_GENERIC+0x15c>
 800e0ba:	ba5b      	rev16	r3, r3
 800e0bc:	4610      	mov	r0, r2
 800e0be:	e783      	b.n	800dfc8 <D32_GENERIC+0x64>
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	e781      	b.n	800dfc8 <D32_GENERIC+0x64>
 800e0c4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e0c8:	462b      	mov	r3, r5
 800e0ca:	463a      	mov	r2, r7
 800e0cc:	6093      	str	r3, [r2, #8]
 800e0ce:	9b07      	ldr	r3, [sp, #28]
 800e0d0:	f8c2 b00c 	str.w	fp, [r2, #12]
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	61d6      	str	r6, [r2, #28]
 800e0d8:	f8c2 a010 	str.w	sl, [r2, #16]
 800e0dc:	f8c2 9014 	str.w	r9, [r2, #20]
 800e0e0:	6193      	str	r3, [r2, #24]
 800e0e2:	b009      	add	sp, #36	; 0x24
 800e0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e8:	20000000 	.word	0x20000000
 800e0ec:	00060003 	.word	0x00060003
 800e0f0:	000a000c 	.word	0x000a000c
 800e0f4:	000c000a 	.word	0x000c000a
 800e0f8:	00030006 	.word	0x00030006

0800e0fc <D48_GENERIC>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	b089      	sub	sp, #36	; 0x24
 800e102:	6953      	ldr	r3, [r2, #20]
 800e104:	68d4      	ldr	r4, [r2, #12]
 800e106:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800e108:	9302      	str	r3, [sp, #8]
 800e10a:	9400      	str	r4, [sp, #0]
 800e10c:	6993      	ldr	r3, [r2, #24]
 800e10e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e110:	9307      	str	r3, [sp, #28]
 800e112:	9403      	str	r4, [sp, #12]
 800e114:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800e118:	69d6      	ldr	r6, [r2, #28]
 800e11a:	6893      	ldr	r3, [r2, #8]
 800e11c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800e11e:	9104      	str	r1, [sp, #16]
 800e120:	2d00      	cmp	r5, #0
 800e122:	f000 80c5 	beq.w	800e2b0 <D48_GENERIC+0x1b4>
 800e126:	f004 0510 	and.w	r5, r4, #16
 800e12a:	f004 0420 	and.w	r4, r4, #32
 800e12e:	4967      	ldr	r1, [pc, #412]	; (800e2cc <D48_GENERIC+0x1d0>)
 800e130:	9505      	str	r5, [sp, #20]
 800e132:	9406      	str	r4, [sp, #24]
 800e134:	f04f 0c00 	mov.w	ip, #0
 800e138:	4657      	mov	r7, sl
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	e09c      	b.n	800e278 <D48_GENERIC+0x17c>
 800e13e:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800e142:	f810 b009 	ldrb.w	fp, [r0, r9]
 800e146:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800e14a:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800e14e:	7800      	ldrb	r0, [r0, #0]
 800e150:	0424      	lsls	r4, r4, #16
 800e152:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800e156:	f818 4005 	ldrb.w	r4, [r8, r5]
 800e15a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800e15e:	44a8      	add	r8, r5
 800e160:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800e164:	eb0b 0500 	add.w	r5, fp, r0
 800e168:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800e16c:	fa5f f885 	uxtb.w	r8, r5
 800e170:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800e174:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800e178:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800e17c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800e180:	0e2d      	lsrs	r5, r5, #24
 800e182:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800e186:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800e18a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800e18e:	b2e6      	uxtb	r6, r4
 800e190:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800e194:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e198:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800e19c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800e1a0:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800e1a4:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800e1a8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800e1ac:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800e1b0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e1b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e1b8:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800e1bc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e1c0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e1c4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e1c8:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800e1cc:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800e1d0:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800e1d4:	4c3e      	ldr	r4, [pc, #248]	; (800e2d0 <D48_GENERIC+0x1d4>)
 800e1d6:	9d00      	ldr	r5, [sp, #0]
 800e1d8:	fb2a 5404 	smlad	r4, sl, r4, r5
 800e1dc:	4d3d      	ldr	r5, [pc, #244]	; (800e2d4 <D48_GENERIC+0x1d8>)
 800e1de:	fb28 4405 	smlad	r4, r8, r5, r4
 800e1e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e1e6:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800e1ea:	4c3b      	ldr	r4, [pc, #236]	; (800e2d8 <D48_GENERIC+0x1dc>)
 800e1ec:	9b01      	ldr	r3, [sp, #4]
 800e1ee:	fb2a 3304 	smlad	r3, sl, r4, r3
 800e1f2:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800e1f6:	fb28 3304 	smlad	r3, r8, r4, r3
 800e1fa:	4c38      	ldr	r4, [pc, #224]	; (800e2dc <D48_GENERIC+0x1e0>)
 800e1fc:	fb2e 3304 	smlad	r3, lr, r4, r3
 800e200:	2501      	movs	r5, #1
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	fb2a fa05 	smuad	sl, sl, r5
 800e208:	4b35      	ldr	r3, [pc, #212]	; (800e2e0 <D48_GENERIC+0x1e4>)
 800e20a:	fb28 a803 	smlad	r8, r8, r3, sl
 800e20e:	4b35      	ldr	r3, [pc, #212]	; (800e2e4 <D48_GENERIC+0x1e8>)
 800e210:	fb2e 8303 	smlad	r3, lr, r3, r8
 800e214:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800e218:	9301      	str	r3, [sp, #4]
 800e21a:	9b02      	ldr	r3, [sp, #8]
 800e21c:	eb04 0807 	add.w	r8, r4, r7
 800e220:	eba8 0803 	sub.w	r8, r8, r3
 800e224:	9b05      	ldr	r3, [sp, #20]
 800e226:	4465      	add	r5, ip
 800e228:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800e22c:	b163      	cbz	r3, 800e248 <D48_GENERIC+0x14c>
 800e22e:	6a17      	ldr	r7, [r2, #32]
 800e230:	9402      	str	r4, [sp, #8]
 800e232:	fba8 8907 	umull	r8, r9, r8, r7
 800e236:	fb07 990b 	mla	r9, r7, fp, r9
 800e23a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800e23e:	f149 0900 	adc.w	r9, r9, #0
 800e242:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800e246:	463c      	mov	r4, r7
 800e248:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800e24c:	9b03      	ldr	r3, [sp, #12]
 800e24e:	02e4      	lsls	r4, r4, #11
 800e250:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e254:	f04f 0900 	mov.w	r9, #0
 800e258:	fb0c fc0e 	mul.w	ip, ip, lr
 800e25c:	fbc3 8904 	smlal	r8, r9, r3, r4
 800e260:	9b04      	ldr	r3, [sp, #16]
 800e262:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800e266:	f304 040f 	ssat	r4, #16, r4
 800e26a:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800e26e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800e270:	fa1f fc85 	uxth.w	ip, r5
 800e274:	4564      	cmp	r4, ip
 800e276:	d919      	bls.n	800e2ac <D48_GENERIC+0x1b0>
 800e278:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800e27a:	fa5f fe84 	uxtb.w	lr, r4
 800e27e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800e282:	f1ce 0500 	rsb	r5, lr, #0
 800e286:	eb00 0b09 	add.w	fp, r0, r9
 800e28a:	eb0b 0a05 	add.w	sl, fp, r5
 800e28e:	2c01      	cmp	r4, #1
 800e290:	eb0a 0809 	add.w	r8, sl, r9
 800e294:	f47f af53 	bne.w	800e13e <D48_GENERIC+0x42>
 800e298:	9b06      	ldr	r3, [sp, #24]
 800e29a:	6805      	ldr	r5, [r0, #0]
 800e29c:	6844      	ldr	r4, [r0, #4]
 800e29e:	3006      	adds	r0, #6
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f43f af63 	beq.w	800e16c <D48_GENERIC+0x70>
 800e2a6:	ba6d      	rev16	r5, r5
 800e2a8:	ba64      	rev16	r4, r4
 800e2aa:	e75f      	b.n	800e16c <D48_GENERIC+0x70>
 800e2ac:	9b01      	ldr	r3, [sp, #4]
 800e2ae:	46ba      	mov	sl, r7
 800e2b0:	6093      	str	r3, [r2, #8]
 800e2b2:	9b00      	ldr	r3, [sp, #0]
 800e2b4:	60d3      	str	r3, [r2, #12]
 800e2b6:	9b02      	ldr	r3, [sp, #8]
 800e2b8:	6153      	str	r3, [r2, #20]
 800e2ba:	9b07      	ldr	r3, [sp, #28]
 800e2bc:	61d6      	str	r6, [r2, #28]
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f8c2 a010 	str.w	sl, [r2, #16]
 800e2c4:	6193      	str	r3, [r2, #24]
 800e2c6:	b009      	add	sp, #36	; 0x24
 800e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2cc:	20000000 	.word	0x20000000
 800e2d0:	000f000a 	.word	0x000f000a
 800e2d4:	00060003 	.word	0x00060003
 800e2d8:	00150019 	.word	0x00150019
 800e2dc:	00190015 	.word	0x00190015
 800e2e0:	00030006 	.word	0x00030006
 800e2e4:	000a000f 	.word	0x000a000f

0800e2e8 <D64_GENERIC>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	b089      	sub	sp, #36	; 0x24
 800e2ee:	6913      	ldr	r3, [r2, #16]
 800e2f0:	6895      	ldr	r5, [r2, #8]
 800e2f2:	9303      	str	r3, [sp, #12]
 800e2f4:	9501      	str	r5, [sp, #4]
 800e2f6:	6953      	ldr	r3, [r2, #20]
 800e2f8:	68d5      	ldr	r5, [r2, #12]
 800e2fa:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800e2fc:	9304      	str	r3, [sp, #16]
 800e2fe:	9500      	str	r5, [sp, #0]
 800e300:	6993      	ldr	r3, [r2, #24]
 800e302:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800e304:	9307      	str	r3, [sp, #28]
 800e306:	9505      	str	r5, [sp, #20]
 800e308:	69d3      	ldr	r3, [r2, #28]
 800e30a:	9106      	str	r1, [sp, #24]
 800e30c:	2c00      	cmp	r4, #0
 800e30e:	f000 80d9 	beq.w	800e4c4 <D64_GENERIC+0x1dc>
 800e312:	6a11      	ldr	r1, [r2, #32]
 800e314:	9102      	str	r1, [sp, #8]
 800e316:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800e504 <D64_GENERIC+0x21c>
 800e31a:	f04f 0c00 	mov.w	ip, #0
 800e31e:	4681      	mov	r9, r0
 800e320:	e0c1      	b.n	800e4a6 <D64_GENERIC+0x1be>
 800e322:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800e326:	4274      	negs	r4, r6
 800e328:	eb09 0708 	add.w	r7, r9, r8
 800e32c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800e330:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800e334:	5d38      	ldrb	r0, [r7, r4]
 800e336:	5d29      	ldrb	r1, [r5, r4]
 800e338:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800e33c:	f819 a008 	ldrb.w	sl, [r9, r8]
 800e340:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800e344:	f899 7000 	ldrb.w	r7, [r9]
 800e348:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800e34c:	4425      	add	r5, r4
 800e34e:	0409      	lsls	r1, r1, #16
 800e350:	0400      	lsls	r0, r0, #16
 800e352:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800e356:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800e35a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800e35e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800e362:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800e366:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800e36a:	4459      	add	r1, fp
 800e36c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800e370:	4438      	add	r0, r7
 800e372:	b2c5      	uxtb	r5, r0
 800e374:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800e378:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800e37c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800e380:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800e384:	0e00      	lsrs	r0, r0, #24
 800e386:	eb03 0806 	add.w	r8, r3, r6
 800e38a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800e38e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800e392:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800e396:	b2c8      	uxtb	r0, r1
 800e398:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800e39c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800e3a0:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800e3a4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800e3a8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800e3ac:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800e3b0:	0e09      	lsrs	r1, r1, #24
 800e3b2:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800e3b6:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800e3ba:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800e3be:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800e3c2:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800e3c6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800e3ca:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800e3ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e3d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e3d6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e3da:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800e3de:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e3e2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e3e6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e3ea:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800e3ee:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800e3f2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800e3f6:	0a8b      	lsrs	r3, r1, #10
 800e3f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800e3fc:	4939      	ldr	r1, [pc, #228]	; (800e4e4 <D64_GENERIC+0x1fc>)
 800e3fe:	9c00      	ldr	r4, [sp, #0]
 800e400:	fb28 4101 	smlad	r1, r8, r1, r4
 800e404:	4c38      	ldr	r4, [pc, #224]	; (800e4e8 <D64_GENERIC+0x200>)
 800e406:	fb27 1104 	smlad	r1, r7, r4, r1
 800e40a:	4c38      	ldr	r4, [pc, #224]	; (800e4ec <D64_GENERIC+0x204>)
 800e40c:	fb20 1104 	smlad	r1, r0, r4, r1
 800e410:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800e414:	fb2a 1106 	smlad	r1, sl, r6, r1
 800e418:	4c35      	ldr	r4, [pc, #212]	; (800e4f0 <D64_GENERIC+0x208>)
 800e41a:	9d01      	ldr	r5, [sp, #4]
 800e41c:	fb28 5404 	smlad	r4, r8, r4, r5
 800e420:	4d33      	ldr	r5, [pc, #204]	; (800e4f0 <D64_GENERIC+0x208>)
 800e422:	fb2a 4415 	smladx	r4, sl, r5, r4
 800e426:	4d33      	ldr	r5, [pc, #204]	; (800e4f4 <D64_GENERIC+0x20c>)
 800e428:	fb27 4405 	smlad	r4, r7, r5, r4
 800e42c:	fb20 4415 	smladx	r4, r0, r5, r4
 800e430:	2501      	movs	r5, #1
 800e432:	9400      	str	r4, [sp, #0]
 800e434:	fb28 f805 	smuad	r8, r8, r5
 800e438:	4c2f      	ldr	r4, [pc, #188]	; (800e4f8 <D64_GENERIC+0x210>)
 800e43a:	fb27 8704 	smlad	r7, r7, r4, r8
 800e43e:	4c2f      	ldr	r4, [pc, #188]	; (800e4fc <D64_GENERIC+0x214>)
 800e440:	fb20 7004 	smlad	r0, r0, r4, r7
 800e444:	4c2e      	ldr	r4, [pc, #184]	; (800e500 <D64_GENERIC+0x218>)
 800e446:	fb2a 0004 	smlad	r0, sl, r4, r0
 800e44a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800e44e:	9902      	ldr	r1, [sp, #8]
 800e450:	9001      	str	r0, [sp, #4]
 800e452:	b189      	cbz	r1, 800e478 <D64_GENERIC+0x190>
 800e454:	9803      	ldr	r0, [sp, #12]
 800e456:	9c04      	ldr	r4, [sp, #16]
 800e458:	9604      	str	r6, [sp, #16]
 800e45a:	4430      	add	r0, r6
 800e45c:	1b00      	subs	r0, r0, r4
 800e45e:	17c5      	asrs	r5, r0, #31
 800e460:	460f      	mov	r7, r1
 800e462:	fba0 0101 	umull	r0, r1, r0, r1
 800e466:	fb07 1105 	mla	r1, r7, r5, r1
 800e46a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800e46e:	f141 0100 	adc.w	r1, r1, #0
 800e472:	0049      	lsls	r1, r1, #1
 800e474:	9103      	str	r1, [sp, #12]
 800e476:	460e      	mov	r6, r1
 800e478:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800e47a:	9905      	ldr	r1, [sp, #20]
 800e47c:	9806      	ldr	r0, [sp, #24]
 800e47e:	02b6      	lsls	r6, r6, #10
 800e480:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800e484:	f04f 0800 	mov.w	r8, #0
 800e488:	fb0c f404 	mul.w	r4, ip, r4
 800e48c:	fbc1 7806 	smlal	r7, r8, r1, r6
 800e490:	4641      	mov	r1, r8
 800e492:	1089      	asrs	r1, r1, #2
 800e494:	f301 010f 	ssat	r1, #16, r1
 800e498:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800e49c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800e49e:	f10c 0c01 	add.w	ip, ip, #1
 800e4a2:	4561      	cmp	r1, ip
 800e4a4:	dd0e      	ble.n	800e4c4 <D64_GENERIC+0x1dc>
 800e4a6:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800e4a8:	2e01      	cmp	r6, #1
 800e4aa:	f47f af3a 	bne.w	800e322 <D64_GENERIC+0x3a>
 800e4ae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800e4b0:	06b4      	lsls	r4, r6, #26
 800e4b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800e4b6:	f109 0908 	add.w	r9, r9, #8
 800e4ba:	f57f af5a 	bpl.w	800e372 <D64_GENERIC+0x8a>
 800e4be:	ba40      	rev16	r0, r0
 800e4c0:	ba49      	rev16	r1, r1
 800e4c2:	e756      	b.n	800e372 <D64_GENERIC+0x8a>
 800e4c4:	61d3      	str	r3, [r2, #28]
 800e4c6:	9b03      	ldr	r3, [sp, #12]
 800e4c8:	9901      	ldr	r1, [sp, #4]
 800e4ca:	6113      	str	r3, [r2, #16]
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	6091      	str	r1, [r2, #8]
 800e4d0:	6153      	str	r3, [r2, #20]
 800e4d2:	9900      	ldr	r1, [sp, #0]
 800e4d4:	9b07      	ldr	r3, [sp, #28]
 800e4d6:	60d1      	str	r1, [r2, #12]
 800e4d8:	2000      	movs	r0, #0
 800e4da:	6193      	str	r3, [r2, #24]
 800e4dc:	b009      	add	sp, #36	; 0x24
 800e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e2:	bf00      	nop
 800e4e4:	001c0015 	.word	0x001c0015
 800e4e8:	000f000a 	.word	0x000f000a
 800e4ec:	00060003 	.word	0x00060003
 800e4f0:	0024002a 	.word	0x0024002a
 800e4f4:	002e0030 	.word	0x002e0030
 800e4f8:	00030006 	.word	0x00030006
 800e4fc:	000a000f 	.word	0x000a000f
 800e500:	0015001c 	.word	0x0015001c
 800e504:	20000000 	.word	0x20000000

0800e508 <D80_GENERIC>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	b08b      	sub	sp, #44	; 0x2c
 800e50e:	6914      	ldr	r4, [r2, #16]
 800e510:	9404      	str	r4, [sp, #16]
 800e512:	6954      	ldr	r4, [r2, #20]
 800e514:	9405      	str	r4, [sp, #20]
 800e516:	6994      	ldr	r4, [r2, #24]
 800e518:	9409      	str	r4, [sp, #36]	; 0x24
 800e51a:	6894      	ldr	r4, [r2, #8]
 800e51c:	9402      	str	r4, [sp, #8]
 800e51e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e520:	68d4      	ldr	r4, [r2, #12]
 800e522:	9401      	str	r4, [sp, #4]
 800e524:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800e526:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800e52a:	9406      	str	r4, [sp, #24]
 800e52c:	9107      	str	r1, [sp, #28]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f000 810f 	beq.w	800e752 <D80_GENERIC+0x24a>
 800e534:	6a13      	ldr	r3, [r2, #32]
 800e536:	9308      	str	r3, [sp, #32]
 800e538:	2300      	movs	r3, #0
 800e53a:	9200      	str	r2, [sp, #0]
 800e53c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800e7a4 <D80_GENERIC+0x29c>
 800e540:	f8cd b00c 	str.w	fp, [sp, #12]
 800e544:	461a      	mov	r2, r3
 800e546:	e0ed      	b.n	800e724 <D80_GENERIC+0x21c>
 800e548:	fa5f fc8c 	uxtb.w	ip, ip
 800e54c:	fa0f f48c 	sxth.w	r4, ip
 800e550:	0066      	lsls	r6, r4, #1
 800e552:	eb06 0804 	add.w	r8, r6, r4
 800e556:	f1cc 0500 	rsb	r5, ip, #0
 800e55a:	eb00 0108 	add.w	r1, r0, r8
 800e55e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800e562:	194b      	adds	r3, r1, r5
 800e564:	5d49      	ldrb	r1, [r1, r5]
 800e566:	f810 a008 	ldrb.w	sl, [r0, r8]
 800e56a:	f813 b004 	ldrb.w	fp, [r3, r4]
 800e56e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800e572:	f890 8000 	ldrb.w	r8, [r0]
 800e576:	eb03 0e04 	add.w	lr, r3, r4
 800e57a:	eb0e 0705 	add.w	r7, lr, r5
 800e57e:	0409      	lsls	r1, r1, #16
 800e580:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800e584:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800e588:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800e58c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800e590:	eb0a 0004 	add.w	r0, sl, r4
 800e594:	041b      	lsls	r3, r3, #16
 800e596:	f81a a004 	ldrb.w	sl, [sl, r4]
 800e59a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800e59e:	5d44      	ldrb	r4, [r0, r5]
 800e5a0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800e5a4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800e5a8:	4428      	add	r0, r5
 800e5aa:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800e5ae:	4441      	add	r1, r8
 800e5b0:	4430      	add	r0, r6
 800e5b2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800e5b6:	441f      	add	r7, r3
 800e5b8:	b2cd      	uxtb	r5, r1
 800e5ba:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800e5be:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800e5c2:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800e5c6:	9b03      	ldr	r3, [sp, #12]
 800e5c8:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800e5cc:	0e09      	lsrs	r1, r1, #24
 800e5ce:	4433      	add	r3, r6
 800e5d0:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800e5d4:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800e5d8:	b2fd      	uxtb	r5, r7
 800e5da:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800e5de:	469b      	mov	fp, r3
 800e5e0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800e5e4:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800e5e8:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800e5ec:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800e5f0:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800e5f4:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800e5f8:	0e3b      	lsrs	r3, r7, #24
 800e5fa:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800e5fe:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800e602:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e606:	fa5f fe84 	uxtb.w	lr, r4
 800e60a:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800e60e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800e612:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800e616:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800e61a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800e61e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800e622:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800e626:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800e62a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e62e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e632:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e636:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e63a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e63e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e642:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800e646:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800e64a:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800e64e:	0aa3      	lsrs	r3, r4, #10
 800e650:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e654:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e658:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e65c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800e660:	9303      	str	r3, [sp, #12]
 800e662:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800e666:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800e66a:	4b42      	ldr	r3, [pc, #264]	; (800e774 <D80_GENERIC+0x26c>)
 800e66c:	9901      	ldr	r1, [sp, #4]
 800e66e:	fb2b 1303 	smlad	r3, fp, r3, r1
 800e672:	4941      	ldr	r1, [pc, #260]	; (800e778 <D80_GENERIC+0x270>)
 800e674:	fb28 3301 	smlad	r3, r8, r1, r3
 800e678:	4940      	ldr	r1, [pc, #256]	; (800e77c <D80_GENERIC+0x274>)
 800e67a:	fb2c 3301 	smlad	r3, ip, r1, r3
 800e67e:	4940      	ldr	r1, [pc, #256]	; (800e780 <D80_GENERIC+0x278>)
 800e680:	fb27 3301 	smlad	r3, r7, r1, r3
 800e684:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e688:	fb2e 3301 	smlad	r3, lr, r1, r3
 800e68c:	493d      	ldr	r1, [pc, #244]	; (800e784 <D80_GENERIC+0x27c>)
 800e68e:	9c02      	ldr	r4, [sp, #8]
 800e690:	fb2b 4401 	smlad	r4, fp, r1, r4
 800e694:	493c      	ldr	r1, [pc, #240]	; (800e788 <D80_GENERIC+0x280>)
 800e696:	fb28 4401 	smlad	r4, r8, r1, r4
 800e69a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800e69e:	fb2c 4101 	smlad	r1, ip, r1, r4
 800e6a2:	4c3a      	ldr	r4, [pc, #232]	; (800e78c <D80_GENERIC+0x284>)
 800e6a4:	fb27 1104 	smlad	r1, r7, r4, r1
 800e6a8:	4c39      	ldr	r4, [pc, #228]	; (800e790 <D80_GENERIC+0x288>)
 800e6aa:	fb2e 1104 	smlad	r1, lr, r4, r1
 800e6ae:	9101      	str	r1, [sp, #4]
 800e6b0:	2101      	movs	r1, #1
 800e6b2:	fb2b fb01 	smuad	fp, fp, r1
 800e6b6:	4937      	ldr	r1, [pc, #220]	; (800e794 <D80_GENERIC+0x28c>)
 800e6b8:	fb28 b801 	smlad	r8, r8, r1, fp
 800e6bc:	4d36      	ldr	r5, [pc, #216]	; (800e798 <D80_GENERIC+0x290>)
 800e6be:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800e6c2:	4d36      	ldr	r5, [pc, #216]	; (800e79c <D80_GENERIC+0x294>)
 800e6c4:	fb27 c705 	smlad	r7, r7, r5, ip
 800e6c8:	4d35      	ldr	r5, [pc, #212]	; (800e7a0 <D80_GENERIC+0x298>)
 800e6ca:	fb2e 7105 	smlad	r1, lr, r5, r7
 800e6ce:	9102      	str	r1, [sp, #8]
 800e6d0:	9908      	ldr	r1, [sp, #32]
 800e6d2:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800e6d6:	b181      	cbz	r1, 800e6fa <D80_GENERIC+0x1f2>
 800e6d8:	9c04      	ldr	r4, [sp, #16]
 800e6da:	9d05      	ldr	r5, [sp, #20]
 800e6dc:	9305      	str	r3, [sp, #20]
 800e6de:	441c      	add	r4, r3
 800e6e0:	1b64      	subs	r4, r4, r5
 800e6e2:	17e7      	asrs	r7, r4, #31
 800e6e4:	fba4 4501 	umull	r4, r5, r4, r1
 800e6e8:	fb01 5507 	mla	r5, r1, r7, r5
 800e6ec:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800e6f0:	f145 0500 	adc.w	r5, r5, #0
 800e6f4:	0069      	lsls	r1, r5, #1
 800e6f6:	9104      	str	r1, [sp, #16]
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	9e00      	ldr	r6, [sp, #0]
 800e6fc:	9f06      	ldr	r7, [sp, #24]
 800e6fe:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800e700:	025b      	lsls	r3, r3, #9
 800e702:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e706:	2500      	movs	r5, #0
 800e708:	fb02 f101 	mul.w	r1, r2, r1
 800e70c:	fbc7 4503 	smlal	r4, r5, r7, r3
 800e710:	9c07      	ldr	r4, [sp, #28]
 800e712:	10ab      	asrs	r3, r5, #2
 800e714:	f303 030f 	ssat	r3, #16, r3
 800e718:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800e71c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800e71e:	3201      	adds	r2, #1
 800e720:	4293      	cmp	r3, r2
 800e722:	dd13      	ble.n	800e74c <D80_GENERIC+0x244>
 800e724:	9b00      	ldr	r3, [sp, #0]
 800e726:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800e72a:	f1bc 0f01 	cmp.w	ip, #1
 800e72e:	f47f af0b 	bne.w	800e548 <D80_GENERIC+0x40>
 800e732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e734:	6884      	ldr	r4, [r0, #8]
 800e736:	069b      	lsls	r3, r3, #26
 800e738:	e890 0082 	ldmia.w	r0, {r1, r7}
 800e73c:	f100 000a 	add.w	r0, r0, #10
 800e740:	f57f af3a 	bpl.w	800e5b8 <D80_GENERIC+0xb0>
 800e744:	ba49      	rev16	r1, r1
 800e746:	ba7f      	rev16	r7, r7
 800e748:	ba64      	rev16	r4, r4
 800e74a:	e735      	b.n	800e5b8 <D80_GENERIC+0xb0>
 800e74c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e750:	4632      	mov	r2, r6
 800e752:	9b02      	ldr	r3, [sp, #8]
 800e754:	6093      	str	r3, [r2, #8]
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	60d3      	str	r3, [r2, #12]
 800e75a:	9b04      	ldr	r3, [sp, #16]
 800e75c:	6113      	str	r3, [r2, #16]
 800e75e:	9b05      	ldr	r3, [sp, #20]
 800e760:	6153      	str	r3, [r2, #20]
 800e762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e764:	f8c2 b01c 	str.w	fp, [r2, #28]
 800e768:	2000      	movs	r0, #0
 800e76a:	6193      	str	r3, [r2, #24]
 800e76c:	b00b      	add	sp, #44	; 0x2c
 800e76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e772:	bf00      	nop
 800e774:	002d0024 	.word	0x002d0024
 800e778:	001c0015 	.word	0x001c0015
 800e77c:	000f000a 	.word	0x000f000a
 800e780:	00060003 	.word	0x00060003
 800e784:	0037003f 	.word	0x0037003f
 800e788:	00450049 	.word	0x00450049
 800e78c:	00490045 	.word	0x00490045
 800e790:	003f0037 	.word	0x003f0037
 800e794:	00030006 	.word	0x00030006
 800e798:	000a000f 	.word	0x000a000f
 800e79c:	0015001c 	.word	0x0015001c
 800e7a0:	0024002d 	.word	0x0024002d
 800e7a4:	20000000 	.word	0x20000000

0800e7a8 <D128_GENERIC>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	b093      	sub	sp, #76	; 0x4c
 800e7ae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e7b0:	9005      	str	r0, [sp, #20]
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	9201      	str	r2, [sp, #4]
 800e7b6:	6912      	ldr	r2, [r2, #16]
 800e7b8:	920c      	str	r2, [sp, #48]	; 0x30
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	6940      	ldr	r0, [r0, #20]
 800e7be:	900d      	str	r0, [sp, #52]	; 0x34
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	4614      	mov	r4, r2
 800e7c4:	6992      	ldr	r2, [r2, #24]
 800e7c6:	9211      	str	r2, [sp, #68]	; 0x44
 800e7c8:	69c2      	ldr	r2, [r0, #28]
 800e7ca:	9202      	str	r2, [sp, #8]
 800e7cc:	68e2      	ldr	r2, [r4, #12]
 800e7ce:	6880      	ldr	r0, [r0, #8]
 800e7d0:	9203      	str	r2, [sp, #12]
 800e7d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e7d4:	9004      	str	r0, [sp, #16]
 800e7d6:	920e      	str	r2, [sp, #56]	; 0x38
 800e7d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f000 819b 	beq.w	800eb16 <D128_GENERIC+0x36e>
 800e7e0:	6a23      	ldr	r3, [r4, #32]
 800e7e2:	9310      	str	r3, [sp, #64]	; 0x40
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800eb90 <D128_GENERIC+0x3e8>
 800e7ea:	9306      	str	r3, [sp, #24]
 800e7ec:	e17a      	b.n	800eae4 <D128_GENERIC+0x33c>
 800e7ee:	b2d2      	uxtb	r2, r2
 800e7f0:	9d05      	ldr	r5, [sp, #20]
 800e7f2:	b214      	sxth	r4, r2
 800e7f4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800e7f8:	4250      	negs	r0, r2
 800e7fa:	eb05 010a 	add.w	r1, r5, sl
 800e7fe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e802:	eb01 0800 	add.w	r8, r1, r0
 800e806:	eb0b 0c04 	add.w	ip, fp, r4
 800e80a:	eb08 070c 	add.w	r7, r8, ip
 800e80e:	183b      	adds	r3, r7, r0
 800e810:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800e814:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800e818:	eb0e 0604 	add.w	r6, lr, r4
 800e81c:	9307      	str	r3, [sp, #28]
 800e81e:	1833      	adds	r3, r6, r0
 800e820:	9305      	str	r3, [sp, #20]
 800e822:	462b      	mov	r3, r5
 800e824:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800e828:	f8cd a020 	str.w	sl, [sp, #32]
 800e82c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800e830:	f813 c002 	ldrb.w	ip, [r3, r2]
 800e834:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800e838:	5c3a      	ldrb	r2, [r7, r0]
 800e83a:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800e83e:	781f      	ldrb	r7, [r3, #0]
 800e840:	9b07      	ldr	r3, [sp, #28]
 800e842:	9d05      	ldr	r5, [sp, #20]
 800e844:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800e848:	5c09      	ldrb	r1, [r1, r0]
 800e84a:	9709      	str	r7, [sp, #36]	; 0x24
 800e84c:	9307      	str	r3, [sp, #28]
 800e84e:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800e852:	5c33      	ldrb	r3, [r6, r0]
 800e854:	0412      	lsls	r2, r2, #16
 800e856:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800e85a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800e85e:	9d08      	ldr	r5, [sp, #32]
 800e860:	eb06 0a04 	add.w	sl, r6, r4
 800e864:	0409      	lsls	r1, r1, #16
 800e866:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800e86a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800e86e:	5d36      	ldrb	r6, [r6, r4]
 800e870:	9c05      	ldr	r4, [sp, #20]
 800e872:	042d      	lsls	r5, r5, #16
 800e874:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800e878:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800e87c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800e880:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800e884:	eb0a 0c00 	add.w	ip, sl, r0
 800e888:	041b      	lsls	r3, r3, #16
 800e88a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800e88e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800e892:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800e896:	9d07      	ldr	r5, [sp, #28]
 800e898:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800e89c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800e8a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e8a2:	4458      	add	r0, fp
 800e8a4:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800e8a8:	9005      	str	r0, [sp, #20]
 800e8aa:	4439      	add	r1, r7
 800e8ac:	442a      	add	r2, r5
 800e8ae:	44b2      	add	sl, r6
 800e8b0:	1918      	adds	r0, r3, r4
 800e8b2:	b2cb      	uxtb	r3, r1
 800e8b4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e8b8:	9e02      	ldr	r6, [sp, #8]
 800e8ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e8be:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800e8c2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800e8c6:	441e      	add	r6, r3
 800e8c8:	0e09      	lsrs	r1, r1, #24
 800e8ca:	4633      	mov	r3, r6
 800e8cc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800e8d0:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800e8d4:	b2d4      	uxtb	r4, r2
 800e8d6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e8da:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e8de:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800e8e2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800e8e6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e8ea:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800e8ee:	0e12      	lsrs	r2, r2, #24
 800e8f0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800e8f4:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800e8f8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800e8fc:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800e900:	9702      	str	r7, [sp, #8]
 800e902:	b2c2      	uxtb	r2, r0
 800e904:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800e908:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800e90c:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800e910:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800e914:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800e918:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800e91c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e920:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800e924:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800e928:	0e00      	lsrs	r0, r0, #24
 800e92a:	fa5f f68a 	uxtb.w	r6, sl
 800e92e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e932:	9309      	str	r3, [sp, #36]	; 0x24
 800e934:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800e938:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800e93c:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800e940:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800e944:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e948:	950a      	str	r5, [sp, #40]	; 0x28
 800e94a:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800e94e:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800e952:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800e956:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e95a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800e95e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e962:	920b      	str	r2, [sp, #44]	; 0x2c
 800e964:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800e968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e96a:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800e96e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e972:	9307      	str	r3, [sp, #28]
 800e974:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800e978:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800e97c:	9b02      	ldr	r3, [sp, #8]
 800e97e:	f8cd c008 	str.w	ip, [sp, #8]
 800e982:	4694      	mov	ip, r2
 800e984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e986:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800e98a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800e98e:	9a02      	ldr	r2, [sp, #8]
 800e990:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e994:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800e998:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e99c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e99e:	f8cd a020 	str.w	sl, [sp, #32]
 800e9a2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e9a6:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800e9aa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e9ae:	9b07      	ldr	r3, [sp, #28]
 800e9b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e9b4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800e9b8:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800e9bc:	9a08      	ldr	r2, [sp, #32]
 800e9be:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e9c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9c6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800e9ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e9ce:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800e9d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800e9d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e9da:	0a96      	lsrs	r6, r2, #10
 800e9dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e9e0:	9602      	str	r6, [sp, #8]
 800e9e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800e9e6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800e9ea:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800e9ee:	4e53      	ldr	r6, [pc, #332]	; (800eb3c <D128_GENERIC+0x394>)
 800e9f0:	9f03      	ldr	r7, [sp, #12]
 800e9f2:	fb2c 7606 	smlad	r6, ip, r6, r7
 800e9f6:	4f52      	ldr	r7, [pc, #328]	; (800eb40 <D128_GENERIC+0x398>)
 800e9f8:	fb2a 6607 	smlad	r6, sl, r7, r6
 800e9fc:	4f51      	ldr	r7, [pc, #324]	; (800eb44 <D128_GENERIC+0x39c>)
 800e9fe:	fb21 6607 	smlad	r6, r1, r7, r6
 800ea02:	4f51      	ldr	r7, [pc, #324]	; (800eb48 <D128_GENERIC+0x3a0>)
 800ea04:	fb24 6607 	smlad	r6, r4, r7, r6
 800ea08:	4f50      	ldr	r7, [pc, #320]	; (800eb4c <D128_GENERIC+0x3a4>)
 800ea0a:	fb28 6607 	smlad	r6, r8, r7, r6
 800ea0e:	4f50      	ldr	r7, [pc, #320]	; (800eb50 <D128_GENERIC+0x3a8>)
 800ea10:	fb20 6607 	smlad	r6, r0, r7, r6
 800ea14:	4f4f      	ldr	r7, [pc, #316]	; (800eb54 <D128_GENERIC+0x3ac>)
 800ea16:	fb23 6607 	smlad	r6, r3, r7, r6
 800ea1a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800ea1e:	fb25 6607 	smlad	r6, r5, r7, r6
 800ea22:	4f4d      	ldr	r7, [pc, #308]	; (800eb58 <D128_GENERIC+0x3b0>)
 800ea24:	9a04      	ldr	r2, [sp, #16]
 800ea26:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800ea2a:	4a4c      	ldr	r2, [pc, #304]	; (800eb5c <D128_GENERIC+0x3b4>)
 800ea2c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800ea30:	4f4b      	ldr	r7, [pc, #300]	; (800eb60 <D128_GENERIC+0x3b8>)
 800ea32:	fb21 ee07 	smlad	lr, r1, r7, lr
 800ea36:	4f4b      	ldr	r7, [pc, #300]	; (800eb64 <D128_GENERIC+0x3bc>)
 800ea38:	fb24 ee07 	smlad	lr, r4, r7, lr
 800ea3c:	4f4a      	ldr	r7, [pc, #296]	; (800eb68 <D128_GENERIC+0x3c0>)
 800ea3e:	fb28 ee07 	smlad	lr, r8, r7, lr
 800ea42:	4f4a      	ldr	r7, [pc, #296]	; (800eb6c <D128_GENERIC+0x3c4>)
 800ea44:	fb20 ee07 	smlad	lr, r0, r7, lr
 800ea48:	4f49      	ldr	r7, [pc, #292]	; (800eb70 <D128_GENERIC+0x3c8>)
 800ea4a:	fb23 e707 	smlad	r7, r3, r7, lr
 800ea4e:	f8df e144 	ldr.w	lr, [pc, #324]	; 800eb94 <D128_GENERIC+0x3ec>
 800ea52:	fb25 720e 	smlad	r2, r5, lr, r7
 800ea56:	f04f 0b01 	mov.w	fp, #1
 800ea5a:	9203      	str	r2, [sp, #12]
 800ea5c:	fb2c fb0b 	smuad	fp, ip, fp
 800ea60:	4f44      	ldr	r7, [pc, #272]	; (800eb74 <D128_GENERIC+0x3cc>)
 800ea62:	fb2a ba07 	smlad	sl, sl, r7, fp
 800ea66:	4f44      	ldr	r7, [pc, #272]	; (800eb78 <D128_GENERIC+0x3d0>)
 800ea68:	fb21 aa07 	smlad	sl, r1, r7, sl
 800ea6c:	4f43      	ldr	r7, [pc, #268]	; (800eb7c <D128_GENERIC+0x3d4>)
 800ea6e:	fb24 aa07 	smlad	sl, r4, r7, sl
 800ea72:	4f43      	ldr	r7, [pc, #268]	; (800eb80 <D128_GENERIC+0x3d8>)
 800ea74:	fb28 a707 	smlad	r7, r8, r7, sl
 800ea78:	4a42      	ldr	r2, [pc, #264]	; (800eb84 <D128_GENERIC+0x3dc>)
 800ea7a:	fb20 7702 	smlad	r7, r0, r2, r7
 800ea7e:	4a42      	ldr	r2, [pc, #264]	; (800eb88 <D128_GENERIC+0x3e0>)
 800ea80:	fb23 7702 	smlad	r7, r3, r2, r7
 800ea84:	4b41      	ldr	r3, [pc, #260]	; (800eb8c <D128_GENERIC+0x3e4>)
 800ea86:	fb25 7303 	smlad	r3, r5, r3, r7
 800ea8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ea8c:	9304      	str	r3, [sp, #16]
 800ea8e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800ea92:	b185      	cbz	r5, 800eab6 <D128_GENERIC+0x30e>
 800ea94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea96:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ea98:	960d      	str	r6, [sp, #52]	; 0x34
 800ea9a:	4432      	add	r2, r6
 800ea9c:	1a52      	subs	r2, r2, r1
 800ea9e:	17d1      	asrs	r1, r2, #31
 800eaa0:	fba2 2305 	umull	r2, r3, r2, r5
 800eaa4:	fb05 3301 	mla	r3, r5, r1, r3
 800eaa8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800eaac:	f143 0300 	adc.w	r3, r3, #0
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	930c      	str	r3, [sp, #48]	; 0x30
 800eab4:	461e      	mov	r6, r3
 800eab6:	9801      	ldr	r0, [sp, #4]
 800eab8:	9c06      	ldr	r4, [sp, #24]
 800eaba:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800eabc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800eabe:	01f6      	lsls	r6, r6, #7
 800eac0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eac4:	2300      	movs	r3, #0
 800eac6:	fbc5 2306 	smlal	r2, r3, r5, r6
 800eaca:	fb04 f101 	mul.w	r1, r4, r1
 800eace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ead0:	109b      	asrs	r3, r3, #2
 800ead2:	f303 030f 	ssat	r3, #16, r3
 800ead6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800eada:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800eadc:	1c62      	adds	r2, r4, #1
 800eade:	4293      	cmp	r3, r2
 800eae0:	9206      	str	r2, [sp, #24]
 800eae2:	dd18      	ble.n	800eb16 <D128_GENERIC+0x36e>
 800eae4:	9b01      	ldr	r3, [sp, #4]
 800eae6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eae8:	2a01      	cmp	r2, #1
 800eaea:	f47f ae80 	bne.w	800e7ee <D128_GENERIC+0x46>
 800eaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf0:	9d05      	ldr	r5, [sp, #20]
 800eaf2:	069b      	lsls	r3, r3, #26
 800eaf4:	6829      	ldr	r1, [r5, #0]
 800eaf6:	686a      	ldr	r2, [r5, #4]
 800eaf8:	68a8      	ldr	r0, [r5, #8]
 800eafa:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800eafe:	f105 0410 	add.w	r4, r5, #16
 800eb02:	d506      	bpl.n	800eb12 <D128_GENERIC+0x36a>
 800eb04:	ba49      	rev16	r1, r1
 800eb06:	ba52      	rev16	r2, r2
 800eb08:	ba40      	rev16	r0, r0
 800eb0a:	fa9a fa9a 	rev16.w	sl, sl
 800eb0e:	9405      	str	r4, [sp, #20]
 800eb10:	e6cf      	b.n	800e8b2 <D128_GENERIC+0x10a>
 800eb12:	9405      	str	r4, [sp, #20]
 800eb14:	e6cd      	b.n	800e8b2 <D128_GENERIC+0x10a>
 800eb16:	9a01      	ldr	r2, [sp, #4]
 800eb18:	9904      	ldr	r1, [sp, #16]
 800eb1a:	6091      	str	r1, [r2, #8]
 800eb1c:	9903      	ldr	r1, [sp, #12]
 800eb1e:	60d1      	str	r1, [r2, #12]
 800eb20:	9b02      	ldr	r3, [sp, #8]
 800eb22:	61d3      	str	r3, [r2, #28]
 800eb24:	4611      	mov	r1, r2
 800eb26:	4613      	mov	r3, r2
 800eb28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eb2a:	610a      	str	r2, [r1, #16]
 800eb2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eb2e:	6159      	str	r1, [r3, #20]
 800eb30:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eb32:	6199      	str	r1, [r3, #24]
 800eb34:	2000      	movs	r0, #0
 800eb36:	b013      	add	sp, #76	; 0x4c
 800eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3c:	00780069 	.word	0x00780069
 800eb40:	005b004e 	.word	0x005b004e
 800eb44:	00420037 	.word	0x00420037
 800eb48:	002d0024 	.word	0x002d0024
 800eb4c:	001c0015 	.word	0x001c0015
 800eb50:	000f000a 	.word	0x000f000a
 800eb54:	00060003 	.word	0x00060003
 800eb58:	00880096 	.word	0x00880096
 800eb5c:	00a200ac 	.word	0x00a200ac
 800eb60:	00b400ba 	.word	0x00b400ba
 800eb64:	00be00c0 	.word	0x00be00c0
 800eb68:	00c000be 	.word	0x00c000be
 800eb6c:	00ba00b4 	.word	0x00ba00b4
 800eb70:	00ac00a2 	.word	0x00ac00a2
 800eb74:	00030006 	.word	0x00030006
 800eb78:	000a000f 	.word	0x000a000f
 800eb7c:	0015001c 	.word	0x0015001c
 800eb80:	0024002d 	.word	0x0024002d
 800eb84:	00370042 	.word	0x00370042
 800eb88:	004e005b 	.word	0x004e005b
 800eb8c:	00690078 	.word	0x00690078
 800eb90:	20000000 	.word	0x20000000
 800eb94:	00960088 	.word	0x00960088

0800eb98 <D16_1CH_HTONS_VOL_HP>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	4691      	mov	r9, r2
 800eb9e:	b083      	sub	sp, #12
 800eba0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800eba2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800eba6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	4680      	mov	r8, r0
 800ebae:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800ebb2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ebb6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ebba:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800ebbe:	9401      	str	r4, [sp, #4]
 800ebc0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800ebc4:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800ebc8:	2a00      	cmp	r2, #0
 800ebca:	d04e      	beq.n	800ec6a <D16_1CH_HTONS_VOL_HP+0xd2>
 800ebcc:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800ec78 <D16_1CH_HTONS_VOL_HP+0xe0>
 800ebd0:	1e8c      	subs	r4, r1, #2
 800ebd2:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800ebd6:	f858 2b02 	ldr.w	r2, [r8], #2
 800ebda:	ba52      	rev16	r2, r2
 800ebdc:	b2d6      	uxtb	r6, r2
 800ebde:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ebe2:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800ebe6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800ebea:	4413      	add	r3, r2
 800ebec:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800ebf0:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800ebf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ebf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ebfc:	0a93      	lsrs	r3, r2, #10
 800ebfe:	4a1c      	ldr	r2, [pc, #112]	; (800ec70 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800ec00:	fb21 5202 	smlad	r2, r1, r2, r5
 800ec04:	4d1b      	ldr	r5, [pc, #108]	; (800ec74 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800ec06:	fb21 f505 	smuad	r5, r1, r5
 800ec0a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800ec0e:	4410      	add	r0, r2
 800ec10:	1bc0      	subs	r0, r0, r7
 800ec12:	17c7      	asrs	r7, r0, #31
 800ec14:	fba0 010e 	umull	r0, r1, r0, lr
 800ec18:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800ec1c:	fb0e 1107 	mla	r1, lr, r7, r1
 800ec20:	f141 0100 	adc.w	r1, r1, #0
 800ec24:	0448      	lsls	r0, r1, #17
 800ec26:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ec2a:	2700      	movs	r7, #0
 800ec2c:	fbc0 670a 	smlal	r6, r7, r0, sl
 800ec30:	45d8      	cmp	r8, fp
 800ec32:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800ec36:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800ec3a:	4617      	mov	r7, r2
 800ec3c:	f301 010f 	ssat	r1, #16, r1
 800ec40:	f824 1f02 	strh.w	r1, [r4, #2]!
 800ec44:	d1c7      	bne.n	800ebd6 <D16_1CH_HTONS_VOL_HP+0x3e>
 800ec46:	9901      	ldr	r1, [sp, #4]
 800ec48:	f8c9 301c 	str.w	r3, [r9, #28]
 800ec4c:	9b00      	ldr	r3, [sp, #0]
 800ec4e:	f8c9 0010 	str.w	r0, [r9, #16]
 800ec52:	2000      	movs	r0, #0
 800ec54:	f8c9 5008 	str.w	r5, [r9, #8]
 800ec58:	f8c9 100c 	str.w	r1, [r9, #12]
 800ec5c:	f8c9 2014 	str.w	r2, [r9, #20]
 800ec60:	f8c9 3018 	str.w	r3, [r9, #24]
 800ec64:	b003      	add	sp, #12
 800ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6a:	463a      	mov	r2, r7
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	e7eb      	b.n	800ec48 <D16_1CH_HTONS_VOL_HP+0xb0>
 800ec70:	00030001 	.word	0x00030001
 800ec74:	00010003 	.word	0x00010003
 800ec78:	20000000 	.word	0x20000000

0800ec7c <D24_1CH_HTONS_VOL_HP>:
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec80:	b089      	sub	sp, #36	; 0x24
 800ec82:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ec84:	6996      	ldr	r6, [r2, #24]
 800ec86:	9304      	str	r3, [sp, #16]
 800ec88:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800ec8a:	9207      	str	r2, [sp, #28]
 800ec8c:	6915      	ldr	r5, [r2, #16]
 800ec8e:	6954      	ldr	r4, [r2, #20]
 800ec90:	9606      	str	r6, [sp, #24]
 800ec92:	6893      	ldr	r3, [r2, #8]
 800ec94:	69d6      	ldr	r6, [r2, #28]
 800ec96:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800ec9a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800ec9e:	9a04      	ldr	r2, [sp, #16]
 800eca0:	9705      	str	r7, [sp, #20]
 800eca2:	2a00      	cmp	r2, #0
 800eca4:	d07e      	beq.n	800eda4 <D24_1CH_HTONS_VOL_HP+0x128>
 800eca6:	f1a1 0b02 	sub.w	fp, r1, #2
 800ecaa:	2700      	movs	r7, #0
 800ecac:	46a8      	mov	r8, r5
 800ecae:	f8cd b004 	str.w	fp, [sp, #4]
 800ecb2:	4655      	mov	r5, sl
 800ecb4:	46e3      	mov	fp, ip
 800ecb6:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800edb0 <D24_1CH_HTONS_VOL_HP+0x134>
 800ecba:	46ba      	mov	sl, r7
 800ecbc:	469c      	mov	ip, r3
 800ecbe:	e055      	b.n	800ed6c <D24_1CH_HTONS_VOL_HP+0xf0>
 800ecc0:	7802      	ldrb	r2, [r0, #0]
 800ecc2:	78c3      	ldrb	r3, [r0, #3]
 800ecc4:	7841      	ldrb	r1, [r0, #1]
 800ecc6:	0212      	lsls	r2, r2, #8
 800ecc8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800eccc:	440b      	add	r3, r1
 800ecce:	3002      	adds	r0, #2
 800ecd0:	b2d9      	uxtb	r1, r3
 800ecd2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ecd6:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800ecda:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800ecde:	0c1b      	lsrs	r3, r3, #16
 800ece0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800ece4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800ece8:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800ecec:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800ecf0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800ecf4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800ecf8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ecfc:	4a2a      	ldr	r2, [pc, #168]	; (800eda8 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800ecfe:	fb23 b102 	smlad	r1, r3, r2, fp
 800ed02:	4a2a      	ldr	r2, [pc, #168]	; (800edac <D24_1CH_HTONS_VOL_HP+0x130>)
 800ed04:	fb23 cb02 	smlad	fp, r3, r2, ip
 800ed08:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800ed0c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800ed10:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800ed14:	2201      	movs	r2, #1
 800ed16:	fb23 f702 	smuad	r7, r3, r2
 800ed1a:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800ed1e:	eb01 0208 	add.w	r2, r1, r8
 800ed22:	1b12      	subs	r2, r2, r4
 800ed24:	17d4      	asrs	r4, r2, #31
 800ed26:	fba2 2305 	umull	r2, r3, r2, r5
 800ed2a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ed2e:	fb05 3304 	mla	r3, r5, r4, r3
 800ed32:	f143 0300 	adc.w	r3, r3, #0
 800ed36:	9c05      	ldr	r4, [sp, #20]
 800ed38:	03da      	lsls	r2, r3, #15
 800ed3a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ed3e:	f04f 0900 	mov.w	r9, #0
 800ed42:	fbc4 8902 	smlal	r8, r9, r4, r2
 800ed46:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ed4a:	9a01      	ldr	r2, [sp, #4]
 800ed4c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800ed50:	9b03      	ldr	r3, [sp, #12]
 800ed52:	109b      	asrs	r3, r3, #2
 800ed54:	f303 030f 	ssat	r3, #16, r3
 800ed58:	f822 3f02 	strh.w	r3, [r2, #2]!
 800ed5c:	9b04      	ldr	r3, [sp, #16]
 800ed5e:	9201      	str	r2, [sp, #4]
 800ed60:	f10a 0a01 	add.w	sl, sl, #1
 800ed64:	459a      	cmp	sl, r3
 800ed66:	44bc      	add	ip, r7
 800ed68:	460c      	mov	r4, r1
 800ed6a:	d00b      	beq.n	800ed84 <D24_1CH_HTONS_VOL_HP+0x108>
 800ed6c:	f01a 0f01 	tst.w	sl, #1
 800ed70:	d0a6      	beq.n	800ecc0 <D24_1CH_HTONS_VOL_HP+0x44>
 800ed72:	78c2      	ldrb	r2, [r0, #3]
 800ed74:	7883      	ldrb	r3, [r0, #2]
 800ed76:	f810 1b04 	ldrb.w	r1, [r0], #4
 800ed7a:	0212      	lsls	r2, r2, #8
 800ed7c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800ed80:	440b      	add	r3, r1
 800ed82:	e7a5      	b.n	800ecd0 <D24_1CH_HTONS_VOL_HP+0x54>
 800ed84:	4663      	mov	r3, ip
 800ed86:	4645      	mov	r5, r8
 800ed88:	46dc      	mov	ip, fp
 800ed8a:	9807      	ldr	r0, [sp, #28]
 800ed8c:	6141      	str	r1, [r0, #20]
 800ed8e:	9906      	ldr	r1, [sp, #24]
 800ed90:	6083      	str	r3, [r0, #8]
 800ed92:	f8c0 c00c 	str.w	ip, [r0, #12]
 800ed96:	61c6      	str	r6, [r0, #28]
 800ed98:	6105      	str	r5, [r0, #16]
 800ed9a:	6181      	str	r1, [r0, #24]
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	b009      	add	sp, #36	; 0x24
 800eda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eda4:	4621      	mov	r1, r4
 800eda6:	e7f0      	b.n	800ed8a <D24_1CH_HTONS_VOL_HP+0x10e>
 800eda8:	00030001 	.word	0x00030001
 800edac:	00060007 	.word	0x00060007
 800edb0:	20000000 	.word	0x20000000

0800edb4 <D32_1CH_HTONS_VOL_HP>:
 800edb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb8:	4692      	mov	sl, r2
 800edba:	b087      	sub	sp, #28
 800edbc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800edbe:	f8da 3018 	ldr.w	r3, [sl, #24]
 800edc2:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800edc6:	9304      	str	r3, [sp, #16]
 800edc8:	f8da 4010 	ldr.w	r4, [sl, #16]
 800edcc:	f8da 8014 	ldr.w	r8, [sl, #20]
 800edd0:	f8da 601c 	ldr.w	r6, [sl, #28]
 800edd4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800edd8:	f8da e00c 	ldr.w	lr, [sl, #12]
 800eddc:	9501      	str	r5, [sp, #4]
 800edde:	f8da c020 	ldr.w	ip, [sl, #32]
 800ede2:	2a00      	cmp	r2, #0
 800ede4:	d07b      	beq.n	800eede <D32_1CH_HTONS_VOL_HP+0x12a>
 800ede6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800edea:	4f3e      	ldr	r7, [pc, #248]	; (800eee4 <D32_1CH_HTONS_VOL_HP+0x130>)
 800edec:	f8cd c00c 	str.w	ip, [sp, #12]
 800edf0:	9202      	str	r2, [sp, #8]
 800edf2:	460d      	mov	r5, r1
 800edf4:	46a1      	mov	r9, r4
 800edf6:	4684      	mov	ip, r0
 800edf8:	f8cd a014 	str.w	sl, [sp, #20]
 800edfc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ee00:	ba49      	rev16	r1, r1
 800ee02:	b2c8      	uxtb	r0, r1
 800ee04:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800ee08:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800ee0c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800ee10:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800ee14:	0e09      	lsrs	r1, r1, #24
 800ee16:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800ee1a:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800ee1e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800ee22:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800ee26:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800ee2a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800ee2e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ee32:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800ee36:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ee3a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ee3e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800ee42:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800ee46:	4a28      	ldr	r2, [pc, #160]	; (800eee8 <D32_1CH_HTONS_VOL_HP+0x134>)
 800ee48:	fb20 e202 	smlad	r2, r0, r2, lr
 800ee4c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ee50:	fb2a 2101 	smlad	r1, sl, r1, r2
 800ee54:	4a25      	ldr	r2, [pc, #148]	; (800eeec <D32_1CH_HTONS_VOL_HP+0x138>)
 800ee56:	fb20 3302 	smlad	r3, r0, r2, r3
 800ee5a:	4a25      	ldr	r2, [pc, #148]	; (800eef0 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800ee5c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800ee60:	2301      	movs	r3, #1
 800ee62:	fb20 f003 	smuad	r0, r0, r3
 800ee66:	4b23      	ldr	r3, [pc, #140]	; (800eef4 <D32_1CH_HTONS_VOL_HP+0x140>)
 800ee68:	fb2a 0303 	smlad	r3, sl, r3, r0
 800ee6c:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800ee70:	9c03      	ldr	r4, [sp, #12]
 800ee72:	eb02 0009 	add.w	r0, r2, r9
 800ee76:	eba0 0008 	sub.w	r0, r0, r8
 800ee7a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800ee7e:	fba0 0104 	umull	r0, r1, r0, r4
 800ee82:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800ee86:	fb04 110b 	mla	r1, r4, fp, r1
 800ee8a:	f141 0100 	adc.w	r1, r1, #0
 800ee8e:	9c01      	ldr	r4, [sp, #4]
 800ee90:	0388      	lsls	r0, r1, #14
 800ee92:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800ee96:	f04f 0900 	mov.w	r9, #0
 800ee9a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800ee9e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800eea2:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800eea6:	f300 000f 	ssat	r0, #16, r0
 800eeaa:	9902      	ldr	r1, [sp, #8]
 800eeac:	f825 0b02 	strh.w	r0, [r5], #2
 800eeb0:	428d      	cmp	r5, r1
 800eeb2:	4690      	mov	r8, r2
 800eeb4:	d1a2      	bne.n	800edfc <D32_1CH_HTONS_VOL_HP+0x48>
 800eeb6:	f8dd a014 	ldr.w	sl, [sp, #20]
 800eeba:	464c      	mov	r4, r9
 800eebc:	f8ca 3008 	str.w	r3, [sl, #8]
 800eec0:	9b04      	ldr	r3, [sp, #16]
 800eec2:	f8ca e00c 	str.w	lr, [sl, #12]
 800eec6:	2000      	movs	r0, #0
 800eec8:	f8ca 601c 	str.w	r6, [sl, #28]
 800eecc:	f8ca 4010 	str.w	r4, [sl, #16]
 800eed0:	f8ca 2014 	str.w	r2, [sl, #20]
 800eed4:	f8ca 3018 	str.w	r3, [sl, #24]
 800eed8:	b007      	add	sp, #28
 800eeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eede:	4642      	mov	r2, r8
 800eee0:	e7ec      	b.n	800eebc <D32_1CH_HTONS_VOL_HP+0x108>
 800eee2:	bf00      	nop
 800eee4:	20000000 	.word	0x20000000
 800eee8:	00060003 	.word	0x00060003
 800eeec:	000a000c 	.word	0x000a000c
 800eef0:	000c000a 	.word	0x000c000a
 800eef4:	00030006 	.word	0x00030006

0800eef8 <D48_1CH_HTONS_VOL_HP>:
 800eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	4613      	mov	r3, r2
 800eefe:	461c      	mov	r4, r3
 800ef00:	b087      	sub	sp, #28
 800ef02:	4625      	mov	r5, r4
 800ef04:	4626      	mov	r6, r4
 800ef06:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800ef08:	9205      	str	r2, [sp, #20]
 800ef0a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800ef0c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800ef10:	9501      	str	r5, [sp, #4]
 800ef12:	4680      	mov	r8, r0
 800ef14:	6a35      	ldr	r5, [r6, #32]
 800ef16:	6918      	ldr	r0, [r3, #16]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	9304      	str	r3, [sp, #16]
 800ef1c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800ef20:	68a3      	ldr	r3, [r4, #8]
 800ef22:	9502      	str	r5, [sp, #8]
 800ef24:	68e4      	ldr	r4, [r4, #12]
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	f000 808c 	beq.w	800f044 <D48_1CH_HTONS_VOL_HP+0x14c>
 800ef2c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ef30:	4d45      	ldr	r5, [pc, #276]	; (800f048 <D48_1CH_HTONS_VOL_HP+0x150>)
 800ef32:	9203      	str	r2, [sp, #12]
 800ef34:	468c      	mov	ip, r1
 800ef36:	e898 0044 	ldmia.w	r8, {r2, r6}
 800ef3a:	f108 0806 	add.w	r8, r8, #6
 800ef3e:	ba52      	rev16	r2, r2
 800ef40:	ba76      	rev16	r6, r6
 800ef42:	b2d7      	uxtb	r7, r2
 800ef44:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ef48:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800ef4c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800ef50:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800ef54:	0e12      	lsrs	r2, r2, #24
 800ef56:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800ef5a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800ef5e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ef62:	fa5f fb86 	uxtb.w	fp, r6
 800ef66:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800ef6a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800ef6e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800ef72:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800ef76:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800ef7a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800ef7e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800ef82:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800ef86:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ef8a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ef8e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800ef92:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ef96:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ef9a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ef9e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800efa2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800efa6:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800efaa:	4a28      	ldr	r2, [pc, #160]	; (800f04c <D48_1CH_HTONS_VOL_HP+0x154>)
 800efac:	fb2a 4202 	smlad	r2, sl, r2, r4
 800efb0:	4927      	ldr	r1, [pc, #156]	; (800f050 <D48_1CH_HTONS_VOL_HP+0x158>)
 800efb2:	fb27 2201 	smlad	r2, r7, r1, r2
 800efb6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800efba:	fb26 2201 	smlad	r2, r6, r1, r2
 800efbe:	4925      	ldr	r1, [pc, #148]	; (800f054 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800efc0:	fb2a 3401 	smlad	r4, sl, r1, r3
 800efc4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800efc8:	fb27 4403 	smlad	r4, r7, r3, r4
 800efcc:	4b22      	ldr	r3, [pc, #136]	; (800f058 <D48_1CH_HTONS_VOL_HP+0x160>)
 800efce:	fb26 4403 	smlad	r4, r6, r3, r4
 800efd2:	2101      	movs	r1, #1
 800efd4:	fb2a fa01 	smuad	sl, sl, r1
 800efd8:	4b20      	ldr	r3, [pc, #128]	; (800f05c <D48_1CH_HTONS_VOL_HP+0x164>)
 800efda:	fb27 a703 	smlad	r7, r7, r3, sl
 800efde:	4b20      	ldr	r3, [pc, #128]	; (800f060 <D48_1CH_HTONS_VOL_HP+0x168>)
 800efe0:	fb26 7303 	smlad	r3, r6, r3, r7
 800efe4:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800efe8:	9e02      	ldr	r6, [sp, #8]
 800efea:	9f01      	ldr	r7, [sp, #4]
 800efec:	4410      	add	r0, r2
 800efee:	eba0 0009 	sub.w	r0, r0, r9
 800eff2:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800eff6:	fba0 0106 	umull	r0, r1, r0, r6
 800effa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800effe:	fb06 110a 	mla	r1, r6, sl, r1
 800f002:	f141 0100 	adc.w	r1, r1, #0
 800f006:	0308      	lsls	r0, r1, #12
 800f008:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800f00c:	f04f 0a00 	mov.w	sl, #0
 800f010:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800f014:	4657      	mov	r7, sl
 800f016:	10b8      	asrs	r0, r7, #2
 800f018:	f300 000f 	ssat	r0, #16, r0
 800f01c:	f82c 0b02 	strh.w	r0, [ip], #2
 800f020:	0048      	lsls	r0, r1, #1
 800f022:	9903      	ldr	r1, [sp, #12]
 800f024:	458c      	cmp	ip, r1
 800f026:	4691      	mov	r9, r2
 800f028:	d185      	bne.n	800ef36 <D48_1CH_HTONS_VOL_HP+0x3e>
 800f02a:	9d05      	ldr	r5, [sp, #20]
 800f02c:	616a      	str	r2, [r5, #20]
 800f02e:	9a04      	ldr	r2, [sp, #16]
 800f030:	6128      	str	r0, [r5, #16]
 800f032:	2000      	movs	r0, #0
 800f034:	60ab      	str	r3, [r5, #8]
 800f036:	60ec      	str	r4, [r5, #12]
 800f038:	f8c5 e01c 	str.w	lr, [r5, #28]
 800f03c:	61aa      	str	r2, [r5, #24]
 800f03e:	b007      	add	sp, #28
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	464a      	mov	r2, r9
 800f046:	e7f0      	b.n	800f02a <D48_1CH_HTONS_VOL_HP+0x132>
 800f048:	20000000 	.word	0x20000000
 800f04c:	000f000a 	.word	0x000f000a
 800f050:	00060003 	.word	0x00060003
 800f054:	00150019 	.word	0x00150019
 800f058:	00190015 	.word	0x00190015
 800f05c:	00030006 	.word	0x00030006
 800f060:	000a000f 	.word	0x000a000f

0800f064 <D64_1CH_HTONS_VOL_HP>:
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	b089      	sub	sp, #36	; 0x24
 800f06a:	4614      	mov	r4, r2
 800f06c:	9207      	str	r2, [sp, #28]
 800f06e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800f070:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800f074:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800f078:	6992      	ldr	r2, [r2, #24]
 800f07a:	9206      	str	r2, [sp, #24]
 800f07c:	68e2      	ldr	r2, [r4, #12]
 800f07e:	9201      	str	r2, [sp, #4]
 800f080:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f082:	9203      	str	r2, [sp, #12]
 800f084:	6a22      	ldr	r2, [r4, #32]
 800f086:	69e5      	ldr	r5, [r4, #28]
 800f088:	68a6      	ldr	r6, [r4, #8]
 800f08a:	9204      	str	r2, [sp, #16]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f000 80b0 	beq.w	800f1f2 <D64_1CH_HTONS_VOL_HP+0x18e>
 800f092:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f096:	4f58      	ldr	r7, [pc, #352]	; (800f1f8 <D64_1CH_HTONS_VOL_HP+0x194>)
 800f098:	9305      	str	r3, [sp, #20]
 800f09a:	9102      	str	r1, [sp, #8]
 800f09c:	f850 2b08 	ldr.w	r2, [r0], #8
 800f0a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f0a4:	ba52      	rev16	r2, r2
 800f0a6:	fa93 f993 	rev16.w	r9, r3
 800f0aa:	b2d4      	uxtb	r4, r2
 800f0ac:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f0b0:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800f0b4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f0b8:	9901      	ldr	r1, [sp, #4]
 800f0ba:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f0be:	0e12      	lsrs	r2, r2, #24
 800f0c0:	44ab      	add	fp, r5
 800f0c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f0c6:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800f0ca:	fa5f f289 	uxtb.w	r2, r9
 800f0ce:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800f0d2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800f0d6:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800f0da:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800f0de:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f0e2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800f0e6:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800f0ea:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800f0ee:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800f0f2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800f0f6:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800f0fa:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800f0fe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800f102:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800f106:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800f10a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800f10e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f116:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f11a:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800f11e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800f122:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800f126:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f12a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800f12e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800f132:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f136:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800f13a:	4b30      	ldr	r3, [pc, #192]	; (800f1fc <D64_1CH_HTONS_VOL_HP+0x198>)
 800f13c:	fb2b 1303 	smlad	r3, fp, r3, r1
 800f140:	492f      	ldr	r1, [pc, #188]	; (800f200 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800f142:	fb24 3301 	smlad	r3, r4, r1, r3
 800f146:	492f      	ldr	r1, [pc, #188]	; (800f204 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800f148:	fb22 3301 	smlad	r3, r2, r1, r3
 800f14c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800f150:	fb2e 390a 	smlad	r9, lr, sl, r3
 800f154:	4b2c      	ldr	r3, [pc, #176]	; (800f208 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800f156:	fb2b 6603 	smlad	r6, fp, r3, r6
 800f15a:	fb2e 6613 	smladx	r6, lr, r3, r6
 800f15e:	4b2b      	ldr	r3, [pc, #172]	; (800f20c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800f160:	fb24 6603 	smlad	r6, r4, r3, r6
 800f164:	fb22 6313 	smladx	r3, r2, r3, r6
 800f168:	f04f 0a01 	mov.w	sl, #1
 800f16c:	9301      	str	r3, [sp, #4]
 800f16e:	fb2b fb0a 	smuad	fp, fp, sl
 800f172:	4b27      	ldr	r3, [pc, #156]	; (800f210 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800f174:	fb24 ba03 	smlad	sl, r4, r3, fp
 800f178:	4b26      	ldr	r3, [pc, #152]	; (800f214 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800f17a:	fb22 a203 	smlad	r2, r2, r3, sl
 800f17e:	4b26      	ldr	r3, [pc, #152]	; (800f218 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800f180:	fb2e 2603 	smlad	r6, lr, r3, r2
 800f184:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800f188:	eb0a 020c 	add.w	r2, sl, ip
 800f18c:	9c04      	ldr	r4, [sp, #16]
 800f18e:	9903      	ldr	r1, [sp, #12]
 800f190:	eba2 0208 	sub.w	r2, r2, r8
 800f194:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800f198:	fba2 2304 	umull	r2, r3, r2, r4
 800f19c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f1a0:	fb04 3309 	mla	r3, r4, r9, r3
 800f1a4:	f143 0300 	adc.w	r3, r3, #0
 800f1a8:	02da      	lsls	r2, r3, #11
 800f1aa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800f1ae:	f04f 0900 	mov.w	r9, #0
 800f1b2:	fbc1 8902 	smlal	r8, r9, r1, r2
 800f1b6:	9902      	ldr	r1, [sp, #8]
 800f1b8:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800f1bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800f1c0:	f302 020f 	ssat	r2, #16, r2
 800f1c4:	9b05      	ldr	r3, [sp, #20]
 800f1c6:	f821 2b02 	strh.w	r2, [r1], #2
 800f1ca:	4299      	cmp	r1, r3
 800f1cc:	9102      	str	r1, [sp, #8]
 800f1ce:	46d0      	mov	r8, sl
 800f1d0:	f47f af64 	bne.w	800f09c <D64_1CH_HTONS_VOL_HP+0x38>
 800f1d4:	9a07      	ldr	r2, [sp, #28]
 800f1d6:	9901      	ldr	r1, [sp, #4]
 800f1d8:	60d1      	str	r1, [r2, #12]
 800f1da:	9906      	ldr	r1, [sp, #24]
 800f1dc:	6096      	str	r6, [r2, #8]
 800f1de:	2000      	movs	r0, #0
 800f1e0:	61d5      	str	r5, [r2, #28]
 800f1e2:	f8c2 c010 	str.w	ip, [r2, #16]
 800f1e6:	f8c2 a014 	str.w	sl, [r2, #20]
 800f1ea:	6191      	str	r1, [r2, #24]
 800f1ec:	b009      	add	sp, #36	; 0x24
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	46c2      	mov	sl, r8
 800f1f4:	4622      	mov	r2, r4
 800f1f6:	e7ee      	b.n	800f1d6 <D64_1CH_HTONS_VOL_HP+0x172>
 800f1f8:	20000000 	.word	0x20000000
 800f1fc:	001c0015 	.word	0x001c0015
 800f200:	000f000a 	.word	0x000f000a
 800f204:	00060003 	.word	0x00060003
 800f208:	0024002a 	.word	0x0024002a
 800f20c:	002e0030 	.word	0x002e0030
 800f210:	00030006 	.word	0x00030006
 800f214:	000a000f 	.word	0x000a000f
 800f218:	0015001c 	.word	0x0015001c

0800f21c <D80_1CH_HTONS_VOL_HP>:
 800f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	4613      	mov	r3, r2
 800f222:	b089      	sub	sp, #36	; 0x24
 800f224:	4686      	mov	lr, r0
 800f226:	6918      	ldr	r0, [r3, #16]
 800f228:	9000      	str	r0, [sp, #0]
 800f22a:	4618      	mov	r0, r3
 800f22c:	461c      	mov	r4, r3
 800f22e:	695b      	ldr	r3, [r3, #20]
 800f230:	9302      	str	r3, [sp, #8]
 800f232:	6983      	ldr	r3, [r0, #24]
 800f234:	9306      	str	r3, [sp, #24]
 800f236:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800f23a:	69c3      	ldr	r3, [r0, #28]
 800f23c:	68c0      	ldr	r0, [r0, #12]
 800f23e:	9207      	str	r2, [sp, #28]
 800f240:	9001      	str	r0, [sp, #4]
 800f242:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800f244:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f246:	9003      	str	r0, [sp, #12]
 800f248:	6a20      	ldr	r0, [r4, #32]
 800f24a:	9004      	str	r0, [sp, #16]
 800f24c:	2a00      	cmp	r2, #0
 800f24e:	f000 80d2 	beq.w	800f3f6 <D80_1CH_HTONS_VOL_HP+0x1da>
 800f252:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f256:	4869      	ldr	r0, [pc, #420]	; (800f3fc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800f258:	9205      	str	r2, [sp, #20]
 800f25a:	461c      	mov	r4, r3
 800f25c:	f8de 5000 	ldr.w	r5, [lr]
 800f260:	f8de 2004 	ldr.w	r2, [lr, #4]
 800f264:	f8de 3008 	ldr.w	r3, [lr, #8]
 800f268:	f10e 0e0a 	add.w	lr, lr, #10
 800f26c:	ba6d      	rev16	r5, r5
 800f26e:	ba52      	rev16	r2, r2
 800f270:	fa93 fb93 	rev16.w	fp, r3
 800f274:	b2ee      	uxtb	r6, r5
 800f276:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800f27a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800f27e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800f282:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800f286:	eb04 0a07 	add.w	sl, r4, r7
 800f28a:	0e2d      	lsrs	r5, r5, #24
 800f28c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800f290:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800f294:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800f298:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800f29c:	b2d5      	uxtb	r5, r2
 800f29e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800f2a2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800f2a6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800f2aa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f2ae:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800f2b2:	0e12      	lsrs	r2, r2, #24
 800f2b4:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800f2b8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800f2bc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800f2c0:	fa5f f48b 	uxtb.w	r4, fp
 800f2c4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800f2c8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800f2cc:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800f2d0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800f2d4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800f2d8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800f2dc:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800f2e0:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800f2e4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f2e8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800f2ec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800f2f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f2f4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800f2f8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800f2fc:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800f300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f304:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800f308:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800f30c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f310:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800f314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800f318:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800f31c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800f320:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800f324:	4d36      	ldr	r5, [pc, #216]	; (800f400 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800f326:	9f01      	ldr	r7, [sp, #4]
 800f328:	fb23 7505 	smlad	r5, r3, r5, r7
 800f32c:	4f35      	ldr	r7, [pc, #212]	; (800f404 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800f32e:	fb29 5507 	smlad	r5, r9, r7, r5
 800f332:	4f35      	ldr	r7, [pc, #212]	; (800f408 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800f334:	fb28 5507 	smlad	r5, r8, r7, r5
 800f338:	4f34      	ldr	r7, [pc, #208]	; (800f40c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800f33a:	fb22 5507 	smlad	r5, r2, r7, r5
 800f33e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800f342:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800f346:	4d32      	ldr	r5, [pc, #200]	; (800f410 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800f348:	fb23 cc05 	smlad	ip, r3, r5, ip
 800f34c:	4d31      	ldr	r5, [pc, #196]	; (800f414 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800f34e:	fb29 cc05 	smlad	ip, r9, r5, ip
 800f352:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800f356:	fb28 c505 	smlad	r5, r8, r5, ip
 800f35a:	4f2f      	ldr	r7, [pc, #188]	; (800f418 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800f35c:	fb22 5507 	smlad	r5, r2, r7, r5
 800f360:	4f2e      	ldr	r7, [pc, #184]	; (800f41c <D80_1CH_HTONS_VOL_HP+0x200>)
 800f362:	fb26 5507 	smlad	r5, r6, r7, r5
 800f366:	f04f 0a01 	mov.w	sl, #1
 800f36a:	9501      	str	r5, [sp, #4]
 800f36c:	fb23 fa0a 	smuad	sl, r3, sl
 800f370:	4b2b      	ldr	r3, [pc, #172]	; (800f420 <D80_1CH_HTONS_VOL_HP+0x204>)
 800f372:	fb29 a903 	smlad	r9, r9, r3, sl
 800f376:	4d2b      	ldr	r5, [pc, #172]	; (800f424 <D80_1CH_HTONS_VOL_HP+0x208>)
 800f378:	fb28 9805 	smlad	r8, r8, r5, r9
 800f37c:	4d2a      	ldr	r5, [pc, #168]	; (800f428 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800f37e:	fb22 8205 	smlad	r2, r2, r5, r8
 800f382:	4b2a      	ldr	r3, [pc, #168]	; (800f42c <D80_1CH_HTONS_VOL_HP+0x210>)
 800f384:	fb26 2c03 	smlad	ip, r6, r3, r2
 800f388:	9b00      	ldr	r3, [sp, #0]
 800f38a:	9d04      	ldr	r5, [sp, #16]
 800f38c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800f390:	4453      	add	r3, sl
 800f392:	461a      	mov	r2, r3
 800f394:	9b02      	ldr	r3, [sp, #8]
 800f396:	f8cd a008 	str.w	sl, [sp, #8]
 800f39a:	1ad2      	subs	r2, r2, r3
 800f39c:	17d7      	asrs	r7, r2, #31
 800f39e:	fba2 2305 	umull	r2, r3, r2, r5
 800f3a2:	fb05 3307 	mla	r3, r5, r7, r3
 800f3a6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f3aa:	f143 0300 	adc.w	r3, r3, #0
 800f3ae:	9d03      	ldr	r5, [sp, #12]
 800f3b0:	029a      	lsls	r2, r3, #10
 800f3b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f3b6:	2700      	movs	r7, #0
 800f3b8:	005b      	lsls	r3, r3, #1
 800f3ba:	fbc5 6702 	smlal	r6, r7, r5, r2
 800f3be:	10ba      	asrs	r2, r7, #2
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	f302 020f 	ssat	r2, #16, r2
 800f3c6:	9b05      	ldr	r3, [sp, #20]
 800f3c8:	f821 2b02 	strh.w	r2, [r1], #2
 800f3cc:	4299      	cmp	r1, r3
 800f3ce:	f47f af45 	bne.w	800f25c <D80_1CH_HTONS_VOL_HP+0x40>
 800f3d2:	4623      	mov	r3, r4
 800f3d4:	9907      	ldr	r1, [sp, #28]
 800f3d6:	9801      	ldr	r0, [sp, #4]
 800f3d8:	60c8      	str	r0, [r1, #12]
 800f3da:	9a00      	ldr	r2, [sp, #0]
 800f3dc:	f8c1 c008 	str.w	ip, [r1, #8]
 800f3e0:	4608      	mov	r0, r1
 800f3e2:	61cb      	str	r3, [r1, #28]
 800f3e4:	610a      	str	r2, [r1, #16]
 800f3e6:	f8c1 a014 	str.w	sl, [r1, #20]
 800f3ea:	9906      	ldr	r1, [sp, #24]
 800f3ec:	6181      	str	r1, [r0, #24]
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	b009      	add	sp, #36	; 0x24
 800f3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f6:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f3fa:	e7eb      	b.n	800f3d4 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800f3fc:	20000000 	.word	0x20000000
 800f400:	002d0024 	.word	0x002d0024
 800f404:	001c0015 	.word	0x001c0015
 800f408:	000f000a 	.word	0x000f000a
 800f40c:	00060003 	.word	0x00060003
 800f410:	0037003f 	.word	0x0037003f
 800f414:	00450049 	.word	0x00450049
 800f418:	00490045 	.word	0x00490045
 800f41c:	003f0037 	.word	0x003f0037
 800f420:	00030006 	.word	0x00030006
 800f424:	000a000f 	.word	0x000a000f
 800f428:	0015001c 	.word	0x0015001c
 800f42c:	0024002d 	.word	0x0024002d

0800f430 <D128_1CH_HTONS_VOL_HP>:
 800f430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f434:	b093      	sub	sp, #76	; 0x4c
 800f436:	4614      	mov	r4, r2
 800f438:	9211      	str	r2, [sp, #68]	; 0x44
 800f43a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800f43c:	6912      	ldr	r2, [r2, #16]
 800f43e:	9203      	str	r2, [sp, #12]
 800f440:	4622      	mov	r2, r4
 800f442:	4615      	mov	r5, r2
 800f444:	6964      	ldr	r4, [r4, #20]
 800f446:	9406      	str	r4, [sp, #24]
 800f448:	4614      	mov	r4, r2
 800f44a:	6992      	ldr	r2, [r2, #24]
 800f44c:	9210      	str	r2, [sp, #64]	; 0x40
 800f44e:	68ea      	ldr	r2, [r5, #12]
 800f450:	9204      	str	r2, [sp, #16]
 800f452:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f454:	69e6      	ldr	r6, [r4, #28]
 800f456:	920d      	str	r2, [sp, #52]	; 0x34
 800f458:	68a4      	ldr	r4, [r4, #8]
 800f45a:	6a2a      	ldr	r2, [r5, #32]
 800f45c:	9405      	str	r4, [sp, #20]
 800f45e:	920e      	str	r2, [sp, #56]	; 0x38
 800f460:	2b00      	cmp	r3, #0
 800f462:	f000 8145 	beq.w	800f6f0 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800f466:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f46a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f46c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800f74c <D128_1CH_HTONS_VOL_HP+0x31c>
 800f470:	9107      	str	r1, [sp, #28]
 800f472:	f100 0310 	add.w	r3, r0, #16
 800f476:	4699      	mov	r9, r3
 800f478:	f1a9 0110 	sub.w	r1, r9, #16
 800f47c:	c90e      	ldmia	r1, {r1, r2, r3}
 800f47e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800f482:	ba49      	rev16	r1, r1
 800f484:	ba52      	rev16	r2, r2
 800f486:	ba5b      	rev16	r3, r3
 800f488:	fa90 fa90 	rev16.w	sl, r0
 800f48c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800f490:	b2cc      	uxtb	r4, r1
 800f492:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800f496:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800f49a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800f49e:	0e09      	lsrs	r1, r1, #24
 800f4a0:	4426      	add	r6, r4
 800f4a2:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800f4a6:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800f4aa:	b2d0      	uxtb	r0, r2
 800f4ac:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800f4b0:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800f4b4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800f4b8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800f4bc:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800f4c0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800f4c4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800f4c8:	0e12      	lsrs	r2, r2, #24
 800f4ca:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800f4ce:	9701      	str	r7, [sp, #4]
 800f4d0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800f4d4:	4627      	mov	r7, r4
 800f4d6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800f4da:	9702      	str	r7, [sp, #8]
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800f4e2:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800f4e6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800f4ea:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800f4ee:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800f4f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f4f6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800f4fa:	0e1b      	lsrs	r3, r3, #24
 800f4fc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800f500:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800f504:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800f508:	fa5f f38a 	uxtb.w	r3, sl
 800f50c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f510:	960a      	str	r6, [sp, #40]	; 0x28
 800f512:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800f516:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800f51a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f51e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800f522:	950b      	str	r5, [sp, #44]	; 0x2c
 800f524:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800f528:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800f52c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800f530:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800f534:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800f538:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800f53c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800f540:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800f544:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800f548:	9308      	str	r3, [sp, #32]
 800f54a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800f54e:	9b01      	ldr	r3, [sp, #4]
 800f550:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800f554:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f558:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800f55c:	9b02      	ldr	r3, [sp, #8]
 800f55e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f562:	9302      	str	r3, [sp, #8]
 800f564:	9b08      	ldr	r3, [sp, #32]
 800f566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f56a:	9308      	str	r3, [sp, #32]
 800f56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f56e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800f572:	950c      	str	r5, [sp, #48]	; 0x30
 800f574:	461d      	mov	r5, r3
 800f576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f578:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800f57c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800f580:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800f584:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800f588:	9301      	str	r3, [sp, #4]
 800f58a:	9b02      	ldr	r3, [sp, #8]
 800f58c:	9202      	str	r2, [sp, #8]
 800f58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f590:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f592:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800f596:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800f59a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800f59e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800f5a2:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800f5a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f5aa:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800f5ae:	9b08      	ldr	r3, [sp, #32]
 800f5b0:	9f01      	ldr	r7, [sp, #4]
 800f5b2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800f5b6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800f5ba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800f5be:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800f5c2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800f5c6:	46be      	mov	lr, r7
 800f5c8:	0a96      	lsrs	r6, r2, #10
 800f5ca:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800f5ce:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800f5d2:	4f49      	ldr	r7, [pc, #292]	; (800f6f8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800f5d4:	9a04      	ldr	r2, [sp, #16]
 800f5d6:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800f5da:	4a48      	ldr	r2, [pc, #288]	; (800f6fc <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800f5dc:	fb2a ee02 	smlad	lr, sl, r2, lr
 800f5e0:	4a47      	ldr	r2, [pc, #284]	; (800f700 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800f5e2:	fb21 ee02 	smlad	lr, r1, r2, lr
 800f5e6:	4a47      	ldr	r2, [pc, #284]	; (800f704 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800f5e8:	fb24 ee02 	smlad	lr, r4, r2, lr
 800f5ec:	4a46      	ldr	r2, [pc, #280]	; (800f708 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800f5ee:	9f02      	ldr	r7, [sp, #8]
 800f5f0:	fb27 ee02 	smlad	lr, r7, r2, lr
 800f5f4:	4a45      	ldr	r2, [pc, #276]	; (800f70c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800f5f6:	fb20 ee02 	smlad	lr, r0, r2, lr
 800f5fa:	4a45      	ldr	r2, [pc, #276]	; (800f710 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800f5fc:	fb23 e702 	smlad	r7, r3, r2, lr
 800f600:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800f604:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800f608:	9f01      	ldr	r7, [sp, #4]
 800f60a:	4a42      	ldr	r2, [pc, #264]	; (800f714 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800f60c:	46bc      	mov	ip, r7
 800f60e:	9f05      	ldr	r7, [sp, #20]
 800f610:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800f614:	4a40      	ldr	r2, [pc, #256]	; (800f718 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800f616:	fb2a cc02 	smlad	ip, sl, r2, ip
 800f61a:	4f40      	ldr	r7, [pc, #256]	; (800f71c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800f61c:	fb21 cc07 	smlad	ip, r1, r7, ip
 800f620:	4f3f      	ldr	r7, [pc, #252]	; (800f720 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800f622:	fb24 cc07 	smlad	ip, r4, r7, ip
 800f626:	4f3f      	ldr	r7, [pc, #252]	; (800f724 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800f628:	9a02      	ldr	r2, [sp, #8]
 800f62a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800f62e:	4f3e      	ldr	r7, [pc, #248]	; (800f728 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800f630:	fb20 cc07 	smlad	ip, r0, r7, ip
 800f634:	4f3d      	ldr	r7, [pc, #244]	; (800f72c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800f636:	fb23 c707 	smlad	r7, r3, r7, ip
 800f63a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800f750 <D128_1CH_HTONS_VOL_HP+0x320>
 800f63e:	fb25 720c 	smlad	r2, r5, ip, r7
 800f642:	f04f 0b01 	mov.w	fp, #1
 800f646:	9204      	str	r2, [sp, #16]
 800f648:	9f01      	ldr	r7, [sp, #4]
 800f64a:	fb27 fb0b 	smuad	fp, r7, fp
 800f64e:	4f38      	ldr	r7, [pc, #224]	; (800f730 <D128_1CH_HTONS_VOL_HP+0x300>)
 800f650:	fb2a ba07 	smlad	sl, sl, r7, fp
 800f654:	4f37      	ldr	r7, [pc, #220]	; (800f734 <D128_1CH_HTONS_VOL_HP+0x304>)
 800f656:	fb21 aa07 	smlad	sl, r1, r7, sl
 800f65a:	4f37      	ldr	r7, [pc, #220]	; (800f738 <D128_1CH_HTONS_VOL_HP+0x308>)
 800f65c:	fb24 aa07 	smlad	sl, r4, r7, sl
 800f660:	4f36      	ldr	r7, [pc, #216]	; (800f73c <D128_1CH_HTONS_VOL_HP+0x30c>)
 800f662:	9a02      	ldr	r2, [sp, #8]
 800f664:	fb22 a707 	smlad	r7, r2, r7, sl
 800f668:	4a35      	ldr	r2, [pc, #212]	; (800f740 <D128_1CH_HTONS_VOL_HP+0x310>)
 800f66a:	fb20 7702 	smlad	r7, r0, r2, r7
 800f66e:	4a35      	ldr	r2, [pc, #212]	; (800f744 <D128_1CH_HTONS_VOL_HP+0x314>)
 800f670:	fb23 7702 	smlad	r7, r3, r2, r7
 800f674:	4b34      	ldr	r3, [pc, #208]	; (800f748 <D128_1CH_HTONS_VOL_HP+0x318>)
 800f676:	fb25 7303 	smlad	r3, r5, r3, r7
 800f67a:	9305      	str	r3, [sp, #20]
 800f67c:	9b03      	ldr	r3, [sp, #12]
 800f67e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800f680:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800f684:	4473      	add	r3, lr
 800f686:	461a      	mov	r2, r3
 800f688:	9b06      	ldr	r3, [sp, #24]
 800f68a:	f8cd e018 	str.w	lr, [sp, #24]
 800f68e:	1ad2      	subs	r2, r2, r3
 800f690:	17d1      	asrs	r1, r2, #31
 800f692:	fba2 2304 	umull	r2, r3, r2, r4
 800f696:	fb04 3301 	mla	r3, r4, r1, r3
 800f69a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800f69e:	f143 0300 	adc.w	r3, r3, #0
 800f6a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f6a4:	021a      	lsls	r2, r3, #8
 800f6a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	fbc4 0102 	smlal	r0, r1, r4, r2
 800f6b0:	108a      	asrs	r2, r1, #2
 800f6b2:	9907      	ldr	r1, [sp, #28]
 800f6b4:	f302 020f 	ssat	r2, #16, r2
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	f821 2b02 	strh.w	r2, [r1], #2
 800f6be:	9303      	str	r3, [sp, #12]
 800f6c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6c2:	9107      	str	r1, [sp, #28]
 800f6c4:	4299      	cmp	r1, r3
 800f6c6:	f109 0910 	add.w	r9, r9, #16
 800f6ca:	f47f aed5 	bne.w	800f478 <D128_1CH_HTONS_VOL_HP+0x48>
 800f6ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f6d0:	9905      	ldr	r1, [sp, #20]
 800f6d2:	6091      	str	r1, [r2, #8]
 800f6d4:	9904      	ldr	r1, [sp, #16]
 800f6d6:	60d1      	str	r1, [r2, #12]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	61d6      	str	r6, [r2, #28]
 800f6dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f6de:	9a03      	ldr	r2, [sp, #12]
 800f6e0:	611a      	str	r2, [r3, #16]
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	f8c3 e014 	str.w	lr, [r3, #20]
 800f6e8:	6199      	str	r1, [r3, #24]
 800f6ea:	b013      	add	sp, #76	; 0x4c
 800f6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f0:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f6f4:	e7eb      	b.n	800f6ce <D128_1CH_HTONS_VOL_HP+0x29e>
 800f6f6:	bf00      	nop
 800f6f8:	00780069 	.word	0x00780069
 800f6fc:	005b004e 	.word	0x005b004e
 800f700:	00420037 	.word	0x00420037
 800f704:	002d0024 	.word	0x002d0024
 800f708:	001c0015 	.word	0x001c0015
 800f70c:	000f000a 	.word	0x000f000a
 800f710:	00060003 	.word	0x00060003
 800f714:	00880096 	.word	0x00880096
 800f718:	00a200ac 	.word	0x00a200ac
 800f71c:	00b400ba 	.word	0x00b400ba
 800f720:	00be00c0 	.word	0x00be00c0
 800f724:	00c000be 	.word	0x00c000be
 800f728:	00ba00b4 	.word	0x00ba00b4
 800f72c:	00ac00a2 	.word	0x00ac00a2
 800f730:	00030006 	.word	0x00030006
 800f734:	000a000f 	.word	0x000a000f
 800f738:	0015001c 	.word	0x0015001c
 800f73c:	0024002d 	.word	0x0024002d
 800f740:	00370042 	.word	0x00370042
 800f744:	004e005b 	.word	0x004e005b
 800f748:	00690078 	.word	0x00690078
 800f74c:	20000000 	.word	0x20000000
 800f750:	00960088 	.word	0x00960088

0800f754 <PDM_Filter_Init>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	2240      	movs	r2, #64	; 0x40
 800f758:	4604      	mov	r4, r0
 800f75a:	2100      	movs	r1, #0
 800f75c:	300c      	adds	r0, #12
 800f75e:	f000 fa14 	bl	800fb8a <memset>
 800f762:	493b      	ldr	r1, [pc, #236]	; (800f850 <PDM_Filter_Init+0xfc>)
 800f764:	483b      	ldr	r0, [pc, #236]	; (800f854 <PDM_Filter_Init+0x100>)
 800f766:	f000 f98d 	bl	800fa84 <CRC_Lock>
 800f76a:	8822      	ldrh	r2, [r4, #0]
 800f76c:	8963      	ldrh	r3, [r4, #10]
 800f76e:	4938      	ldr	r1, [pc, #224]	; (800f850 <PDM_Filter_Init+0xfc>)
 800f770:	8925      	ldrh	r5, [r4, #8]
 800f772:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f774:	2801      	cmp	r0, #1
 800f776:	f04f 0300 	mov.w	r3, #0
 800f77a:	bf18      	it	ne
 800f77c:	2100      	movne	r1, #0
 800f77e:	2a01      	cmp	r2, #1
 800f780:	6461      	str	r1, [r4, #68]	; 0x44
 800f782:	86e5      	strh	r5, [r4, #54]	; 0x36
 800f784:	61a3      	str	r3, [r4, #24]
 800f786:	6123      	str	r3, [r4, #16]
 800f788:	6163      	str	r3, [r4, #20]
 800f78a:	60e3      	str	r3, [r4, #12]
 800f78c:	6263      	str	r3, [r4, #36]	; 0x24
 800f78e:	61e3      	str	r3, [r4, #28]
 800f790:	6223      	str	r3, [r4, #32]
 800f792:	6423      	str	r3, [r4, #64]	; 0x40
 800f794:	d918      	bls.n	800f7c8 <PDM_Filter_Init+0x74>
 800f796:	2003      	movs	r0, #3
 800f798:	2302      	movs	r3, #2
 800f79a:	8862      	ldrh	r2, [r4, #2]
 800f79c:	2a01      	cmp	r2, #1
 800f79e:	d91d      	bls.n	800f7dc <PDM_Filter_Init+0x88>
 800f7a0:	2140      	movs	r1, #64	; 0x40
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f7a6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800f7aa:	6862      	ldr	r2, [r4, #4]
 800f7ac:	bf04      	itt	eq
 800f7ae:	6421      	streq	r1, [r4, #64]	; 0x40
 800f7b0:	460b      	moveq	r3, r1
 800f7b2:	b11a      	cbz	r2, 800f7bc <PDM_Filter_Init+0x68>
 800f7b4:	f043 0310 	orr.w	r3, r3, #16
 800f7b8:	6423      	str	r3, [r4, #64]	; 0x40
 800f7ba:	62e2      	str	r2, [r4, #44]	; 0x2c
 800f7bc:	2200      	movs	r2, #0
 800f7be:	8722      	strh	r2, [r4, #56]	; 0x38
 800f7c0:	b908      	cbnz	r0, 800f7c6 <PDM_Filter_Init+0x72>
 800f7c2:	3380      	adds	r3, #128	; 0x80
 800f7c4:	6423      	str	r3, [r4, #64]	; 0x40
 800f7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c8:	4d23      	ldr	r5, [pc, #140]	; (800f858 <PDM_Filter_Init+0x104>)
 800f7ca:	d010      	beq.n	800f7ee <PDM_Filter_Init+0x9a>
 800f7cc:	782a      	ldrb	r2, [r5, #0]
 800f7ce:	2a01      	cmp	r2, #1
 800f7d0:	d027      	beq.n	800f822 <PDM_Filter_Init+0xce>
 800f7d2:	8862      	ldrh	r2, [r4, #2]
 800f7d4:	2a01      	cmp	r2, #1
 800f7d6:	f04f 0001 	mov.w	r0, #1
 800f7da:	d8e1      	bhi.n	800f7a0 <PDM_Filter_Init+0x4c>
 800f7dc:	d001      	beq.n	800f7e2 <PDM_Filter_Init+0x8e>
 800f7de:	4618      	mov	r0, r3
 800f7e0:	e7de      	b.n	800f7a0 <PDM_Filter_Init+0x4c>
 800f7e2:	2220      	movs	r2, #32
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	6422      	str	r2, [r4, #64]	; 0x40
 800f7e8:	4613      	mov	r3, r2
 800f7ea:	2160      	movs	r1, #96	; 0x60
 800f7ec:	e7da      	b.n	800f7a4 <PDM_Filter_Init+0x50>
 800f7ee:	7829      	ldrb	r1, [r5, #0]
 800f7f0:	2900      	cmp	r1, #0
 800f7f2:	d1ee      	bne.n	800f7d2 <PDM_Filter_Init+0x7e>
 800f7f4:	4919      	ldr	r1, [pc, #100]	; (800f85c <PDM_Filter_Init+0x108>)
 800f7f6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800f864 <PDM_Filter_Init+0x110>
 800f7fa:	4f19      	ldr	r7, [pc, #100]	; (800f860 <PDM_Filter_Init+0x10c>)
 800f7fc:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800f800:	684a      	ldr	r2, [r1, #4]
 800f802:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800f806:	ea02 0007 	and.w	r0, r2, r7
 800f80a:	4303      	orrs	r3, r0
 800f80c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800f810:	4413      	add	r3, r2
 800f812:	f841 3f04 	str.w	r3, [r1, #4]!
 800f816:	428e      	cmp	r6, r1
 800f818:	d1f2      	bne.n	800f800 <PDM_Filter_Init+0xac>
 800f81a:	2001      	movs	r0, #1
 800f81c:	7028      	strb	r0, [r5, #0]
 800f81e:	2300      	movs	r3, #0
 800f820:	e7bb      	b.n	800f79a <PDM_Filter_Init+0x46>
 800f822:	490e      	ldr	r1, [pc, #56]	; (800f85c <PDM_Filter_Init+0x108>)
 800f824:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800f864 <PDM_Filter_Init+0x110>
 800f828:	4f0d      	ldr	r7, [pc, #52]	; (800f860 <PDM_Filter_Init+0x10c>)
 800f82a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800f82e:	684a      	ldr	r2, [r1, #4]
 800f830:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800f834:	ea02 0007 	and.w	r0, r2, r7
 800f838:	4303      	orrs	r3, r0
 800f83a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800f83e:	4413      	add	r3, r2
 800f840:	f841 3f04 	str.w	r3, [r1, #4]!
 800f844:	428e      	cmp	r6, r1
 800f846:	d1f2      	bne.n	800f82e <PDM_Filter_Init+0xda>
 800f848:	2300      	movs	r3, #0
 800f84a:	702b      	strb	r3, [r5, #0]
 800f84c:	e7c1      	b.n	800f7d2 <PDM_Filter_Init+0x7e>
 800f84e:	bf00      	nop
 800f850:	b5e8b5cd 	.word	0xb5e8b5cd
 800f854:	f407a5c2 	.word	0xf407a5c2
 800f858:	200004b0 	.word	0x200004b0
 800f85c:	1ffffffc 	.word	0x1ffffffc
 800f860:	000ffc00 	.word	0x000ffc00
 800f864:	3ff00000 	.word	0x3ff00000

0800f868 <PDM_Filter_setConfig>:
 800f868:	4b66      	ldr	r3, [pc, #408]	; (800fa04 <PDM_Filter_setConfig+0x19c>)
 800f86a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d001      	beq.n	800f874 <PDM_Filter_setConfig+0xc>
 800f870:	2004      	movs	r0, #4
 800f872:	4770      	bx	lr
 800f874:	b530      	push	{r4, r5, lr}
 800f876:	880a      	ldrh	r2, [r1, #0]
 800f878:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f87a:	ed2d 8b04 	vpush	{d8-d9}
 800f87e:	4604      	mov	r4, r0
 800f880:	460d      	mov	r5, r1
 800f882:	1e51      	subs	r1, r2, #1
 800f884:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800f888:	2906      	cmp	r1, #6
 800f88a:	b083      	sub	sp, #12
 800f88c:	6420      	str	r0, [r4, #64]	; 0x40
 800f88e:	d91a      	bls.n	800f8c6 <PDM_Filter_setConfig+0x5e>
 800f890:	2008      	movs	r0, #8
 800f892:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800f896:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f89a:	4299      	cmp	r1, r3
 800f89c:	d07e      	beq.n	800f99c <PDM_Filter_setConfig+0x134>
 800f89e:	f113 0f0c 	cmn.w	r3, #12
 800f8a2:	da2a      	bge.n	800f8fa <PDM_Filter_setConfig+0x92>
 800f8a4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800f8a8:	3040      	adds	r0, #64	; 0x40
 800f8aa:	80ab      	strh	r3, [r5, #4]
 800f8ac:	8622      	strh	r2, [r4, #48]	; 0x30
 800f8ae:	886b      	ldrh	r3, [r5, #2]
 800f8b0:	8663      	strh	r3, [r4, #50]	; 0x32
 800f8b2:	b920      	cbnz	r0, 800f8be <PDM_Filter_setConfig+0x56>
 800f8b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8ba:	6423      	str	r3, [r4, #64]	; 0x40
 800f8bc:	2000      	movs	r0, #0
 800f8be:	b003      	add	sp, #12
 800f8c0:	ecbd 8b04 	vpop	{d8-d9}
 800f8c4:	bd30      	pop	{r4, r5, pc}
 800f8c6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800f8c8:	4291      	cmp	r1, r2
 800f8ca:	d06c      	beq.n	800f9a6 <PDM_Filter_setConfig+0x13e>
 800f8cc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800f8d0:	f023 0301 	bic.w	r3, r3, #1
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800f8da:	6423      	str	r3, [r4, #64]	; 0x40
 800f8dc:	2970      	cmp	r1, #112	; 0x70
 800f8de:	f003 030f 	and.w	r3, r3, #15
 800f8e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f8e6:	d066      	beq.n	800f9b6 <PDM_Filter_setConfig+0x14e>
 800f8e8:	2b06      	cmp	r3, #6
 800f8ea:	f200 8089 	bhi.w	800fa00 <PDM_Filter_setConfig+0x198>
 800f8ee:	e8df f003 	tbb	[pc, r3]
 800f8f2:	4f52      	.short	0x4f52
 800f8f4:	3d43494c 	.word	0x3d43494c
 800f8f8:	46          	.byte	0x46
 800f8f9:	00          	.byte	0x00
 800f8fa:	2b33      	cmp	r3, #51	; 0x33
 800f8fc:	dc32      	bgt.n	800f964 <PDM_Filter_setConfig+0xfc>
 800f8fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f900:	f002 020f 	and.w	r2, r2, #15
 800f904:	3a01      	subs	r2, #1
 800f906:	2a06      	cmp	r2, #6
 800f908:	d872      	bhi.n	800f9f0 <PDM_Filter_setConfig+0x188>
 800f90a:	493f      	ldr	r1, [pc, #252]	; (800fa08 <PDM_Filter_setConfig+0x1a0>)
 800f90c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f910:	ed92 9a00 	vldr	s18, [r2]
 800f914:	ed92 8a07 	vldr	s16, [r2, #28]
 800f918:	9001      	str	r0, [sp, #4]
 800f91a:	ee07 3a90 	vmov	s15, r3
 800f91e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f922:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800f926:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800f92a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800f92e:	f000 fd57 	bl	80103e0 <powf>
 800f932:	eddf 0a36 	vldr	s1, [pc, #216]	; 800fa0c <PDM_Filter_setConfig+0x1a4>
 800f936:	eef0 8a40 	vmov.f32	s17, s0
 800f93a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800f93e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f942:	f000 fd4d 	bl	80103e0 <powf>
 800f946:	ee28 8a28 	vmul.f32	s16, s16, s17
 800f94a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f94e:	f000 fd21 	bl	8010394 <roundf>
 800f952:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800f956:	88ab      	ldrh	r3, [r5, #4]
 800f958:	882a      	ldrh	r2, [r5, #0]
 800f95a:	9801      	ldr	r0, [sp, #4]
 800f95c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800f960:	8723      	strh	r3, [r4, #56]	; 0x38
 800f962:	e7a3      	b.n	800f8ac <PDM_Filter_setConfig+0x44>
 800f964:	2333      	movs	r3, #51	; 0x33
 800f966:	3040      	adds	r0, #64	; 0x40
 800f968:	80ab      	strh	r3, [r5, #4]
 800f96a:	e79f      	b.n	800f8ac <PDM_Filter_setConfig+0x44>
 800f96c:	4b28      	ldr	r3, [pc, #160]	; (800fa10 <PDM_Filter_setConfig+0x1a8>)
 800f96e:	64a3      	str	r3, [r4, #72]	; 0x48
 800f970:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f974:	2000      	movs	r0, #0
 800f976:	e792      	b.n	800f89e <PDM_Filter_setConfig+0x36>
 800f978:	4b26      	ldr	r3, [pc, #152]	; (800fa14 <PDM_Filter_setConfig+0x1ac>)
 800f97a:	64a3      	str	r3, [r4, #72]	; 0x48
 800f97c:	e7f8      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f97e:	4b26      	ldr	r3, [pc, #152]	; (800fa18 <PDM_Filter_setConfig+0x1b0>)
 800f980:	64a3      	str	r3, [r4, #72]	; 0x48
 800f982:	e7f5      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f984:	4b25      	ldr	r3, [pc, #148]	; (800fa1c <PDM_Filter_setConfig+0x1b4>)
 800f986:	64a3      	str	r3, [r4, #72]	; 0x48
 800f988:	e7f2      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f98a:	4b25      	ldr	r3, [pc, #148]	; (800fa20 <PDM_Filter_setConfig+0x1b8>)
 800f98c:	64a3      	str	r3, [r4, #72]	; 0x48
 800f98e:	e7ef      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f990:	4b24      	ldr	r3, [pc, #144]	; (800fa24 <PDM_Filter_setConfig+0x1bc>)
 800f992:	64a3      	str	r3, [r4, #72]	; 0x48
 800f994:	e7ec      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f996:	4b24      	ldr	r3, [pc, #144]	; (800fa28 <PDM_Filter_setConfig+0x1c0>)
 800f998:	64a3      	str	r3, [r4, #72]	; 0x48
 800f99a:	e7e9      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f99c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800f99e:	4291      	cmp	r1, r2
 800f9a0:	f47f af7d 	bne.w	800f89e <PDM_Filter_setConfig+0x36>
 800f9a4:	e783      	b.n	800f8ae <PDM_Filter_setConfig+0x46>
 800f9a6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f9aa:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800f9ae:	4299      	cmp	r1, r3
 800f9b0:	d023      	beq.n	800f9fa <PDM_Filter_setConfig+0x192>
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	e773      	b.n	800f89e <PDM_Filter_setConfig+0x36>
 800f9b6:	2b06      	cmp	r3, #6
 800f9b8:	d822      	bhi.n	800fa00 <PDM_Filter_setConfig+0x198>
 800f9ba:	e8df f003 	tbb	[pc, r3]
 800f9be:	1316      	.short	0x1316
 800f9c0:	070a0d10 	.word	0x070a0d10
 800f9c4:	04          	.byte	0x04
 800f9c5:	00          	.byte	0x00
 800f9c6:	4b19      	ldr	r3, [pc, #100]	; (800fa2c <PDM_Filter_setConfig+0x1c4>)
 800f9c8:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9ca:	e7d1      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9cc:	4b18      	ldr	r3, [pc, #96]	; (800fa30 <PDM_Filter_setConfig+0x1c8>)
 800f9ce:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9d0:	e7ce      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9d2:	4b18      	ldr	r3, [pc, #96]	; (800fa34 <PDM_Filter_setConfig+0x1cc>)
 800f9d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9d6:	e7cb      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9d8:	4b17      	ldr	r3, [pc, #92]	; (800fa38 <PDM_Filter_setConfig+0x1d0>)
 800f9da:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9dc:	e7c8      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9de:	4b17      	ldr	r3, [pc, #92]	; (800fa3c <PDM_Filter_setConfig+0x1d4>)
 800f9e0:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9e2:	e7c5      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9e4:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <PDM_Filter_setConfig+0x1d8>)
 800f9e6:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9e8:	e7c2      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9ea:	4b16      	ldr	r3, [pc, #88]	; (800fa44 <PDM_Filter_setConfig+0x1dc>)
 800f9ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800f9ee:	e7bf      	b.n	800f970 <PDM_Filter_setConfig+0x108>
 800f9f0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800fa48 <PDM_Filter_setConfig+0x1e0>
 800f9f4:	eeb0 9a48 	vmov.f32	s18, s16
 800f9f8:	e78e      	b.n	800f918 <PDM_Filter_setConfig+0xb0>
 800f9fa:	886b      	ldrh	r3, [r5, #2]
 800f9fc:	8663      	strh	r3, [r4, #50]	; 0x32
 800f9fe:	e759      	b.n	800f8b4 <PDM_Filter_setConfig+0x4c>
 800fa00:	2000      	movs	r0, #0
 800fa02:	e746      	b.n	800f892 <PDM_Filter_setConfig+0x2a>
 800fa04:	b5e8b5cd 	.word	0xb5e8b5cd
 800fa08:	080111f0 	.word	0x080111f0
 800fa0c:	42000000 	.word	0x42000000
 800fa10:	0800ddd5 	.word	0x0800ddd5
 800fa14:	0800dcb5 	.word	0x0800dcb5
 800fa18:	0800df65 	.word	0x0800df65
 800fa1c:	0800e7a9 	.word	0x0800e7a9
 800fa20:	0800e509 	.word	0x0800e509
 800fa24:	0800e2e9 	.word	0x0800e2e9
 800fa28:	0800e0fd 	.word	0x0800e0fd
 800fa2c:	0800edb5 	.word	0x0800edb5
 800fa30:	0800ec7d 	.word	0x0800ec7d
 800fa34:	0800eb99 	.word	0x0800eb99
 800fa38:	0800f431 	.word	0x0800f431
 800fa3c:	0800f21d 	.word	0x0800f21d
 800fa40:	0800f065 	.word	0x0800f065
 800fa44:	0800eef9 	.word	0x0800eef9
 800fa48:	00000000 	.word	0x00000000

0800fa4c <PDM_Filter>:
 800fa4c:	b410      	push	{r4}
 800fa4e:	4b0c      	ldr	r3, [pc, #48]	; (800fa80 <PDM_Filter+0x34>)
 800fa50:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800fa52:	429c      	cmp	r4, r3
 800fa54:	d003      	beq.n	800fa5e <PDM_Filter+0x12>
 800fa56:	2004      	movs	r0, #4
 800fa58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa5c:	4770      	bx	lr
 800fa5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fa60:	05dc      	lsls	r4, r3, #23
 800fa62:	d407      	bmi.n	800fa74 <PDM_Filter+0x28>
 800fa64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa68:	bf14      	ite	ne
 800fa6a:	2020      	movne	r0, #32
 800fa6c:	2030      	moveq	r0, #48	; 0x30
 800fa6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800fa76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa7a:	320c      	adds	r2, #12
 800fa7c:	4718      	bx	r3
 800fa7e:	bf00      	nop
 800fa80:	b5e8b5cd 	.word	0xb5e8b5cd

0800fa84 <CRC_Lock>:
 800fa84:	4a17      	ldr	r2, [pc, #92]	; (800fae4 <CRC_Lock+0x60>)
 800fa86:	6813      	ldr	r3, [r2, #0]
 800fa88:	b410      	push	{r4}
 800fa8a:	f023 0301 	bic.w	r3, r3, #1
 800fa8e:	4c16      	ldr	r4, [pc, #88]	; (800fae8 <CRC_Lock+0x64>)
 800fa90:	6013      	str	r3, [r2, #0]
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	b933      	cbnz	r3, 800faa4 <CRC_Lock+0x20>
 800fa96:	4b15      	ldr	r3, [pc, #84]	; (800faec <CRC_Lock+0x68>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa9e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800faa2:	d00f      	beq.n	800fac4 <CRC_Lock+0x40>
 800faa4:	4a12      	ldr	r2, [pc, #72]	; (800faf0 <CRC_Lock+0x6c>)
 800faa6:	2301      	movs	r3, #1
 800faa8:	6013      	str	r3, [r2, #0]
 800faaa:	6813      	ldr	r3, [r2, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1fc      	bne.n	800faaa <CRC_Lock+0x26>
 800fab0:	4b10      	ldr	r3, [pc, #64]	; (800faf4 <CRC_Lock+0x70>)
 800fab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fab6:	6018      	str	r0, [r3, #0]
 800fab8:	6818      	ldr	r0, [r3, #0]
 800faba:	1a08      	subs	r0, r1, r0
 800fabc:	fab0 f080 	clz	r0, r0
 800fac0:	0940      	lsrs	r0, r0, #5
 800fac2:	4770      	bx	lr
 800fac4:	4a0c      	ldr	r2, [pc, #48]	; (800faf8 <CRC_Lock+0x74>)
 800fac6:	2301      	movs	r3, #1
 800fac8:	6013      	str	r3, [r2, #0]
 800faca:	6813      	ldr	r3, [r2, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d1fc      	bne.n	800faca <CRC_Lock+0x46>
 800fad0:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <CRC_Lock+0x78>)
 800fad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fad6:	6018      	str	r0, [r3, #0]
 800fad8:	6818      	ldr	r0, [r3, #0]
 800fada:	1a40      	subs	r0, r0, r1
 800fadc:	fab0 f080 	clz	r0, r0
 800fae0:	0940      	lsrs	r0, r0, #5
 800fae2:	4770      	bx	lr
 800fae4:	e0002000 	.word	0xe0002000
 800fae8:	e0042000 	.word	0xe0042000
 800faec:	5c001000 	.word	0x5c001000
 800faf0:	40023008 	.word	0x40023008
 800faf4:	40023000 	.word	0x40023000
 800faf8:	58024c08 	.word	0x58024c08
 800fafc:	58024c00 	.word	0x58024c00

0800fb00 <__errno>:
 800fb00:	4b01      	ldr	r3, [pc, #4]	; (800fb08 <__errno+0x8>)
 800fb02:	6818      	ldr	r0, [r3, #0]
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	2000042c 	.word	0x2000042c

0800fb0c <__libc_init_array>:
 800fb0c:	b570      	push	{r4, r5, r6, lr}
 800fb0e:	4e0d      	ldr	r6, [pc, #52]	; (800fb44 <__libc_init_array+0x38>)
 800fb10:	4c0d      	ldr	r4, [pc, #52]	; (800fb48 <__libc_init_array+0x3c>)
 800fb12:	1ba4      	subs	r4, r4, r6
 800fb14:	10a4      	asrs	r4, r4, #2
 800fb16:	2500      	movs	r5, #0
 800fb18:	42a5      	cmp	r5, r4
 800fb1a:	d109      	bne.n	800fb30 <__libc_init_array+0x24>
 800fb1c:	4e0b      	ldr	r6, [pc, #44]	; (800fb4c <__libc_init_array+0x40>)
 800fb1e:	4c0c      	ldr	r4, [pc, #48]	; (800fb50 <__libc_init_array+0x44>)
 800fb20:	f001 f964 	bl	8010dec <_init>
 800fb24:	1ba4      	subs	r4, r4, r6
 800fb26:	10a4      	asrs	r4, r4, #2
 800fb28:	2500      	movs	r5, #0
 800fb2a:	42a5      	cmp	r5, r4
 800fb2c:	d105      	bne.n	800fb3a <__libc_init_array+0x2e>
 800fb2e:	bd70      	pop	{r4, r5, r6, pc}
 800fb30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb34:	4798      	blx	r3
 800fb36:	3501      	adds	r5, #1
 800fb38:	e7ee      	b.n	800fb18 <__libc_init_array+0xc>
 800fb3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb3e:	4798      	blx	r3
 800fb40:	3501      	adds	r5, #1
 800fb42:	e7f2      	b.n	800fb2a <__libc_init_array+0x1e>
 800fb44:	0801133c 	.word	0x0801133c
 800fb48:	0801133c 	.word	0x0801133c
 800fb4c:	0801133c 	.word	0x0801133c
 800fb50:	08011340 	.word	0x08011340

0800fb54 <malloc>:
 800fb54:	4b02      	ldr	r3, [pc, #8]	; (800fb60 <malloc+0xc>)
 800fb56:	4601      	mov	r1, r0
 800fb58:	6818      	ldr	r0, [r3, #0]
 800fb5a:	f000 b86d 	b.w	800fc38 <_malloc_r>
 800fb5e:	bf00      	nop
 800fb60:	2000042c 	.word	0x2000042c

0800fb64 <free>:
 800fb64:	4b02      	ldr	r3, [pc, #8]	; (800fb70 <free+0xc>)
 800fb66:	4601      	mov	r1, r0
 800fb68:	6818      	ldr	r0, [r3, #0]
 800fb6a:	f000 b817 	b.w	800fb9c <_free_r>
 800fb6e:	bf00      	nop
 800fb70:	2000042c 	.word	0x2000042c

0800fb74 <memcpy>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	1e43      	subs	r3, r0, #1
 800fb78:	440a      	add	r2, r1
 800fb7a:	4291      	cmp	r1, r2
 800fb7c:	d100      	bne.n	800fb80 <memcpy+0xc>
 800fb7e:	bd10      	pop	{r4, pc}
 800fb80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb88:	e7f7      	b.n	800fb7a <memcpy+0x6>

0800fb8a <memset>:
 800fb8a:	4402      	add	r2, r0
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d100      	bne.n	800fb94 <memset+0xa>
 800fb92:	4770      	bx	lr
 800fb94:	f803 1b01 	strb.w	r1, [r3], #1
 800fb98:	e7f9      	b.n	800fb8e <memset+0x4>
	...

0800fb9c <_free_r>:
 800fb9c:	b538      	push	{r3, r4, r5, lr}
 800fb9e:	4605      	mov	r5, r0
 800fba0:	2900      	cmp	r1, #0
 800fba2:	d045      	beq.n	800fc30 <_free_r+0x94>
 800fba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fba8:	1f0c      	subs	r4, r1, #4
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	bfb8      	it	lt
 800fbae:	18e4      	addlt	r4, r4, r3
 800fbb0:	f000 f8cc 	bl	800fd4c <__malloc_lock>
 800fbb4:	4a1f      	ldr	r2, [pc, #124]	; (800fc34 <_free_r+0x98>)
 800fbb6:	6813      	ldr	r3, [r2, #0]
 800fbb8:	4610      	mov	r0, r2
 800fbba:	b933      	cbnz	r3, 800fbca <_free_r+0x2e>
 800fbbc:	6063      	str	r3, [r4, #4]
 800fbbe:	6014      	str	r4, [r2, #0]
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbc6:	f000 b8c2 	b.w	800fd4e <__malloc_unlock>
 800fbca:	42a3      	cmp	r3, r4
 800fbcc:	d90c      	bls.n	800fbe8 <_free_r+0x4c>
 800fbce:	6821      	ldr	r1, [r4, #0]
 800fbd0:	1862      	adds	r2, r4, r1
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	bf04      	itt	eq
 800fbd6:	681a      	ldreq	r2, [r3, #0]
 800fbd8:	685b      	ldreq	r3, [r3, #4]
 800fbda:	6063      	str	r3, [r4, #4]
 800fbdc:	bf04      	itt	eq
 800fbde:	1852      	addeq	r2, r2, r1
 800fbe0:	6022      	streq	r2, [r4, #0]
 800fbe2:	6004      	str	r4, [r0, #0]
 800fbe4:	e7ec      	b.n	800fbc0 <_free_r+0x24>
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	685a      	ldr	r2, [r3, #4]
 800fbea:	b10a      	cbz	r2, 800fbf0 <_free_r+0x54>
 800fbec:	42a2      	cmp	r2, r4
 800fbee:	d9fa      	bls.n	800fbe6 <_free_r+0x4a>
 800fbf0:	6819      	ldr	r1, [r3, #0]
 800fbf2:	1858      	adds	r0, r3, r1
 800fbf4:	42a0      	cmp	r0, r4
 800fbf6:	d10b      	bne.n	800fc10 <_free_r+0x74>
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	4401      	add	r1, r0
 800fbfc:	1858      	adds	r0, r3, r1
 800fbfe:	4282      	cmp	r2, r0
 800fc00:	6019      	str	r1, [r3, #0]
 800fc02:	d1dd      	bne.n	800fbc0 <_free_r+0x24>
 800fc04:	6810      	ldr	r0, [r2, #0]
 800fc06:	6852      	ldr	r2, [r2, #4]
 800fc08:	605a      	str	r2, [r3, #4]
 800fc0a:	4401      	add	r1, r0
 800fc0c:	6019      	str	r1, [r3, #0]
 800fc0e:	e7d7      	b.n	800fbc0 <_free_r+0x24>
 800fc10:	d902      	bls.n	800fc18 <_free_r+0x7c>
 800fc12:	230c      	movs	r3, #12
 800fc14:	602b      	str	r3, [r5, #0]
 800fc16:	e7d3      	b.n	800fbc0 <_free_r+0x24>
 800fc18:	6820      	ldr	r0, [r4, #0]
 800fc1a:	1821      	adds	r1, r4, r0
 800fc1c:	428a      	cmp	r2, r1
 800fc1e:	bf04      	itt	eq
 800fc20:	6811      	ldreq	r1, [r2, #0]
 800fc22:	6852      	ldreq	r2, [r2, #4]
 800fc24:	6062      	str	r2, [r4, #4]
 800fc26:	bf04      	itt	eq
 800fc28:	1809      	addeq	r1, r1, r0
 800fc2a:	6021      	streq	r1, [r4, #0]
 800fc2c:	605c      	str	r4, [r3, #4]
 800fc2e:	e7c7      	b.n	800fbc0 <_free_r+0x24>
 800fc30:	bd38      	pop	{r3, r4, r5, pc}
 800fc32:	bf00      	nop
 800fc34:	200006a8 	.word	0x200006a8

0800fc38 <_malloc_r>:
 800fc38:	b570      	push	{r4, r5, r6, lr}
 800fc3a:	1ccd      	adds	r5, r1, #3
 800fc3c:	f025 0503 	bic.w	r5, r5, #3
 800fc40:	3508      	adds	r5, #8
 800fc42:	2d0c      	cmp	r5, #12
 800fc44:	bf38      	it	cc
 800fc46:	250c      	movcc	r5, #12
 800fc48:	2d00      	cmp	r5, #0
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	db01      	blt.n	800fc52 <_malloc_r+0x1a>
 800fc4e:	42a9      	cmp	r1, r5
 800fc50:	d903      	bls.n	800fc5a <_malloc_r+0x22>
 800fc52:	230c      	movs	r3, #12
 800fc54:	6033      	str	r3, [r6, #0]
 800fc56:	2000      	movs	r0, #0
 800fc58:	bd70      	pop	{r4, r5, r6, pc}
 800fc5a:	f000 f877 	bl	800fd4c <__malloc_lock>
 800fc5e:	4a21      	ldr	r2, [pc, #132]	; (800fce4 <_malloc_r+0xac>)
 800fc60:	6814      	ldr	r4, [r2, #0]
 800fc62:	4621      	mov	r1, r4
 800fc64:	b991      	cbnz	r1, 800fc8c <_malloc_r+0x54>
 800fc66:	4c20      	ldr	r4, [pc, #128]	; (800fce8 <_malloc_r+0xb0>)
 800fc68:	6823      	ldr	r3, [r4, #0]
 800fc6a:	b91b      	cbnz	r3, 800fc74 <_malloc_r+0x3c>
 800fc6c:	4630      	mov	r0, r6
 800fc6e:	f000 f83d 	bl	800fcec <_sbrk_r>
 800fc72:	6020      	str	r0, [r4, #0]
 800fc74:	4629      	mov	r1, r5
 800fc76:	4630      	mov	r0, r6
 800fc78:	f000 f838 	bl	800fcec <_sbrk_r>
 800fc7c:	1c43      	adds	r3, r0, #1
 800fc7e:	d124      	bne.n	800fcca <_malloc_r+0x92>
 800fc80:	230c      	movs	r3, #12
 800fc82:	6033      	str	r3, [r6, #0]
 800fc84:	4630      	mov	r0, r6
 800fc86:	f000 f862 	bl	800fd4e <__malloc_unlock>
 800fc8a:	e7e4      	b.n	800fc56 <_malloc_r+0x1e>
 800fc8c:	680b      	ldr	r3, [r1, #0]
 800fc8e:	1b5b      	subs	r3, r3, r5
 800fc90:	d418      	bmi.n	800fcc4 <_malloc_r+0x8c>
 800fc92:	2b0b      	cmp	r3, #11
 800fc94:	d90f      	bls.n	800fcb6 <_malloc_r+0x7e>
 800fc96:	600b      	str	r3, [r1, #0]
 800fc98:	50cd      	str	r5, [r1, r3]
 800fc9a:	18cc      	adds	r4, r1, r3
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f000 f856 	bl	800fd4e <__malloc_unlock>
 800fca2:	f104 000b 	add.w	r0, r4, #11
 800fca6:	1d23      	adds	r3, r4, #4
 800fca8:	f020 0007 	bic.w	r0, r0, #7
 800fcac:	1ac3      	subs	r3, r0, r3
 800fcae:	d0d3      	beq.n	800fc58 <_malloc_r+0x20>
 800fcb0:	425a      	negs	r2, r3
 800fcb2:	50e2      	str	r2, [r4, r3]
 800fcb4:	e7d0      	b.n	800fc58 <_malloc_r+0x20>
 800fcb6:	428c      	cmp	r4, r1
 800fcb8:	684b      	ldr	r3, [r1, #4]
 800fcba:	bf16      	itet	ne
 800fcbc:	6063      	strne	r3, [r4, #4]
 800fcbe:	6013      	streq	r3, [r2, #0]
 800fcc0:	460c      	movne	r4, r1
 800fcc2:	e7eb      	b.n	800fc9c <_malloc_r+0x64>
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	6849      	ldr	r1, [r1, #4]
 800fcc8:	e7cc      	b.n	800fc64 <_malloc_r+0x2c>
 800fcca:	1cc4      	adds	r4, r0, #3
 800fccc:	f024 0403 	bic.w	r4, r4, #3
 800fcd0:	42a0      	cmp	r0, r4
 800fcd2:	d005      	beq.n	800fce0 <_malloc_r+0xa8>
 800fcd4:	1a21      	subs	r1, r4, r0
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	f000 f808 	bl	800fcec <_sbrk_r>
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d0cf      	beq.n	800fc80 <_malloc_r+0x48>
 800fce0:	6025      	str	r5, [r4, #0]
 800fce2:	e7db      	b.n	800fc9c <_malloc_r+0x64>
 800fce4:	200006a8 	.word	0x200006a8
 800fce8:	200006ac 	.word	0x200006ac

0800fcec <_sbrk_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4c06      	ldr	r4, [pc, #24]	; (800fd08 <_sbrk_r+0x1c>)
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	4605      	mov	r5, r0
 800fcf4:	4608      	mov	r0, r1
 800fcf6:	6023      	str	r3, [r4, #0]
 800fcf8:	f7f1 fcf8 	bl	80016ec <_sbrk>
 800fcfc:	1c43      	adds	r3, r0, #1
 800fcfe:	d102      	bne.n	800fd06 <_sbrk_r+0x1a>
 800fd00:	6823      	ldr	r3, [r4, #0]
 800fd02:	b103      	cbz	r3, 800fd06 <_sbrk_r+0x1a>
 800fd04:	602b      	str	r3, [r5, #0]
 800fd06:	bd38      	pop	{r3, r4, r5, pc}
 800fd08:	20006050 	.word	0x20006050

0800fd0c <siprintf>:
 800fd0c:	b40e      	push	{r1, r2, r3}
 800fd0e:	b500      	push	{lr}
 800fd10:	b09c      	sub	sp, #112	; 0x70
 800fd12:	ab1d      	add	r3, sp, #116	; 0x74
 800fd14:	9002      	str	r0, [sp, #8]
 800fd16:	9006      	str	r0, [sp, #24]
 800fd18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fd1c:	4809      	ldr	r0, [pc, #36]	; (800fd44 <siprintf+0x38>)
 800fd1e:	9107      	str	r1, [sp, #28]
 800fd20:	9104      	str	r1, [sp, #16]
 800fd22:	4909      	ldr	r1, [pc, #36]	; (800fd48 <siprintf+0x3c>)
 800fd24:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd28:	9105      	str	r1, [sp, #20]
 800fd2a:	6800      	ldr	r0, [r0, #0]
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	a902      	add	r1, sp, #8
 800fd30:	f000 f868 	bl	800fe04 <_svfiprintf_r>
 800fd34:	9b02      	ldr	r3, [sp, #8]
 800fd36:	2200      	movs	r2, #0
 800fd38:	701a      	strb	r2, [r3, #0]
 800fd3a:	b01c      	add	sp, #112	; 0x70
 800fd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd40:	b003      	add	sp, #12
 800fd42:	4770      	bx	lr
 800fd44:	2000042c 	.word	0x2000042c
 800fd48:	ffff0208 	.word	0xffff0208

0800fd4c <__malloc_lock>:
 800fd4c:	4770      	bx	lr

0800fd4e <__malloc_unlock>:
 800fd4e:	4770      	bx	lr

0800fd50 <__ssputs_r>:
 800fd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd54:	688e      	ldr	r6, [r1, #8]
 800fd56:	429e      	cmp	r6, r3
 800fd58:	4682      	mov	sl, r0
 800fd5a:	460c      	mov	r4, r1
 800fd5c:	4690      	mov	r8, r2
 800fd5e:	4699      	mov	r9, r3
 800fd60:	d837      	bhi.n	800fdd2 <__ssputs_r+0x82>
 800fd62:	898a      	ldrh	r2, [r1, #12]
 800fd64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd68:	d031      	beq.n	800fdce <__ssputs_r+0x7e>
 800fd6a:	6825      	ldr	r5, [r4, #0]
 800fd6c:	6909      	ldr	r1, [r1, #16]
 800fd6e:	1a6f      	subs	r7, r5, r1
 800fd70:	6965      	ldr	r5, [r4, #20]
 800fd72:	2302      	movs	r3, #2
 800fd74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd78:	fb95 f5f3 	sdiv	r5, r5, r3
 800fd7c:	f109 0301 	add.w	r3, r9, #1
 800fd80:	443b      	add	r3, r7
 800fd82:	429d      	cmp	r5, r3
 800fd84:	bf38      	it	cc
 800fd86:	461d      	movcc	r5, r3
 800fd88:	0553      	lsls	r3, r2, #21
 800fd8a:	d530      	bpl.n	800fdee <__ssputs_r+0x9e>
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	f7ff ff53 	bl	800fc38 <_malloc_r>
 800fd92:	4606      	mov	r6, r0
 800fd94:	b950      	cbnz	r0, 800fdac <__ssputs_r+0x5c>
 800fd96:	230c      	movs	r3, #12
 800fd98:	f8ca 3000 	str.w	r3, [sl]
 800fd9c:	89a3      	ldrh	r3, [r4, #12]
 800fd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda2:	81a3      	strh	r3, [r4, #12]
 800fda4:	f04f 30ff 	mov.w	r0, #4294967295
 800fda8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdac:	463a      	mov	r2, r7
 800fdae:	6921      	ldr	r1, [r4, #16]
 800fdb0:	f7ff fee0 	bl	800fb74 <memcpy>
 800fdb4:	89a3      	ldrh	r3, [r4, #12]
 800fdb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fdba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdbe:	81a3      	strh	r3, [r4, #12]
 800fdc0:	6126      	str	r6, [r4, #16]
 800fdc2:	6165      	str	r5, [r4, #20]
 800fdc4:	443e      	add	r6, r7
 800fdc6:	1bed      	subs	r5, r5, r7
 800fdc8:	6026      	str	r6, [r4, #0]
 800fdca:	60a5      	str	r5, [r4, #8]
 800fdcc:	464e      	mov	r6, r9
 800fdce:	454e      	cmp	r6, r9
 800fdd0:	d900      	bls.n	800fdd4 <__ssputs_r+0x84>
 800fdd2:	464e      	mov	r6, r9
 800fdd4:	4632      	mov	r2, r6
 800fdd6:	4641      	mov	r1, r8
 800fdd8:	6820      	ldr	r0, [r4, #0]
 800fdda:	f000 fa93 	bl	8010304 <memmove>
 800fdde:	68a3      	ldr	r3, [r4, #8]
 800fde0:	1b9b      	subs	r3, r3, r6
 800fde2:	60a3      	str	r3, [r4, #8]
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	441e      	add	r6, r3
 800fde8:	6026      	str	r6, [r4, #0]
 800fdea:	2000      	movs	r0, #0
 800fdec:	e7dc      	b.n	800fda8 <__ssputs_r+0x58>
 800fdee:	462a      	mov	r2, r5
 800fdf0:	f000 faa1 	bl	8010336 <_realloc_r>
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d1e2      	bne.n	800fdc0 <__ssputs_r+0x70>
 800fdfa:	6921      	ldr	r1, [r4, #16]
 800fdfc:	4650      	mov	r0, sl
 800fdfe:	f7ff fecd 	bl	800fb9c <_free_r>
 800fe02:	e7c8      	b.n	800fd96 <__ssputs_r+0x46>

0800fe04 <_svfiprintf_r>:
 800fe04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe08:	461d      	mov	r5, r3
 800fe0a:	898b      	ldrh	r3, [r1, #12]
 800fe0c:	061f      	lsls	r7, r3, #24
 800fe0e:	b09d      	sub	sp, #116	; 0x74
 800fe10:	4680      	mov	r8, r0
 800fe12:	460c      	mov	r4, r1
 800fe14:	4616      	mov	r6, r2
 800fe16:	d50f      	bpl.n	800fe38 <_svfiprintf_r+0x34>
 800fe18:	690b      	ldr	r3, [r1, #16]
 800fe1a:	b96b      	cbnz	r3, 800fe38 <_svfiprintf_r+0x34>
 800fe1c:	2140      	movs	r1, #64	; 0x40
 800fe1e:	f7ff ff0b 	bl	800fc38 <_malloc_r>
 800fe22:	6020      	str	r0, [r4, #0]
 800fe24:	6120      	str	r0, [r4, #16]
 800fe26:	b928      	cbnz	r0, 800fe34 <_svfiprintf_r+0x30>
 800fe28:	230c      	movs	r3, #12
 800fe2a:	f8c8 3000 	str.w	r3, [r8]
 800fe2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe32:	e0c8      	b.n	800ffc6 <_svfiprintf_r+0x1c2>
 800fe34:	2340      	movs	r3, #64	; 0x40
 800fe36:	6163      	str	r3, [r4, #20]
 800fe38:	2300      	movs	r3, #0
 800fe3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe3c:	2320      	movs	r3, #32
 800fe3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe42:	2330      	movs	r3, #48	; 0x30
 800fe44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe48:	9503      	str	r5, [sp, #12]
 800fe4a:	f04f 0b01 	mov.w	fp, #1
 800fe4e:	4637      	mov	r7, r6
 800fe50:	463d      	mov	r5, r7
 800fe52:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe56:	b10b      	cbz	r3, 800fe5c <_svfiprintf_r+0x58>
 800fe58:	2b25      	cmp	r3, #37	; 0x25
 800fe5a:	d13e      	bne.n	800feda <_svfiprintf_r+0xd6>
 800fe5c:	ebb7 0a06 	subs.w	sl, r7, r6
 800fe60:	d00b      	beq.n	800fe7a <_svfiprintf_r+0x76>
 800fe62:	4653      	mov	r3, sl
 800fe64:	4632      	mov	r2, r6
 800fe66:	4621      	mov	r1, r4
 800fe68:	4640      	mov	r0, r8
 800fe6a:	f7ff ff71 	bl	800fd50 <__ssputs_r>
 800fe6e:	3001      	adds	r0, #1
 800fe70:	f000 80a4 	beq.w	800ffbc <_svfiprintf_r+0x1b8>
 800fe74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe76:	4453      	add	r3, sl
 800fe78:	9309      	str	r3, [sp, #36]	; 0x24
 800fe7a:	783b      	ldrb	r3, [r7, #0]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f000 809d 	beq.w	800ffbc <_svfiprintf_r+0x1b8>
 800fe82:	2300      	movs	r3, #0
 800fe84:	f04f 32ff 	mov.w	r2, #4294967295
 800fe88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe8c:	9304      	str	r3, [sp, #16]
 800fe8e:	9307      	str	r3, [sp, #28]
 800fe90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe94:	931a      	str	r3, [sp, #104]	; 0x68
 800fe96:	462f      	mov	r7, r5
 800fe98:	2205      	movs	r2, #5
 800fe9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fe9e:	4850      	ldr	r0, [pc, #320]	; (800ffe0 <_svfiprintf_r+0x1dc>)
 800fea0:	f7f0 f9a6 	bl	80001f0 <memchr>
 800fea4:	9b04      	ldr	r3, [sp, #16]
 800fea6:	b9d0      	cbnz	r0, 800fede <_svfiprintf_r+0xda>
 800fea8:	06d9      	lsls	r1, r3, #27
 800feaa:	bf44      	itt	mi
 800feac:	2220      	movmi	r2, #32
 800feae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800feb2:	071a      	lsls	r2, r3, #28
 800feb4:	bf44      	itt	mi
 800feb6:	222b      	movmi	r2, #43	; 0x2b
 800feb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800febc:	782a      	ldrb	r2, [r5, #0]
 800febe:	2a2a      	cmp	r2, #42	; 0x2a
 800fec0:	d015      	beq.n	800feee <_svfiprintf_r+0xea>
 800fec2:	9a07      	ldr	r2, [sp, #28]
 800fec4:	462f      	mov	r7, r5
 800fec6:	2000      	movs	r0, #0
 800fec8:	250a      	movs	r5, #10
 800feca:	4639      	mov	r1, r7
 800fecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fed0:	3b30      	subs	r3, #48	; 0x30
 800fed2:	2b09      	cmp	r3, #9
 800fed4:	d94d      	bls.n	800ff72 <_svfiprintf_r+0x16e>
 800fed6:	b1b8      	cbz	r0, 800ff08 <_svfiprintf_r+0x104>
 800fed8:	e00f      	b.n	800fefa <_svfiprintf_r+0xf6>
 800feda:	462f      	mov	r7, r5
 800fedc:	e7b8      	b.n	800fe50 <_svfiprintf_r+0x4c>
 800fede:	4a40      	ldr	r2, [pc, #256]	; (800ffe0 <_svfiprintf_r+0x1dc>)
 800fee0:	1a80      	subs	r0, r0, r2
 800fee2:	fa0b f000 	lsl.w	r0, fp, r0
 800fee6:	4318      	orrs	r0, r3
 800fee8:	9004      	str	r0, [sp, #16]
 800feea:	463d      	mov	r5, r7
 800feec:	e7d3      	b.n	800fe96 <_svfiprintf_r+0x92>
 800feee:	9a03      	ldr	r2, [sp, #12]
 800fef0:	1d11      	adds	r1, r2, #4
 800fef2:	6812      	ldr	r2, [r2, #0]
 800fef4:	9103      	str	r1, [sp, #12]
 800fef6:	2a00      	cmp	r2, #0
 800fef8:	db01      	blt.n	800fefe <_svfiprintf_r+0xfa>
 800fefa:	9207      	str	r2, [sp, #28]
 800fefc:	e004      	b.n	800ff08 <_svfiprintf_r+0x104>
 800fefe:	4252      	negs	r2, r2
 800ff00:	f043 0302 	orr.w	r3, r3, #2
 800ff04:	9207      	str	r2, [sp, #28]
 800ff06:	9304      	str	r3, [sp, #16]
 800ff08:	783b      	ldrb	r3, [r7, #0]
 800ff0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff0c:	d10c      	bne.n	800ff28 <_svfiprintf_r+0x124>
 800ff0e:	787b      	ldrb	r3, [r7, #1]
 800ff10:	2b2a      	cmp	r3, #42	; 0x2a
 800ff12:	d133      	bne.n	800ff7c <_svfiprintf_r+0x178>
 800ff14:	9b03      	ldr	r3, [sp, #12]
 800ff16:	1d1a      	adds	r2, r3, #4
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	9203      	str	r2, [sp, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	bfb8      	it	lt
 800ff20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff24:	3702      	adds	r7, #2
 800ff26:	9305      	str	r3, [sp, #20]
 800ff28:	4d2e      	ldr	r5, [pc, #184]	; (800ffe4 <_svfiprintf_r+0x1e0>)
 800ff2a:	7839      	ldrb	r1, [r7, #0]
 800ff2c:	2203      	movs	r2, #3
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f7f0 f95e 	bl	80001f0 <memchr>
 800ff34:	b138      	cbz	r0, 800ff46 <_svfiprintf_r+0x142>
 800ff36:	2340      	movs	r3, #64	; 0x40
 800ff38:	1b40      	subs	r0, r0, r5
 800ff3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ff3e:	9b04      	ldr	r3, [sp, #16]
 800ff40:	4303      	orrs	r3, r0
 800ff42:	3701      	adds	r7, #1
 800ff44:	9304      	str	r3, [sp, #16]
 800ff46:	7839      	ldrb	r1, [r7, #0]
 800ff48:	4827      	ldr	r0, [pc, #156]	; (800ffe8 <_svfiprintf_r+0x1e4>)
 800ff4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff4e:	2206      	movs	r2, #6
 800ff50:	1c7e      	adds	r6, r7, #1
 800ff52:	f7f0 f94d 	bl	80001f0 <memchr>
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d038      	beq.n	800ffcc <_svfiprintf_r+0x1c8>
 800ff5a:	4b24      	ldr	r3, [pc, #144]	; (800ffec <_svfiprintf_r+0x1e8>)
 800ff5c:	bb13      	cbnz	r3, 800ffa4 <_svfiprintf_r+0x1a0>
 800ff5e:	9b03      	ldr	r3, [sp, #12]
 800ff60:	3307      	adds	r3, #7
 800ff62:	f023 0307 	bic.w	r3, r3, #7
 800ff66:	3308      	adds	r3, #8
 800ff68:	9303      	str	r3, [sp, #12]
 800ff6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff6c:	444b      	add	r3, r9
 800ff6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff70:	e76d      	b.n	800fe4e <_svfiprintf_r+0x4a>
 800ff72:	fb05 3202 	mla	r2, r5, r2, r3
 800ff76:	2001      	movs	r0, #1
 800ff78:	460f      	mov	r7, r1
 800ff7a:	e7a6      	b.n	800feca <_svfiprintf_r+0xc6>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	3701      	adds	r7, #1
 800ff80:	9305      	str	r3, [sp, #20]
 800ff82:	4619      	mov	r1, r3
 800ff84:	250a      	movs	r5, #10
 800ff86:	4638      	mov	r0, r7
 800ff88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff8c:	3a30      	subs	r2, #48	; 0x30
 800ff8e:	2a09      	cmp	r2, #9
 800ff90:	d903      	bls.n	800ff9a <_svfiprintf_r+0x196>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d0c8      	beq.n	800ff28 <_svfiprintf_r+0x124>
 800ff96:	9105      	str	r1, [sp, #20]
 800ff98:	e7c6      	b.n	800ff28 <_svfiprintf_r+0x124>
 800ff9a:	fb05 2101 	mla	r1, r5, r1, r2
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	4607      	mov	r7, r0
 800ffa2:	e7f0      	b.n	800ff86 <_svfiprintf_r+0x182>
 800ffa4:	ab03      	add	r3, sp, #12
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	4622      	mov	r2, r4
 800ffaa:	4b11      	ldr	r3, [pc, #68]	; (800fff0 <_svfiprintf_r+0x1ec>)
 800ffac:	a904      	add	r1, sp, #16
 800ffae:	4640      	mov	r0, r8
 800ffb0:	f3af 8000 	nop.w
 800ffb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ffb8:	4681      	mov	r9, r0
 800ffba:	d1d6      	bne.n	800ff6a <_svfiprintf_r+0x166>
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	065b      	lsls	r3, r3, #25
 800ffc0:	f53f af35 	bmi.w	800fe2e <_svfiprintf_r+0x2a>
 800ffc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffc6:	b01d      	add	sp, #116	; 0x74
 800ffc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffcc:	ab03      	add	r3, sp, #12
 800ffce:	9300      	str	r3, [sp, #0]
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <_svfiprintf_r+0x1ec>)
 800ffd4:	a904      	add	r1, sp, #16
 800ffd6:	4640      	mov	r0, r8
 800ffd8:	f000 f882 	bl	80100e0 <_printf_i>
 800ffdc:	e7ea      	b.n	800ffb4 <_svfiprintf_r+0x1b0>
 800ffde:	bf00      	nop
 800ffe0:	080112dc 	.word	0x080112dc
 800ffe4:	080112e2 	.word	0x080112e2
 800ffe8:	080112e6 	.word	0x080112e6
 800ffec:	00000000 	.word	0x00000000
 800fff0:	0800fd51 	.word	0x0800fd51

0800fff4 <_printf_common>:
 800fff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff8:	4691      	mov	r9, r2
 800fffa:	461f      	mov	r7, r3
 800fffc:	688a      	ldr	r2, [r1, #8]
 800fffe:	690b      	ldr	r3, [r1, #16]
 8010000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010004:	4293      	cmp	r3, r2
 8010006:	bfb8      	it	lt
 8010008:	4613      	movlt	r3, r2
 801000a:	f8c9 3000 	str.w	r3, [r9]
 801000e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010012:	4606      	mov	r6, r0
 8010014:	460c      	mov	r4, r1
 8010016:	b112      	cbz	r2, 801001e <_printf_common+0x2a>
 8010018:	3301      	adds	r3, #1
 801001a:	f8c9 3000 	str.w	r3, [r9]
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	0699      	lsls	r1, r3, #26
 8010022:	bf42      	ittt	mi
 8010024:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010028:	3302      	addmi	r3, #2
 801002a:	f8c9 3000 	strmi.w	r3, [r9]
 801002e:	6825      	ldr	r5, [r4, #0]
 8010030:	f015 0506 	ands.w	r5, r5, #6
 8010034:	d107      	bne.n	8010046 <_printf_common+0x52>
 8010036:	f104 0a19 	add.w	sl, r4, #25
 801003a:	68e3      	ldr	r3, [r4, #12]
 801003c:	f8d9 2000 	ldr.w	r2, [r9]
 8010040:	1a9b      	subs	r3, r3, r2
 8010042:	42ab      	cmp	r3, r5
 8010044:	dc28      	bgt.n	8010098 <_printf_common+0xa4>
 8010046:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801004a:	6822      	ldr	r2, [r4, #0]
 801004c:	3300      	adds	r3, #0
 801004e:	bf18      	it	ne
 8010050:	2301      	movne	r3, #1
 8010052:	0692      	lsls	r2, r2, #26
 8010054:	d42d      	bmi.n	80100b2 <_printf_common+0xbe>
 8010056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801005a:	4639      	mov	r1, r7
 801005c:	4630      	mov	r0, r6
 801005e:	47c0      	blx	r8
 8010060:	3001      	adds	r0, #1
 8010062:	d020      	beq.n	80100a6 <_printf_common+0xb2>
 8010064:	6823      	ldr	r3, [r4, #0]
 8010066:	68e5      	ldr	r5, [r4, #12]
 8010068:	f8d9 2000 	ldr.w	r2, [r9]
 801006c:	f003 0306 	and.w	r3, r3, #6
 8010070:	2b04      	cmp	r3, #4
 8010072:	bf08      	it	eq
 8010074:	1aad      	subeq	r5, r5, r2
 8010076:	68a3      	ldr	r3, [r4, #8]
 8010078:	6922      	ldr	r2, [r4, #16]
 801007a:	bf0c      	ite	eq
 801007c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010080:	2500      	movne	r5, #0
 8010082:	4293      	cmp	r3, r2
 8010084:	bfc4      	itt	gt
 8010086:	1a9b      	subgt	r3, r3, r2
 8010088:	18ed      	addgt	r5, r5, r3
 801008a:	f04f 0900 	mov.w	r9, #0
 801008e:	341a      	adds	r4, #26
 8010090:	454d      	cmp	r5, r9
 8010092:	d11a      	bne.n	80100ca <_printf_common+0xd6>
 8010094:	2000      	movs	r0, #0
 8010096:	e008      	b.n	80100aa <_printf_common+0xb6>
 8010098:	2301      	movs	r3, #1
 801009a:	4652      	mov	r2, sl
 801009c:	4639      	mov	r1, r7
 801009e:	4630      	mov	r0, r6
 80100a0:	47c0      	blx	r8
 80100a2:	3001      	adds	r0, #1
 80100a4:	d103      	bne.n	80100ae <_printf_common+0xba>
 80100a6:	f04f 30ff 	mov.w	r0, #4294967295
 80100aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ae:	3501      	adds	r5, #1
 80100b0:	e7c3      	b.n	801003a <_printf_common+0x46>
 80100b2:	18e1      	adds	r1, r4, r3
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	2030      	movs	r0, #48	; 0x30
 80100b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80100bc:	4422      	add	r2, r4
 80100be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80100c6:	3302      	adds	r3, #2
 80100c8:	e7c5      	b.n	8010056 <_printf_common+0x62>
 80100ca:	2301      	movs	r3, #1
 80100cc:	4622      	mov	r2, r4
 80100ce:	4639      	mov	r1, r7
 80100d0:	4630      	mov	r0, r6
 80100d2:	47c0      	blx	r8
 80100d4:	3001      	adds	r0, #1
 80100d6:	d0e6      	beq.n	80100a6 <_printf_common+0xb2>
 80100d8:	f109 0901 	add.w	r9, r9, #1
 80100dc:	e7d8      	b.n	8010090 <_printf_common+0x9c>
	...

080100e0 <_printf_i>:
 80100e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80100e8:	460c      	mov	r4, r1
 80100ea:	7e09      	ldrb	r1, [r1, #24]
 80100ec:	b085      	sub	sp, #20
 80100ee:	296e      	cmp	r1, #110	; 0x6e
 80100f0:	4617      	mov	r7, r2
 80100f2:	4606      	mov	r6, r0
 80100f4:	4698      	mov	r8, r3
 80100f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80100f8:	f000 80b3 	beq.w	8010262 <_printf_i+0x182>
 80100fc:	d822      	bhi.n	8010144 <_printf_i+0x64>
 80100fe:	2963      	cmp	r1, #99	; 0x63
 8010100:	d036      	beq.n	8010170 <_printf_i+0x90>
 8010102:	d80a      	bhi.n	801011a <_printf_i+0x3a>
 8010104:	2900      	cmp	r1, #0
 8010106:	f000 80b9 	beq.w	801027c <_printf_i+0x19c>
 801010a:	2958      	cmp	r1, #88	; 0x58
 801010c:	f000 8083 	beq.w	8010216 <_printf_i+0x136>
 8010110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010114:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010118:	e032      	b.n	8010180 <_printf_i+0xa0>
 801011a:	2964      	cmp	r1, #100	; 0x64
 801011c:	d001      	beq.n	8010122 <_printf_i+0x42>
 801011e:	2969      	cmp	r1, #105	; 0x69
 8010120:	d1f6      	bne.n	8010110 <_printf_i+0x30>
 8010122:	6820      	ldr	r0, [r4, #0]
 8010124:	6813      	ldr	r3, [r2, #0]
 8010126:	0605      	lsls	r5, r0, #24
 8010128:	f103 0104 	add.w	r1, r3, #4
 801012c:	d52a      	bpl.n	8010184 <_printf_i+0xa4>
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	6011      	str	r1, [r2, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	da03      	bge.n	801013e <_printf_i+0x5e>
 8010136:	222d      	movs	r2, #45	; 0x2d
 8010138:	425b      	negs	r3, r3
 801013a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801013e:	486f      	ldr	r0, [pc, #444]	; (80102fc <_printf_i+0x21c>)
 8010140:	220a      	movs	r2, #10
 8010142:	e039      	b.n	80101b8 <_printf_i+0xd8>
 8010144:	2973      	cmp	r1, #115	; 0x73
 8010146:	f000 809d 	beq.w	8010284 <_printf_i+0x1a4>
 801014a:	d808      	bhi.n	801015e <_printf_i+0x7e>
 801014c:	296f      	cmp	r1, #111	; 0x6f
 801014e:	d020      	beq.n	8010192 <_printf_i+0xb2>
 8010150:	2970      	cmp	r1, #112	; 0x70
 8010152:	d1dd      	bne.n	8010110 <_printf_i+0x30>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	f043 0320 	orr.w	r3, r3, #32
 801015a:	6023      	str	r3, [r4, #0]
 801015c:	e003      	b.n	8010166 <_printf_i+0x86>
 801015e:	2975      	cmp	r1, #117	; 0x75
 8010160:	d017      	beq.n	8010192 <_printf_i+0xb2>
 8010162:	2978      	cmp	r1, #120	; 0x78
 8010164:	d1d4      	bne.n	8010110 <_printf_i+0x30>
 8010166:	2378      	movs	r3, #120	; 0x78
 8010168:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801016c:	4864      	ldr	r0, [pc, #400]	; (8010300 <_printf_i+0x220>)
 801016e:	e055      	b.n	801021c <_printf_i+0x13c>
 8010170:	6813      	ldr	r3, [r2, #0]
 8010172:	1d19      	adds	r1, r3, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6011      	str	r1, [r2, #0]
 8010178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801017c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010180:	2301      	movs	r3, #1
 8010182:	e08c      	b.n	801029e <_printf_i+0x1be>
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	6011      	str	r1, [r2, #0]
 8010188:	f010 0f40 	tst.w	r0, #64	; 0x40
 801018c:	bf18      	it	ne
 801018e:	b21b      	sxthne	r3, r3
 8010190:	e7cf      	b.n	8010132 <_printf_i+0x52>
 8010192:	6813      	ldr	r3, [r2, #0]
 8010194:	6825      	ldr	r5, [r4, #0]
 8010196:	1d18      	adds	r0, r3, #4
 8010198:	6010      	str	r0, [r2, #0]
 801019a:	0628      	lsls	r0, r5, #24
 801019c:	d501      	bpl.n	80101a2 <_printf_i+0xc2>
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	e002      	b.n	80101a8 <_printf_i+0xc8>
 80101a2:	0668      	lsls	r0, r5, #25
 80101a4:	d5fb      	bpl.n	801019e <_printf_i+0xbe>
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	4854      	ldr	r0, [pc, #336]	; (80102fc <_printf_i+0x21c>)
 80101aa:	296f      	cmp	r1, #111	; 0x6f
 80101ac:	bf14      	ite	ne
 80101ae:	220a      	movne	r2, #10
 80101b0:	2208      	moveq	r2, #8
 80101b2:	2100      	movs	r1, #0
 80101b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101b8:	6865      	ldr	r5, [r4, #4]
 80101ba:	60a5      	str	r5, [r4, #8]
 80101bc:	2d00      	cmp	r5, #0
 80101be:	f2c0 8095 	blt.w	80102ec <_printf_i+0x20c>
 80101c2:	6821      	ldr	r1, [r4, #0]
 80101c4:	f021 0104 	bic.w	r1, r1, #4
 80101c8:	6021      	str	r1, [r4, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d13d      	bne.n	801024a <_printf_i+0x16a>
 80101ce:	2d00      	cmp	r5, #0
 80101d0:	f040 808e 	bne.w	80102f0 <_printf_i+0x210>
 80101d4:	4665      	mov	r5, ip
 80101d6:	2a08      	cmp	r2, #8
 80101d8:	d10b      	bne.n	80101f2 <_printf_i+0x112>
 80101da:	6823      	ldr	r3, [r4, #0]
 80101dc:	07db      	lsls	r3, r3, #31
 80101de:	d508      	bpl.n	80101f2 <_printf_i+0x112>
 80101e0:	6923      	ldr	r3, [r4, #16]
 80101e2:	6862      	ldr	r2, [r4, #4]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	bfde      	ittt	le
 80101e8:	2330      	movle	r3, #48	; 0x30
 80101ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80101ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80101f2:	ebac 0305 	sub.w	r3, ip, r5
 80101f6:	6123      	str	r3, [r4, #16]
 80101f8:	f8cd 8000 	str.w	r8, [sp]
 80101fc:	463b      	mov	r3, r7
 80101fe:	aa03      	add	r2, sp, #12
 8010200:	4621      	mov	r1, r4
 8010202:	4630      	mov	r0, r6
 8010204:	f7ff fef6 	bl	800fff4 <_printf_common>
 8010208:	3001      	adds	r0, #1
 801020a:	d14d      	bne.n	80102a8 <_printf_i+0x1c8>
 801020c:	f04f 30ff 	mov.w	r0, #4294967295
 8010210:	b005      	add	sp, #20
 8010212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010216:	4839      	ldr	r0, [pc, #228]	; (80102fc <_printf_i+0x21c>)
 8010218:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801021c:	6813      	ldr	r3, [r2, #0]
 801021e:	6821      	ldr	r1, [r4, #0]
 8010220:	1d1d      	adds	r5, r3, #4
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	6015      	str	r5, [r2, #0]
 8010226:	060a      	lsls	r2, r1, #24
 8010228:	d50b      	bpl.n	8010242 <_printf_i+0x162>
 801022a:	07ca      	lsls	r2, r1, #31
 801022c:	bf44      	itt	mi
 801022e:	f041 0120 	orrmi.w	r1, r1, #32
 8010232:	6021      	strmi	r1, [r4, #0]
 8010234:	b91b      	cbnz	r3, 801023e <_printf_i+0x15e>
 8010236:	6822      	ldr	r2, [r4, #0]
 8010238:	f022 0220 	bic.w	r2, r2, #32
 801023c:	6022      	str	r2, [r4, #0]
 801023e:	2210      	movs	r2, #16
 8010240:	e7b7      	b.n	80101b2 <_printf_i+0xd2>
 8010242:	064d      	lsls	r5, r1, #25
 8010244:	bf48      	it	mi
 8010246:	b29b      	uxthmi	r3, r3
 8010248:	e7ef      	b.n	801022a <_printf_i+0x14a>
 801024a:	4665      	mov	r5, ip
 801024c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010250:	fb02 3311 	mls	r3, r2, r1, r3
 8010254:	5cc3      	ldrb	r3, [r0, r3]
 8010256:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801025a:	460b      	mov	r3, r1
 801025c:	2900      	cmp	r1, #0
 801025e:	d1f5      	bne.n	801024c <_printf_i+0x16c>
 8010260:	e7b9      	b.n	80101d6 <_printf_i+0xf6>
 8010262:	6813      	ldr	r3, [r2, #0]
 8010264:	6825      	ldr	r5, [r4, #0]
 8010266:	6961      	ldr	r1, [r4, #20]
 8010268:	1d18      	adds	r0, r3, #4
 801026a:	6010      	str	r0, [r2, #0]
 801026c:	0628      	lsls	r0, r5, #24
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	d501      	bpl.n	8010276 <_printf_i+0x196>
 8010272:	6019      	str	r1, [r3, #0]
 8010274:	e002      	b.n	801027c <_printf_i+0x19c>
 8010276:	066a      	lsls	r2, r5, #25
 8010278:	d5fb      	bpl.n	8010272 <_printf_i+0x192>
 801027a:	8019      	strh	r1, [r3, #0]
 801027c:	2300      	movs	r3, #0
 801027e:	6123      	str	r3, [r4, #16]
 8010280:	4665      	mov	r5, ip
 8010282:	e7b9      	b.n	80101f8 <_printf_i+0x118>
 8010284:	6813      	ldr	r3, [r2, #0]
 8010286:	1d19      	adds	r1, r3, #4
 8010288:	6011      	str	r1, [r2, #0]
 801028a:	681d      	ldr	r5, [r3, #0]
 801028c:	6862      	ldr	r2, [r4, #4]
 801028e:	2100      	movs	r1, #0
 8010290:	4628      	mov	r0, r5
 8010292:	f7ef ffad 	bl	80001f0 <memchr>
 8010296:	b108      	cbz	r0, 801029c <_printf_i+0x1bc>
 8010298:	1b40      	subs	r0, r0, r5
 801029a:	6060      	str	r0, [r4, #4]
 801029c:	6863      	ldr	r3, [r4, #4]
 801029e:	6123      	str	r3, [r4, #16]
 80102a0:	2300      	movs	r3, #0
 80102a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102a6:	e7a7      	b.n	80101f8 <_printf_i+0x118>
 80102a8:	6923      	ldr	r3, [r4, #16]
 80102aa:	462a      	mov	r2, r5
 80102ac:	4639      	mov	r1, r7
 80102ae:	4630      	mov	r0, r6
 80102b0:	47c0      	blx	r8
 80102b2:	3001      	adds	r0, #1
 80102b4:	d0aa      	beq.n	801020c <_printf_i+0x12c>
 80102b6:	6823      	ldr	r3, [r4, #0]
 80102b8:	079b      	lsls	r3, r3, #30
 80102ba:	d413      	bmi.n	80102e4 <_printf_i+0x204>
 80102bc:	68e0      	ldr	r0, [r4, #12]
 80102be:	9b03      	ldr	r3, [sp, #12]
 80102c0:	4298      	cmp	r0, r3
 80102c2:	bfb8      	it	lt
 80102c4:	4618      	movlt	r0, r3
 80102c6:	e7a3      	b.n	8010210 <_printf_i+0x130>
 80102c8:	2301      	movs	r3, #1
 80102ca:	464a      	mov	r2, r9
 80102cc:	4639      	mov	r1, r7
 80102ce:	4630      	mov	r0, r6
 80102d0:	47c0      	blx	r8
 80102d2:	3001      	adds	r0, #1
 80102d4:	d09a      	beq.n	801020c <_printf_i+0x12c>
 80102d6:	3501      	adds	r5, #1
 80102d8:	68e3      	ldr	r3, [r4, #12]
 80102da:	9a03      	ldr	r2, [sp, #12]
 80102dc:	1a9b      	subs	r3, r3, r2
 80102de:	42ab      	cmp	r3, r5
 80102e0:	dcf2      	bgt.n	80102c8 <_printf_i+0x1e8>
 80102e2:	e7eb      	b.n	80102bc <_printf_i+0x1dc>
 80102e4:	2500      	movs	r5, #0
 80102e6:	f104 0919 	add.w	r9, r4, #25
 80102ea:	e7f5      	b.n	80102d8 <_printf_i+0x1f8>
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1ac      	bne.n	801024a <_printf_i+0x16a>
 80102f0:	7803      	ldrb	r3, [r0, #0]
 80102f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102fa:	e76c      	b.n	80101d6 <_printf_i+0xf6>
 80102fc:	080112ed 	.word	0x080112ed
 8010300:	080112fe 	.word	0x080112fe

08010304 <memmove>:
 8010304:	4288      	cmp	r0, r1
 8010306:	b510      	push	{r4, lr}
 8010308:	eb01 0302 	add.w	r3, r1, r2
 801030c:	d807      	bhi.n	801031e <memmove+0x1a>
 801030e:	1e42      	subs	r2, r0, #1
 8010310:	4299      	cmp	r1, r3
 8010312:	d00a      	beq.n	801032a <memmove+0x26>
 8010314:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010318:	f802 4f01 	strb.w	r4, [r2, #1]!
 801031c:	e7f8      	b.n	8010310 <memmove+0xc>
 801031e:	4283      	cmp	r3, r0
 8010320:	d9f5      	bls.n	801030e <memmove+0xa>
 8010322:	1881      	adds	r1, r0, r2
 8010324:	1ad2      	subs	r2, r2, r3
 8010326:	42d3      	cmn	r3, r2
 8010328:	d100      	bne.n	801032c <memmove+0x28>
 801032a:	bd10      	pop	{r4, pc}
 801032c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010330:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010334:	e7f7      	b.n	8010326 <memmove+0x22>

08010336 <_realloc_r>:
 8010336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010338:	4607      	mov	r7, r0
 801033a:	4614      	mov	r4, r2
 801033c:	460e      	mov	r6, r1
 801033e:	b921      	cbnz	r1, 801034a <_realloc_r+0x14>
 8010340:	4611      	mov	r1, r2
 8010342:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010346:	f7ff bc77 	b.w	800fc38 <_malloc_r>
 801034a:	b922      	cbnz	r2, 8010356 <_realloc_r+0x20>
 801034c:	f7ff fc26 	bl	800fb9c <_free_r>
 8010350:	4625      	mov	r5, r4
 8010352:	4628      	mov	r0, r5
 8010354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010356:	f000 f814 	bl	8010382 <_malloc_usable_size_r>
 801035a:	42a0      	cmp	r0, r4
 801035c:	d20f      	bcs.n	801037e <_realloc_r+0x48>
 801035e:	4621      	mov	r1, r4
 8010360:	4638      	mov	r0, r7
 8010362:	f7ff fc69 	bl	800fc38 <_malloc_r>
 8010366:	4605      	mov	r5, r0
 8010368:	2800      	cmp	r0, #0
 801036a:	d0f2      	beq.n	8010352 <_realloc_r+0x1c>
 801036c:	4631      	mov	r1, r6
 801036e:	4622      	mov	r2, r4
 8010370:	f7ff fc00 	bl	800fb74 <memcpy>
 8010374:	4631      	mov	r1, r6
 8010376:	4638      	mov	r0, r7
 8010378:	f7ff fc10 	bl	800fb9c <_free_r>
 801037c:	e7e9      	b.n	8010352 <_realloc_r+0x1c>
 801037e:	4635      	mov	r5, r6
 8010380:	e7e7      	b.n	8010352 <_realloc_r+0x1c>

08010382 <_malloc_usable_size_r>:
 8010382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010386:	1f18      	subs	r0, r3, #4
 8010388:	2b00      	cmp	r3, #0
 801038a:	bfbc      	itt	lt
 801038c:	580b      	ldrlt	r3, [r1, r0]
 801038e:	18c0      	addlt	r0, r0, r3
 8010390:	4770      	bx	lr
	...

08010394 <roundf>:
 8010394:	ee10 0a10 	vmov	r0, s0
 8010398:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801039c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80103a0:	2a16      	cmp	r2, #22
 80103a2:	dc15      	bgt.n	80103d0 <roundf+0x3c>
 80103a4:	2a00      	cmp	r2, #0
 80103a6:	da08      	bge.n	80103ba <roundf+0x26>
 80103a8:	3201      	adds	r2, #1
 80103aa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80103ae:	d101      	bne.n	80103b4 <roundf+0x20>
 80103b0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80103b4:	ee00 3a10 	vmov	s0, r3
 80103b8:	4770      	bx	lr
 80103ba:	4908      	ldr	r1, [pc, #32]	; (80103dc <roundf+0x48>)
 80103bc:	4111      	asrs	r1, r2
 80103be:	4208      	tst	r0, r1
 80103c0:	d0fa      	beq.n	80103b8 <roundf+0x24>
 80103c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80103c6:	4113      	asrs	r3, r2
 80103c8:	4403      	add	r3, r0
 80103ca:	ea23 0301 	bic.w	r3, r3, r1
 80103ce:	e7f1      	b.n	80103b4 <roundf+0x20>
 80103d0:	2a80      	cmp	r2, #128	; 0x80
 80103d2:	d1f1      	bne.n	80103b8 <roundf+0x24>
 80103d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	007fffff 	.word	0x007fffff

080103e0 <powf>:
 80103e0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80103e4:	ed2d 8b04 	vpush	{d8-d9}
 80103e8:	4ca7      	ldr	r4, [pc, #668]	; (8010688 <powf+0x2a8>)
 80103ea:	b08a      	sub	sp, #40	; 0x28
 80103ec:	eef0 8a40 	vmov.f32	s17, s0
 80103f0:	eeb0 8a60 	vmov.f32	s16, s1
 80103f4:	f000 f958 	bl	80106a8 <__ieee754_powf>
 80103f8:	f994 5000 	ldrsb.w	r5, [r4]
 80103fc:	1c6b      	adds	r3, r5, #1
 80103fe:	eeb0 9a40 	vmov.f32	s18, s0
 8010402:	4626      	mov	r6, r4
 8010404:	d05f      	beq.n	80104c6 <powf+0xe6>
 8010406:	eeb4 8a48 	vcmp.f32	s16, s16
 801040a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040e:	d65a      	bvs.n	80104c6 <powf+0xe6>
 8010410:	eef4 8a68 	vcmp.f32	s17, s17
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	d721      	bvc.n	801045e <powf+0x7e>
 801041a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801041e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010422:	d150      	bne.n	80104c6 <powf+0xe6>
 8010424:	2301      	movs	r3, #1
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4b98      	ldr	r3, [pc, #608]	; (801068c <powf+0x2ac>)
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	ee18 0a90 	vmov	r0, s17
 8010430:	2300      	movs	r3, #0
 8010432:	9308      	str	r3, [sp, #32]
 8010434:	f7f0 f890 	bl	8000558 <__aeabi_f2d>
 8010438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801043c:	ee18 0a10 	vmov	r0, s16
 8010440:	f7f0 f88a 	bl	8000558 <__aeabi_f2d>
 8010444:	4b92      	ldr	r3, [pc, #584]	; (8010690 <powf+0x2b0>)
 8010446:	2200      	movs	r2, #0
 8010448:	2d02      	cmp	r5, #2
 801044a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801044e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010452:	d032      	beq.n	80104ba <powf+0xda>
 8010454:	4668      	mov	r0, sp
 8010456:	f000 fbea 	bl	8010c2e <matherr>
 801045a:	bb40      	cbnz	r0, 80104ae <powf+0xce>
 801045c:	e065      	b.n	801052a <powf+0x14a>
 801045e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8010694 <powf+0x2b4>
 8010462:	eef4 8a69 	vcmp.f32	s17, s19
 8010466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046a:	d163      	bne.n	8010534 <powf+0x154>
 801046c:	eeb4 8a69 	vcmp.f32	s16, s19
 8010470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010474:	d12e      	bne.n	80104d4 <powf+0xf4>
 8010476:	2301      	movs	r3, #1
 8010478:	9300      	str	r3, [sp, #0]
 801047a:	4b84      	ldr	r3, [pc, #528]	; (801068c <powf+0x2ac>)
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	ee18 0a90 	vmov	r0, s17
 8010482:	2300      	movs	r3, #0
 8010484:	9308      	str	r3, [sp, #32]
 8010486:	f7f0 f867 	bl	8000558 <__aeabi_f2d>
 801048a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801048e:	ee18 0a10 	vmov	r0, s16
 8010492:	f7f0 f861 	bl	8000558 <__aeabi_f2d>
 8010496:	2200      	movs	r2, #0
 8010498:	2300      	movs	r3, #0
 801049a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801049e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80104a2:	2d00      	cmp	r5, #0
 80104a4:	d0d6      	beq.n	8010454 <powf+0x74>
 80104a6:	4b7a      	ldr	r3, [pc, #488]	; (8010690 <powf+0x2b0>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80104ae:	9b08      	ldr	r3, [sp, #32]
 80104b0:	b11b      	cbz	r3, 80104ba <powf+0xda>
 80104b2:	f7ff fb25 	bl	800fb00 <__errno>
 80104b6:	9b08      	ldr	r3, [sp, #32]
 80104b8:	6003      	str	r3, [r0, #0]
 80104ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104be:	f7f0 f8a3 	bl	8000608 <__aeabi_d2f>
 80104c2:	ee09 0a10 	vmov	s18, r0
 80104c6:	eeb0 0a49 	vmov.f32	s0, s18
 80104ca:	b00a      	add	sp, #40	; 0x28
 80104cc:	ecbd 8b04 	vpop	{d8-d9}
 80104d0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80104d4:	eeb0 0a48 	vmov.f32	s0, s16
 80104d8:	f000 fbb2 	bl	8010c40 <finitef>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d0f2      	beq.n	80104c6 <powf+0xe6>
 80104e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80104e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e8:	d5ed      	bpl.n	80104c6 <powf+0xe6>
 80104ea:	2301      	movs	r3, #1
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	4b67      	ldr	r3, [pc, #412]	; (801068c <powf+0x2ac>)
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	ee18 0a90 	vmov	r0, s17
 80104f6:	2300      	movs	r3, #0
 80104f8:	9308      	str	r3, [sp, #32]
 80104fa:	f7f0 f82d 	bl	8000558 <__aeabi_f2d>
 80104fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010502:	ee18 0a10 	vmov	r0, s16
 8010506:	f7f0 f827 	bl	8000558 <__aeabi_f2d>
 801050a:	f994 3000 	ldrsb.w	r3, [r4]
 801050e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010512:	b923      	cbnz	r3, 801051e <powf+0x13e>
 8010514:	2200      	movs	r2, #0
 8010516:	2300      	movs	r3, #0
 8010518:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801051c:	e79a      	b.n	8010454 <powf+0x74>
 801051e:	495e      	ldr	r1, [pc, #376]	; (8010698 <powf+0x2b8>)
 8010520:	2000      	movs	r0, #0
 8010522:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010526:	2b02      	cmp	r3, #2
 8010528:	d194      	bne.n	8010454 <powf+0x74>
 801052a:	f7ff fae9 	bl	800fb00 <__errno>
 801052e:	2321      	movs	r3, #33	; 0x21
 8010530:	6003      	str	r3, [r0, #0]
 8010532:	e7bc      	b.n	80104ae <powf+0xce>
 8010534:	f000 fb84 	bl	8010c40 <finitef>
 8010538:	4605      	mov	r5, r0
 801053a:	2800      	cmp	r0, #0
 801053c:	d173      	bne.n	8010626 <powf+0x246>
 801053e:	eeb0 0a68 	vmov.f32	s0, s17
 8010542:	f000 fb7d 	bl	8010c40 <finitef>
 8010546:	2800      	cmp	r0, #0
 8010548:	d06d      	beq.n	8010626 <powf+0x246>
 801054a:	eeb0 0a48 	vmov.f32	s0, s16
 801054e:	f000 fb77 	bl	8010c40 <finitef>
 8010552:	2800      	cmp	r0, #0
 8010554:	d067      	beq.n	8010626 <powf+0x246>
 8010556:	ee18 0a90 	vmov	r0, s17
 801055a:	f7ef fffd 	bl	8000558 <__aeabi_f2d>
 801055e:	4680      	mov	r8, r0
 8010560:	ee18 0a10 	vmov	r0, s16
 8010564:	4689      	mov	r9, r1
 8010566:	f7ef fff7 	bl	8000558 <__aeabi_f2d>
 801056a:	eeb4 9a49 	vcmp.f32	s18, s18
 801056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010572:	f994 4000 	ldrsb.w	r4, [r4]
 8010576:	4b45      	ldr	r3, [pc, #276]	; (801068c <powf+0x2ac>)
 8010578:	d713      	bvc.n	80105a2 <powf+0x1c2>
 801057a:	2201      	movs	r2, #1
 801057c:	e9cd 2300 	strd	r2, r3, [sp]
 8010580:	9508      	str	r5, [sp, #32]
 8010582:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801058a:	2c00      	cmp	r4, #0
 801058c:	d0c2      	beq.n	8010514 <powf+0x134>
 801058e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8010592:	ee17 0a90 	vmov	r0, s15
 8010596:	f7ef ffdf 	bl	8000558 <__aeabi_f2d>
 801059a:	2c02      	cmp	r4, #2
 801059c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80105a0:	e7c2      	b.n	8010528 <powf+0x148>
 80105a2:	2203      	movs	r2, #3
 80105a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80105a8:	e9cd 2300 	strd	r2, r3, [sp]
 80105ac:	9508      	str	r5, [sp, #32]
 80105ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80105b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80105ba:	b9fc      	cbnz	r4, 80105fc <powf+0x21c>
 80105bc:	4b37      	ldr	r3, [pc, #220]	; (801069c <powf+0x2bc>)
 80105be:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80105c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80105c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105ce:	d553      	bpl.n	8010678 <powf+0x298>
 80105d0:	eeb0 0a48 	vmov.f32	s0, s16
 80105d4:	f000 fb44 	bl	8010c60 <rintf>
 80105d8:	eeb4 0a48 	vcmp.f32	s0, s16
 80105dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e0:	d004      	beq.n	80105ec <powf+0x20c>
 80105e2:	4b2f      	ldr	r3, [pc, #188]	; (80106a0 <powf+0x2c0>)
 80105e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80105e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105ec:	f996 3000 	ldrsb.w	r3, [r6]
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	d141      	bne.n	8010678 <powf+0x298>
 80105f4:	f7ff fa84 	bl	800fb00 <__errno>
 80105f8:	2322      	movs	r3, #34	; 0x22
 80105fa:	e799      	b.n	8010530 <powf+0x150>
 80105fc:	4b29      	ldr	r3, [pc, #164]	; (80106a4 <powf+0x2c4>)
 80105fe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010602:	2200      	movs	r2, #0
 8010604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010608:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801060c:	d5ee      	bpl.n	80105ec <powf+0x20c>
 801060e:	eeb0 0a48 	vmov.f32	s0, s16
 8010612:	f000 fb25 	bl	8010c60 <rintf>
 8010616:	eeb4 0a48 	vcmp.f32	s0, s16
 801061a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801061e:	d0e5      	beq.n	80105ec <powf+0x20c>
 8010620:	2200      	movs	r2, #0
 8010622:	4b1d      	ldr	r3, [pc, #116]	; (8010698 <powf+0x2b8>)
 8010624:	e7e0      	b.n	80105e8 <powf+0x208>
 8010626:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801062e:	f47f af4a 	bne.w	80104c6 <powf+0xe6>
 8010632:	eeb0 0a68 	vmov.f32	s0, s17
 8010636:	f000 fb03 	bl	8010c40 <finitef>
 801063a:	2800      	cmp	r0, #0
 801063c:	f43f af43 	beq.w	80104c6 <powf+0xe6>
 8010640:	eeb0 0a48 	vmov.f32	s0, s16
 8010644:	f000 fafc 	bl	8010c40 <finitef>
 8010648:	2800      	cmp	r0, #0
 801064a:	f43f af3c 	beq.w	80104c6 <powf+0xe6>
 801064e:	2304      	movs	r3, #4
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	4b0e      	ldr	r3, [pc, #56]	; (801068c <powf+0x2ac>)
 8010654:	9301      	str	r3, [sp, #4]
 8010656:	ee18 0a90 	vmov	r0, s17
 801065a:	2300      	movs	r3, #0
 801065c:	9308      	str	r3, [sp, #32]
 801065e:	f7ef ff7b 	bl	8000558 <__aeabi_f2d>
 8010662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010666:	ee18 0a10 	vmov	r0, s16
 801066a:	f7ef ff75 	bl	8000558 <__aeabi_f2d>
 801066e:	2200      	movs	r2, #0
 8010670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010674:	2300      	movs	r3, #0
 8010676:	e7b7      	b.n	80105e8 <powf+0x208>
 8010678:	4668      	mov	r0, sp
 801067a:	f000 fad8 	bl	8010c2e <matherr>
 801067e:	2800      	cmp	r0, #0
 8010680:	f47f af15 	bne.w	80104ae <powf+0xce>
 8010684:	e7b6      	b.n	80105f4 <powf+0x214>
 8010686:	bf00      	nop
 8010688:	20000490 	.word	0x20000490
 801068c:	0801130f 	.word	0x0801130f
 8010690:	3ff00000 	.word	0x3ff00000
 8010694:	00000000 	.word	0x00000000
 8010698:	fff00000 	.word	0xfff00000
 801069c:	47efffff 	.word	0x47efffff
 80106a0:	c7efffff 	.word	0xc7efffff
 80106a4:	7ff00000 	.word	0x7ff00000

080106a8 <__ieee754_powf>:
 80106a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ac:	ee10 5a90 	vmov	r5, s1
 80106b0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80106b4:	ed2d 8b02 	vpush	{d8}
 80106b8:	eeb0 8a40 	vmov.f32	s16, s0
 80106bc:	eef0 8a60 	vmov.f32	s17, s1
 80106c0:	f000 8293 	beq.w	8010bea <__ieee754_powf+0x542>
 80106c4:	ee10 8a10 	vmov	r8, s0
 80106c8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80106cc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80106d0:	dc06      	bgt.n	80106e0 <__ieee754_powf+0x38>
 80106d2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80106d6:	dd0a      	ble.n	80106ee <__ieee754_powf+0x46>
 80106d8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80106dc:	f000 8285 	beq.w	8010bea <__ieee754_powf+0x542>
 80106e0:	ecbd 8b02 	vpop	{d8}
 80106e4:	48d9      	ldr	r0, [pc, #868]	; (8010a4c <__ieee754_powf+0x3a4>)
 80106e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ea:	f000 bab3 	b.w	8010c54 <nanf>
 80106ee:	f1b8 0f00 	cmp.w	r8, #0
 80106f2:	da1d      	bge.n	8010730 <__ieee754_powf+0x88>
 80106f4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80106f8:	da2c      	bge.n	8010754 <__ieee754_powf+0xac>
 80106fa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80106fe:	db30      	blt.n	8010762 <__ieee754_powf+0xba>
 8010700:	15fb      	asrs	r3, r7, #23
 8010702:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010706:	fa47 f603 	asr.w	r6, r7, r3
 801070a:	fa06 f303 	lsl.w	r3, r6, r3
 801070e:	42bb      	cmp	r3, r7
 8010710:	d127      	bne.n	8010762 <__ieee754_powf+0xba>
 8010712:	f006 0601 	and.w	r6, r6, #1
 8010716:	f1c6 0602 	rsb	r6, r6, #2
 801071a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801071e:	d122      	bne.n	8010766 <__ieee754_powf+0xbe>
 8010720:	2d00      	cmp	r5, #0
 8010722:	f280 8268 	bge.w	8010bf6 <__ieee754_powf+0x54e>
 8010726:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801072a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801072e:	e00d      	b.n	801074c <__ieee754_powf+0xa4>
 8010730:	2600      	movs	r6, #0
 8010732:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8010736:	d1f0      	bne.n	801071a <__ieee754_powf+0x72>
 8010738:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801073c:	f000 8255 	beq.w	8010bea <__ieee754_powf+0x542>
 8010740:	dd0a      	ble.n	8010758 <__ieee754_powf+0xb0>
 8010742:	2d00      	cmp	r5, #0
 8010744:	f280 8254 	bge.w	8010bf0 <__ieee754_powf+0x548>
 8010748:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8010a50 <__ieee754_powf+0x3a8>
 801074c:	ecbd 8b02 	vpop	{d8}
 8010750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010754:	2602      	movs	r6, #2
 8010756:	e7ec      	b.n	8010732 <__ieee754_powf+0x8a>
 8010758:	2d00      	cmp	r5, #0
 801075a:	daf5      	bge.n	8010748 <__ieee754_powf+0xa0>
 801075c:	eeb1 0a68 	vneg.f32	s0, s17
 8010760:	e7f4      	b.n	801074c <__ieee754_powf+0xa4>
 8010762:	2600      	movs	r6, #0
 8010764:	e7d9      	b.n	801071a <__ieee754_powf+0x72>
 8010766:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801076a:	d102      	bne.n	8010772 <__ieee754_powf+0xca>
 801076c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010770:	e7ec      	b.n	801074c <__ieee754_powf+0xa4>
 8010772:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8010776:	eeb0 0a48 	vmov.f32	s0, s16
 801077a:	d108      	bne.n	801078e <__ieee754_powf+0xe6>
 801077c:	f1b8 0f00 	cmp.w	r8, #0
 8010780:	db05      	blt.n	801078e <__ieee754_powf+0xe6>
 8010782:	ecbd 8b02 	vpop	{d8}
 8010786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801078a:	f000 ba4d 	b.w	8010c28 <__ieee754_sqrtf>
 801078e:	f000 fa50 	bl	8010c32 <fabsf>
 8010792:	b124      	cbz	r4, 801079e <__ieee754_powf+0xf6>
 8010794:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8010798:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801079c:	d117      	bne.n	80107ce <__ieee754_powf+0x126>
 801079e:	2d00      	cmp	r5, #0
 80107a0:	bfbc      	itt	lt
 80107a2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80107a6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80107aa:	f1b8 0f00 	cmp.w	r8, #0
 80107ae:	dacd      	bge.n	801074c <__ieee754_powf+0xa4>
 80107b0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80107b4:	ea54 0306 	orrs.w	r3, r4, r6
 80107b8:	d104      	bne.n	80107c4 <__ieee754_powf+0x11c>
 80107ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 80107be:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80107c2:	e7c3      	b.n	801074c <__ieee754_powf+0xa4>
 80107c4:	2e01      	cmp	r6, #1
 80107c6:	d1c1      	bne.n	801074c <__ieee754_powf+0xa4>
 80107c8:	eeb1 0a40 	vneg.f32	s0, s0
 80107cc:	e7be      	b.n	801074c <__ieee754_powf+0xa4>
 80107ce:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80107d2:	3801      	subs	r0, #1
 80107d4:	ea56 0300 	orrs.w	r3, r6, r0
 80107d8:	d104      	bne.n	80107e4 <__ieee754_powf+0x13c>
 80107da:	ee38 8a48 	vsub.f32	s16, s16, s16
 80107de:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80107e2:	e7b3      	b.n	801074c <__ieee754_powf+0xa4>
 80107e4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80107e8:	dd6d      	ble.n	80108c6 <__ieee754_powf+0x21e>
 80107ea:	4b9a      	ldr	r3, [pc, #616]	; (8010a54 <__ieee754_powf+0x3ac>)
 80107ec:	429c      	cmp	r4, r3
 80107ee:	dc06      	bgt.n	80107fe <__ieee754_powf+0x156>
 80107f0:	2d00      	cmp	r5, #0
 80107f2:	daa9      	bge.n	8010748 <__ieee754_powf+0xa0>
 80107f4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8010a58 <__ieee754_powf+0x3b0>
 80107f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80107fc:	e7a6      	b.n	801074c <__ieee754_powf+0xa4>
 80107fe:	4b97      	ldr	r3, [pc, #604]	; (8010a5c <__ieee754_powf+0x3b4>)
 8010800:	429c      	cmp	r4, r3
 8010802:	dd02      	ble.n	801080a <__ieee754_powf+0x162>
 8010804:	2d00      	cmp	r5, #0
 8010806:	dcf5      	bgt.n	80107f4 <__ieee754_powf+0x14c>
 8010808:	e79e      	b.n	8010748 <__ieee754_powf+0xa0>
 801080a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801080e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010812:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8010a60 <__ieee754_powf+0x3b8>
 8010816:	eef1 6a40 	vneg.f32	s13, s0
 801081a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801081e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010822:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010826:	eee7 7a40 	vfms.f32	s15, s14, s0
 801082a:	ee60 0a00 	vmul.f32	s1, s0, s0
 801082e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8010a64 <__ieee754_powf+0x3bc>
 8010832:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8010836:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8010a68 <__ieee754_powf+0x3c0>
 801083a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801083e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010842:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010a6c <__ieee754_powf+0x3c4>
 8010846:	eeb0 6a67 	vmov.f32	s12, s15
 801084a:	eea0 6a07 	vfma.f32	s12, s0, s14
 801084e:	ee16 3a10 	vmov	r3, s12
 8010852:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010856:	f023 030f 	bic.w	r3, r3, #15
 801085a:	ee00 3a90 	vmov	s1, r3
 801085e:	eee6 0a87 	vfma.f32	s1, s13, s14
 8010862:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010866:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801086a:	f025 050f 	bic.w	r5, r5, #15
 801086e:	ee07 5a10 	vmov	s14, r5
 8010872:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010876:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801087a:	ee07 3a90 	vmov	s15, r3
 801087e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010882:	3e01      	subs	r6, #1
 8010884:	ea56 0200 	orrs.w	r2, r6, r0
 8010888:	ee07 5a10 	vmov	s14, r5
 801088c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010890:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010894:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010898:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801089c:	ee17 4a10 	vmov	r4, s14
 80108a0:	bf08      	it	eq
 80108a2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80108ac:	f340 8184 	ble.w	8010bb8 <__ieee754_powf+0x510>
 80108b0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80108b4:	f340 80fc 	ble.w	8010ab0 <__ieee754_powf+0x408>
 80108b8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8010a58 <__ieee754_powf+0x3b0>
 80108bc:	ee28 0a27 	vmul.f32	s0, s16, s15
 80108c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80108c4:	e742      	b.n	801074c <__ieee754_powf+0xa4>
 80108c6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80108ca:	bfbf      	itttt	lt
 80108cc:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8010a70 <__ieee754_powf+0x3c8>
 80108d0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80108d4:	f06f 0217 	mvnlt.w	r2, #23
 80108d8:	ee17 4a90 	vmovlt	r4, s15
 80108dc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80108e0:	bfa8      	it	ge
 80108e2:	2200      	movge	r2, #0
 80108e4:	3b7f      	subs	r3, #127	; 0x7f
 80108e6:	4413      	add	r3, r2
 80108e8:	4a62      	ldr	r2, [pc, #392]	; (8010a74 <__ieee754_powf+0x3cc>)
 80108ea:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80108ee:	4294      	cmp	r4, r2
 80108f0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80108f4:	dd06      	ble.n	8010904 <__ieee754_powf+0x25c>
 80108f6:	4a60      	ldr	r2, [pc, #384]	; (8010a78 <__ieee754_powf+0x3d0>)
 80108f8:	4294      	cmp	r4, r2
 80108fa:	f340 80a5 	ble.w	8010a48 <__ieee754_powf+0x3a0>
 80108fe:	3301      	adds	r3, #1
 8010900:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010904:	2400      	movs	r4, #0
 8010906:	4a5d      	ldr	r2, [pc, #372]	; (8010a7c <__ieee754_powf+0x3d4>)
 8010908:	00a7      	lsls	r7, r4, #2
 801090a:	443a      	add	r2, r7
 801090c:	ee07 1a90 	vmov	s15, r1
 8010910:	ed92 7a00 	vldr	s14, [r2]
 8010914:	4a5a      	ldr	r2, [pc, #360]	; (8010a80 <__ieee754_powf+0x3d8>)
 8010916:	ee37 6a27 	vadd.f32	s12, s14, s15
 801091a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801091e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8010922:	1049      	asrs	r1, r1, #1
 8010924:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8010928:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801092c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8010930:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8010934:	ee06 1a10 	vmov	s12, r1
 8010938:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801093c:	ee14 ca90 	vmov	ip, s9
 8010940:	ea02 0c0c 	and.w	ip, r2, ip
 8010944:	ee05 ca10 	vmov	s10, ip
 8010948:	eeb1 4a45 	vneg.f32	s8, s10
 801094c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8010950:	ee36 6a47 	vsub.f32	s12, s12, s14
 8010954:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010a84 <__ieee754_powf+0x3dc>
 8010958:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801095c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8010960:	eee4 5a06 	vfma.f32	s11, s8, s12
 8010964:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8010968:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801096c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8010a88 <__ieee754_powf+0x3e0>
 8010970:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010974:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010a8c <__ieee754_powf+0x3e4>
 8010978:	eee7 5a27 	vfma.f32	s11, s14, s15
 801097c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010a60 <__ieee754_powf+0x3b8>
 8010980:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010984:	eddf 5a42 	vldr	s11, [pc, #264]	; 8010a90 <__ieee754_powf+0x3e8>
 8010988:	eee7 5a27 	vfma.f32	s11, s14, s15
 801098c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010a94 <__ieee754_powf+0x3ec>
 8010990:	ee75 6a24 	vadd.f32	s13, s10, s9
 8010994:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010998:	ee66 6a86 	vmul.f32	s13, s13, s12
 801099c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80109a0:	eef0 7a65 	vmov.f32	s15, s11
 80109a4:	eee3 6a87 	vfma.f32	s13, s7, s14
 80109a8:	eee5 7a05 	vfma.f32	s15, s10, s10
 80109ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109b0:	ee17 1a90 	vmov	r1, s15
 80109b4:	4011      	ands	r1, r2
 80109b6:	ee07 1a90 	vmov	s15, r1
 80109ba:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80109be:	eddf 5a36 	vldr	s11, [pc, #216]	; 8010a98 <__ieee754_powf+0x3f0>
 80109c2:	eea4 7a05 	vfma.f32	s14, s8, s10
 80109c6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80109ca:	ee27 7a24 	vmul.f32	s14, s14, s9
 80109ce:	eea7 7a86 	vfma.f32	s14, s15, s12
 80109d2:	eeb0 6a47 	vmov.f32	s12, s14
 80109d6:	eea5 6a27 	vfma.f32	s12, s10, s15
 80109da:	ee16 1a10 	vmov	r1, s12
 80109de:	4011      	ands	r1, r2
 80109e0:	ee06 1a90 	vmov	s13, r1
 80109e4:	eee4 6a27 	vfma.f32	s13, s8, s15
 80109e8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8010a9c <__ieee754_powf+0x3f4>
 80109ec:	ee37 7a66 	vsub.f32	s14, s14, s13
 80109f0:	ee06 1a10 	vmov	s12, r1
 80109f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109f8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8010aa0 <__ieee754_powf+0x3f8>
 80109fc:	4929      	ldr	r1, [pc, #164]	; (8010aa4 <__ieee754_powf+0x3fc>)
 80109fe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010a02:	4439      	add	r1, r7
 8010a04:	edd1 7a00 	vldr	s15, [r1]
 8010a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a0c:	ee07 3a90 	vmov	s15, r3
 8010a10:	eef0 0a47 	vmov.f32	s1, s14
 8010a14:	4b24      	ldr	r3, [pc, #144]	; (8010aa8 <__ieee754_powf+0x400>)
 8010a16:	eee6 0a25 	vfma.f32	s1, s12, s11
 8010a1a:	443b      	add	r3, r7
 8010a1c:	ed93 5a00 	vldr	s10, [r3]
 8010a20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010a24:	ee70 0a85 	vadd.f32	s1, s1, s10
 8010a28:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8010a2c:	ee17 3a90 	vmov	r3, s15
 8010a30:	4013      	ands	r3, r2
 8010a32:	ee07 3a90 	vmov	s15, r3
 8010a36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010a3a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8010a3e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8010a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a46:	e70e      	b.n	8010866 <__ieee754_powf+0x1be>
 8010a48:	2401      	movs	r4, #1
 8010a4a:	e75c      	b.n	8010906 <__ieee754_powf+0x25e>
 8010a4c:	080112e1 	.word	0x080112e1
 8010a50:	00000000 	.word	0x00000000
 8010a54:	3f7ffff7 	.word	0x3f7ffff7
 8010a58:	7149f2ca 	.word	0x7149f2ca
 8010a5c:	3f800007 	.word	0x3f800007
 8010a60:	3eaaaaab 	.word	0x3eaaaaab
 8010a64:	36eca570 	.word	0x36eca570
 8010a68:	3fb8aa3b 	.word	0x3fb8aa3b
 8010a6c:	3fb8aa00 	.word	0x3fb8aa00
 8010a70:	4b800000 	.word	0x4b800000
 8010a74:	001cc471 	.word	0x001cc471
 8010a78:	005db3d6 	.word	0x005db3d6
 8010a7c:	08011314 	.word	0x08011314
 8010a80:	fffff000 	.word	0xfffff000
 8010a84:	3e6c3255 	.word	0x3e6c3255
 8010a88:	3e53f142 	.word	0x3e53f142
 8010a8c:	3e8ba305 	.word	0x3e8ba305
 8010a90:	3edb6db7 	.word	0x3edb6db7
 8010a94:	3f19999a 	.word	0x3f19999a
 8010a98:	3f763800 	.word	0x3f763800
 8010a9c:	3f76384f 	.word	0x3f76384f
 8010aa0:	369dc3a0 	.word	0x369dc3a0
 8010aa4:	08011324 	.word	0x08011324
 8010aa8:	0801131c 	.word	0x0801131c
 8010aac:	3338aa3c 	.word	0x3338aa3c
 8010ab0:	f040 8092 	bne.w	8010bd8 <__ieee754_powf+0x530>
 8010ab4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010aac <__ieee754_powf+0x404>
 8010ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010abc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010ac0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac8:	f73f aef6 	bgt.w	80108b8 <__ieee754_powf+0x210>
 8010acc:	15db      	asrs	r3, r3, #23
 8010ace:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010ad2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ad6:	4103      	asrs	r3, r0
 8010ad8:	4423      	add	r3, r4
 8010ada:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010ade:	4947      	ldr	r1, [pc, #284]	; (8010bfc <__ieee754_powf+0x554>)
 8010ae0:	3a7f      	subs	r2, #127	; 0x7f
 8010ae2:	4111      	asrs	r1, r2
 8010ae4:	ea23 0101 	bic.w	r1, r3, r1
 8010ae8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010aec:	ee07 1a10 	vmov	s14, r1
 8010af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010af4:	f1c2 0217 	rsb	r2, r2, #23
 8010af8:	4110      	asrs	r0, r2
 8010afa:	2c00      	cmp	r4, #0
 8010afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b00:	bfb8      	it	lt
 8010b02:	4240      	neglt	r0, r0
 8010b04:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010b08:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010c00 <__ieee754_powf+0x558>
 8010b0c:	ee17 3a10 	vmov	r3, s14
 8010b10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010b14:	f023 030f 	bic.w	r3, r3, #15
 8010b18:	ee07 3a10 	vmov	s14, r3
 8010b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b20:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010b24:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010c04 <__ieee754_powf+0x55c>
 8010b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b2c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8010b30:	eddf 6a35 	vldr	s13, [pc, #212]	; 8010c08 <__ieee754_powf+0x560>
 8010b34:	eeb0 0a67 	vmov.f32	s0, s15
 8010b38:	eea7 0a26 	vfma.f32	s0, s14, s13
 8010b3c:	eeb0 6a40 	vmov.f32	s12, s0
 8010b40:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010b44:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010b48:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010b4c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8010c0c <__ieee754_powf+0x564>
 8010b50:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8010c10 <__ieee754_powf+0x568>
 8010b54:	eea7 6a26 	vfma.f32	s12, s14, s13
 8010b58:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8010c14 <__ieee754_powf+0x56c>
 8010b5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010b60:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8010c18 <__ieee754_powf+0x570>
 8010b64:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010b68:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010c1c <__ieee754_powf+0x574>
 8010b6c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010b70:	eeb0 6a40 	vmov.f32	s12, s0
 8010b74:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010b78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010b7c:	eeb0 7a46 	vmov.f32	s14, s12
 8010b80:	ee77 6a66 	vsub.f32	s13, s14, s13
 8010b84:	ee20 6a06 	vmul.f32	s12, s0, s12
 8010b88:	eee0 7a27 	vfma.f32	s15, s0, s15
 8010b8c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010ba0:	ee10 3a10 	vmov	r3, s0
 8010ba4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010bac:	da1a      	bge.n	8010be4 <__ieee754_powf+0x53c>
 8010bae:	f000 f8b1 	bl	8010d14 <scalbnf>
 8010bb2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010bb6:	e5c9      	b.n	801074c <__ieee754_powf+0xa4>
 8010bb8:	4a19      	ldr	r2, [pc, #100]	; (8010c20 <__ieee754_powf+0x578>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	dd02      	ble.n	8010bc4 <__ieee754_powf+0x51c>
 8010bbe:	eddf 7a19 	vldr	s15, [pc, #100]	; 8010c24 <__ieee754_powf+0x57c>
 8010bc2:	e67b      	b.n	80108bc <__ieee754_powf+0x214>
 8010bc4:	d108      	bne.n	8010bd8 <__ieee754_powf+0x530>
 8010bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010bca:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd2:	f6ff af7b 	blt.w	8010acc <__ieee754_powf+0x424>
 8010bd6:	e7f2      	b.n	8010bbe <__ieee754_powf+0x516>
 8010bd8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010bdc:	f73f af76 	bgt.w	8010acc <__ieee754_powf+0x424>
 8010be0:	2000      	movs	r0, #0
 8010be2:	e78f      	b.n	8010b04 <__ieee754_powf+0x45c>
 8010be4:	ee00 3a10 	vmov	s0, r3
 8010be8:	e7e3      	b.n	8010bb2 <__ieee754_powf+0x50a>
 8010bea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010bee:	e5ad      	b.n	801074c <__ieee754_powf+0xa4>
 8010bf0:	eeb0 0a68 	vmov.f32	s0, s17
 8010bf4:	e5aa      	b.n	801074c <__ieee754_powf+0xa4>
 8010bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8010bfa:	e5a7      	b.n	801074c <__ieee754_powf+0xa4>
 8010bfc:	007fffff 	.word	0x007fffff
 8010c00:	3f317218 	.word	0x3f317218
 8010c04:	35bfbe8c 	.word	0x35bfbe8c
 8010c08:	3f317200 	.word	0x3f317200
 8010c0c:	3331bb4c 	.word	0x3331bb4c
 8010c10:	b5ddea0e 	.word	0xb5ddea0e
 8010c14:	388ab355 	.word	0x388ab355
 8010c18:	bb360b61 	.word	0xbb360b61
 8010c1c:	3e2aaaab 	.word	0x3e2aaaab
 8010c20:	43160000 	.word	0x43160000
 8010c24:	0da24260 	.word	0x0da24260

08010c28 <__ieee754_sqrtf>:
 8010c28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010c2c:	4770      	bx	lr

08010c2e <matherr>:
 8010c2e:	2000      	movs	r0, #0
 8010c30:	4770      	bx	lr

08010c32 <fabsf>:
 8010c32:	ee10 3a10 	vmov	r3, s0
 8010c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c3a:	ee00 3a10 	vmov	s0, r3
 8010c3e:	4770      	bx	lr

08010c40 <finitef>:
 8010c40:	ee10 3a10 	vmov	r3, s0
 8010c44:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010c48:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010c4c:	bfac      	ite	ge
 8010c4e:	2000      	movge	r0, #0
 8010c50:	2001      	movlt	r0, #1
 8010c52:	4770      	bx	lr

08010c54 <nanf>:
 8010c54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010c5c <nanf+0x8>
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop
 8010c5c:	7fc00000 	.word	0x7fc00000

08010c60 <rintf>:
 8010c60:	b513      	push	{r0, r1, r4, lr}
 8010c62:	ee10 1a10 	vmov	r1, s0
 8010c66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c6a:	0ddc      	lsrs	r4, r3, #23
 8010c6c:	3c7f      	subs	r4, #127	; 0x7f
 8010c6e:	2c16      	cmp	r4, #22
 8010c70:	dc46      	bgt.n	8010d00 <rintf+0xa0>
 8010c72:	b32b      	cbz	r3, 8010cc0 <rintf+0x60>
 8010c74:	2c00      	cmp	r4, #0
 8010c76:	ee10 2a10 	vmov	r2, s0
 8010c7a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8010c7e:	da21      	bge.n	8010cc4 <rintf+0x64>
 8010c80:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8010c84:	425b      	negs	r3, r3
 8010c86:	4a21      	ldr	r2, [pc, #132]	; (8010d0c <rintf+0xac>)
 8010c88:	0a5b      	lsrs	r3, r3, #9
 8010c8a:	0d09      	lsrs	r1, r1, #20
 8010c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c90:	0509      	lsls	r1, r1, #20
 8010c92:	430b      	orrs	r3, r1
 8010c94:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8010c98:	ee07 3a90 	vmov	s15, r3
 8010c9c:	edd2 6a00 	vldr	s13, [r2]
 8010ca0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8010ca4:	ed8d 7a01 	vstr	s14, [sp, #4]
 8010ca8:	eddd 7a01 	vldr	s15, [sp, #4]
 8010cac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010cb0:	ee17 3a90 	vmov	r3, s15
 8010cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010cb8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8010cbc:	ee00 3a10 	vmov	s0, r3
 8010cc0:	b002      	add	sp, #8
 8010cc2:	bd10      	pop	{r4, pc}
 8010cc4:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <rintf+0xb0>)
 8010cc6:	4123      	asrs	r3, r4
 8010cc8:	4219      	tst	r1, r3
 8010cca:	d0f9      	beq.n	8010cc0 <rintf+0x60>
 8010ccc:	085b      	lsrs	r3, r3, #1
 8010cce:	4219      	tst	r1, r3
 8010cd0:	d006      	beq.n	8010ce0 <rintf+0x80>
 8010cd2:	ea21 0203 	bic.w	r2, r1, r3
 8010cd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010cda:	fa43 f404 	asr.w	r4, r3, r4
 8010cde:	4322      	orrs	r2, r4
 8010ce0:	4b0a      	ldr	r3, [pc, #40]	; (8010d0c <rintf+0xac>)
 8010ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010ce6:	ed90 7a00 	vldr	s14, [r0]
 8010cea:	ee07 2a90 	vmov	s15, r2
 8010cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf2:	edcd 7a01 	vstr	s15, [sp, #4]
 8010cf6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010cfa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010cfe:	e7df      	b.n	8010cc0 <rintf+0x60>
 8010d00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010d04:	d3dc      	bcc.n	8010cc0 <rintf+0x60>
 8010d06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d0a:	e7d9      	b.n	8010cc0 <rintf+0x60>
 8010d0c:	0801132c 	.word	0x0801132c
 8010d10:	007fffff 	.word	0x007fffff

08010d14 <scalbnf>:
 8010d14:	b508      	push	{r3, lr}
 8010d16:	ee10 2a10 	vmov	r2, s0
 8010d1a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8010d1e:	ed2d 8b02 	vpush	{d8}
 8010d22:	eef0 0a40 	vmov.f32	s1, s0
 8010d26:	d004      	beq.n	8010d32 <scalbnf+0x1e>
 8010d28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010d2c:	d306      	bcc.n	8010d3c <scalbnf+0x28>
 8010d2e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8010d32:	ecbd 8b02 	vpop	{d8}
 8010d36:	eeb0 0a60 	vmov.f32	s0, s1
 8010d3a:	bd08      	pop	{r3, pc}
 8010d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010d40:	d21c      	bcs.n	8010d7c <scalbnf+0x68>
 8010d42:	4b1f      	ldr	r3, [pc, #124]	; (8010dc0 <scalbnf+0xac>)
 8010d44:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010dc4 <scalbnf+0xb0>
 8010d48:	4298      	cmp	r0, r3
 8010d4a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8010d4e:	db10      	blt.n	8010d72 <scalbnf+0x5e>
 8010d50:	ee10 2a90 	vmov	r2, s1
 8010d54:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8010d58:	3b19      	subs	r3, #25
 8010d5a:	4403      	add	r3, r0
 8010d5c:	2bfe      	cmp	r3, #254	; 0xfe
 8010d5e:	dd0f      	ble.n	8010d80 <scalbnf+0x6c>
 8010d60:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8010dc8 <scalbnf+0xb4>
 8010d64:	eeb0 0a48 	vmov.f32	s0, s16
 8010d68:	f000 f834 	bl	8010dd4 <copysignf>
 8010d6c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8010d70:	e7df      	b.n	8010d32 <scalbnf+0x1e>
 8010d72:	eddf 7a16 	vldr	s15, [pc, #88]	; 8010dcc <scalbnf+0xb8>
 8010d76:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010d7a:	e7da      	b.n	8010d32 <scalbnf+0x1e>
 8010d7c:	0ddb      	lsrs	r3, r3, #23
 8010d7e:	e7ec      	b.n	8010d5a <scalbnf+0x46>
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	dd06      	ble.n	8010d92 <scalbnf+0x7e>
 8010d84:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8010d88:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010d8c:	ee00 3a90 	vmov	s1, r3
 8010d90:	e7cf      	b.n	8010d32 <scalbnf+0x1e>
 8010d92:	f113 0f16 	cmn.w	r3, #22
 8010d96:	da06      	bge.n	8010da6 <scalbnf+0x92>
 8010d98:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010d9c:	4298      	cmp	r0, r3
 8010d9e:	dcdf      	bgt.n	8010d60 <scalbnf+0x4c>
 8010da0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8010dcc <scalbnf+0xb8>
 8010da4:	e7de      	b.n	8010d64 <scalbnf+0x50>
 8010da6:	3319      	adds	r3, #25
 8010da8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8010dac:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8010db0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010dd0 <scalbnf+0xbc>
 8010db4:	ee07 3a10 	vmov	s14, r3
 8010db8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8010dbc:	e7b9      	b.n	8010d32 <scalbnf+0x1e>
 8010dbe:	bf00      	nop
 8010dc0:	ffff3cb0 	.word	0xffff3cb0
 8010dc4:	4c000000 	.word	0x4c000000
 8010dc8:	7149f2ca 	.word	0x7149f2ca
 8010dcc:	0da24260 	.word	0x0da24260
 8010dd0:	33000000 	.word	0x33000000

08010dd4 <copysignf>:
 8010dd4:	ee10 3a10 	vmov	r3, s0
 8010dd8:	ee10 2a90 	vmov	r2, s1
 8010ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010de0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010de4:	4313      	orrs	r3, r2
 8010de6:	ee00 3a10 	vmov	s0, r3
 8010dea:	4770      	bx	lr

08010dec <_init>:
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	bf00      	nop
 8010df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010df2:	bc08      	pop	{r3}
 8010df4:	469e      	mov	lr, r3
 8010df6:	4770      	bx	lr

08010df8 <_fini>:
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	bf00      	nop
 8010dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dfe:	bc08      	pop	{r3}
 8010e00:	469e      	mov	lr, r3
 8010e02:	4770      	bx	lr
