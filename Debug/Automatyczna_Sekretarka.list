
Automatyczna_Sekretarka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb38  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800ccd0  0800ccd0  0001ccd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cddc  0800cddc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800cddc  0800cddc  0001cddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde4  0800cde4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800cdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f04  20000090  0800ce7c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20001f94  0800ce7c  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026e59  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004da8  00000000  00000000  00046f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  0004bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0004d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001beaa  00000000  00000000  0004e288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017f80  00000000  00000000  0006a132  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e31b  00000000  00000000  000820b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001103cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005194  00000000  00000000  00110448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ccb8 	.word	0x0800ccb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800ccb8 	.word	0x0800ccb8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <CS43l22_write>:

static I2C_HandleTypeDef i2cx;

//zapis wartości do rejestru
static void CS43l22_write(uint8_t reg, uint8_t value)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af04      	add	r7, sp, #16
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&i2cx, DAC_I2C_ADDR, reg, 1, &value, sizeof(value), HAL_MAX_DELAY);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	9302      	str	r3, [sp, #8]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	1dbb      	adds	r3, r7, #6
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2301      	movs	r3, #1
 80004fc:	2194      	movs	r1, #148	; 0x94
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <CS43l22_write+0x34>)
 8000500:	f003 fb68 	bl	8003bd4 <HAL_I2C_Mem_Write>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000ac 	.word	0x200000ac

08000510 <CS43L22_Init>:

//Inicjalizacja
void CS43L22_Init(I2C_HandleTypeDef i2c_handle) {
 8000510:	b084      	sub	sp, #16
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0
 8000516:	f107 0c08 	add.w	ip, r7, #8
 800051a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Pin Audio_Reset
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2110      	movs	r1, #16
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <CS43L22_Init+0x4c>)
 8000524:	f001 fd14 	bl	8001f50 <HAL_GPIO_WritePin>
	//Przekazanie uchwytu i2c
	i2cx = i2c_handle;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <CS43L22_Init+0x50>)
 800052a:	4618      	mov	r0, r3
 800052c:	f107 0108 	add.w	r1, r7, #8
 8000530:	2354      	movs	r3, #84	; 0x54
 8000532:	461a      	mov	r2, r3
 8000534:	f00c faf2 	bl	800cb1c <memcpy>
	//Power down
	CS43l22_write(POWER_CONTROL1, 0x01);
 8000538:	2101      	movs	r1, #1
 800053a:	2002      	movs	r0, #2
 800053c:	f7ff ffcc 	bl	80004d8 <CS43l22_write>
	//obie słuchawki włączone, oba głośniki wyłączone
	CS43l22_write(POWER_CONTROL2, 0xAF);
 8000540:	21af      	movs	r1, #175	; 0xaf
 8000542:	2004      	movs	r0, #4
 8000544:	f7ff ffc8 	bl	80004d8 <CS43l22_write>
	//slave, I2s oraz 16bit
	CS43l22_write(INTERFACE_CONTROL1,0x07);
 8000548:	2107      	movs	r1, #7
 800054a:	2006      	movs	r0, #6
 800054c:	f7ff ffc4 	bl	80004d8 <CS43l22_write>
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000558:	b004      	add	sp, #16
 800055a:	4770      	bx	lr
 800055c:	40020c00 	.word	0x40020c00
 8000560:	200000ac 	.word	0x200000ac

08000564 <CS43L22_SetVolume>:

// Ustawienia głośności 0-255
void CS43L22_SetVolume(uint8_t volume) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	volume = VOLUME_MASTER(volume);
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	3319      	adds	r3, #25
 8000572:	71fb      	strb	r3, [r7, #7]
	CS43l22_write(CS43L22_REG_MASTER_A_VOL, volume);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4619      	mov	r1, r3
 8000578:	2020      	movs	r0, #32
 800057a:	f7ff ffad 	bl	80004d8 <CS43l22_write>
	CS43l22_write(CS43L22_REG_MASTER_B_VOL, volume);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4619      	mov	r1, r3
 8000582:	2021      	movs	r0, #33	; 0x21
 8000584:	f7ff ffa8 	bl	80004d8 <CS43l22_write>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <CS43L22_SetMute>:

//wyciszanie/odciszanie dźwięku
void CS43L22_SetMute(bool mute) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	//mutowanie
	if (mute) {
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00c      	beq.n	80005ba <CS43L22_SetMute+0x2a>
		//wyłączone głośniki i słuchawki
		CS43l22_write(POWER_CONTROL2,0xFF);
 80005a0:	21ff      	movs	r1, #255	; 0xff
 80005a2:	2004      	movs	r0, #4
 80005a4:	f7ff ff98 	bl	80004d8 <CS43l22_write>
		//wyciszanie obu słuchawek
		CS43l22_write(CS43L22_REG_HEADPHONE_A_VOL,0x01);
 80005a8:	2101      	movs	r1, #1
 80005aa:	2022      	movs	r0, #34	; 0x22
 80005ac:	f7ff ff94 	bl	80004d8 <CS43l22_write>
		CS43l22_write(CS43L22_REG_HEADPHONE_B_VOL,0x01);
 80005b0:	2101      	movs	r1, #1
 80005b2:	2023      	movs	r0, #35	; 0x23
 80005b4:	f7ff ff90 	bl	80004d8 <CS43l22_write>
		CS43l22_write(CS43L22_REG_HEADPHONE_B_VOL,0x00);
		//obie słuchawki włączone, głośniki wyłączone
		CS43l22_write(POWER_CONTROL2,0xAF);

	}
}
 80005b8:	e00b      	b.n	80005d2 <CS43L22_SetMute+0x42>
		CS43l22_write(CS43L22_REG_HEADPHONE_A_VOL,0x00);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2022      	movs	r0, #34	; 0x22
 80005be:	f7ff ff8b 	bl	80004d8 <CS43l22_write>
		CS43l22_write(CS43L22_REG_HEADPHONE_B_VOL,0x00);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2023      	movs	r0, #35	; 0x23
 80005c6:	f7ff ff87 	bl	80004d8 <CS43l22_write>
		CS43l22_write(POWER_CONTROL2,0xAF);
 80005ca:	21af      	movs	r1, #175	; 0xaf
 80005cc:	2004      	movs	r0, #4
 80005ce:	f7ff ff83 	bl	80004d8 <CS43l22_write>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <CS43L22_Start>:

//Start układu DAC
void CS43L22_Start(void) {
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
	//odmutowanie
	CS43L22_SetMute(0);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ffd6 	bl	8000590 <CS43L22_SetMute>
	//Power up
	CS43l22_write(POWER_CONTROL1,0x9E);
 80005e4:	219e      	movs	r1, #158	; 0x9e
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff ff76 	bl	80004d8 <CS43l22_write>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <CS43L22_Stop>:

//zatrzymanie układu
void CS43L22_Stop(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	//wyciszenie
	CS43L22_SetMute(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff ffcb 	bl	8000590 <CS43L22_SetMute>
	//filtr deemfazy nakłada - pozbywa się szumu po zatrzymaniu
	CS43l22_write(MISCELLANEOUS_CONTRLS,0x04);
 80005fa:	2104      	movs	r1, #4
 80005fc:	200e      	movs	r0, #14
 80005fe:	f7ff ff6b 	bl	80004d8 <CS43l22_write>
	//Power down
	CS43l22_write(POWER_CONTROL1,0x9F);
 8000602:	219f      	movs	r1, #159	; 0x9f
 8000604:	2002      	movs	r0, #2
 8000606:	f7ff ff67 	bl	80004d8 <CS43l22_write>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b095      	sub	sp, #84	; 0x54
 8000614:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fd7d 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f8c3 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f9c1 	bl	80009a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000622:	f000 f99f 	bl	8000964 <MX_DMA_Init>
  MX_I2C1_Init();
 8000626:	f000 f941 	bl	80008ac <MX_I2C1_Init>
  MX_I2S3_Init();
 800062a:	f000 f96d 	bl	8000908 <MX_I2S3_Init>
  MX_FATFS_Init();
 800062e:	f006 fb6f 	bl	8006d10 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000632:	f00b fefd 	bl	800c430 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	CS43L22_Init(hi2c1);
 8000636:	4c52      	ldr	r4, [pc, #328]	; (8000780 <main+0x170>)
 8000638:	4668      	mov	r0, sp
 800063a:	f104 0310 	add.w	r3, r4, #16
 800063e:	2244      	movs	r2, #68	; 0x44
 8000640:	4619      	mov	r1, r3
 8000642:	f00c fa6b 	bl	800cb1c <memcpy>
 8000646:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800064a:	f7ff ff61 	bl	8000510 <CS43L22_Init>
	CS43L22_SetVolume(180); //0-255
 800064e:	20b4      	movs	r0, #180	; 0xb4
 8000650:	f7ff ff88 	bl	8000564 <CS43L22_SetVolume>

	audioI2S_setHandle(&hi2s3);
 8000654:	484b      	ldr	r0, [pc, #300]	; (8000784 <main+0x174>)
 8000656:	f000 fbe3 	bl	8000e20 <audioI2S_setHandle>

	bool isSdCardMounted = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71fb      	strb	r3, [r7, #7]
	bool pauseResumeToggle = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000662:	f00b ff0b 	bl	800c47c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (Appli_state == APPLICATION_START) {
 8000666:	4b48      	ldr	r3, [pc, #288]	; (8000788 <main+0x178>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d106      	bne.n	800067c <main+0x6c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000674:	4845      	ldr	r0, [pc, #276]	; (800078c <main+0x17c>)
 8000676:	f001 fc6b 	bl	8001f50 <HAL_GPIO_WritePin>
 800067a:	e010      	b.n	800069e <main+0x8e>
		} else if (Appli_state == APPLICATION_DISCONNECT) {
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <main+0x178>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d10c      	bne.n	800069e <main+0x8e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068a:	4840      	ldr	r0, [pc, #256]	; (800078c <main+0x17c>)
 800068c:	f001 fc60 	bl	8001f50 <HAL_GPIO_WritePin>
			f_mount(NULL, (TCHAR const*) "", 0);
 8000690:	2200      	movs	r2, #0
 8000692:	493f      	ldr	r1, [pc, #252]	; (8000790 <main+0x180>)
 8000694:	2000      	movs	r0, #0
 8000696:	f00b f87b 	bl	800b790 <f_mount>
			isSdCardMounted = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	71fb      	strb	r3, [r7, #7]
		}

		if (Appli_state == APPLICATION_READY) {
 800069e:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <main+0x178>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1dd      	bne.n	8000662 <main+0x52>
			if (!isSdCardMounted) {
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f083 0301 	eor.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <main+0xb0>
				f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	4937      	ldr	r1, [pc, #220]	; (8000794 <main+0x184>)
 80006b6:	4838      	ldr	r0, [pc, #224]	; (8000798 <main+0x188>)
 80006b8:	f00b f86a 	bl	800b790 <f_mount>
				isSdCardMounted = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	71fb      	strb	r3, [r7, #7]
			}
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80006c0:	2101      	movs	r1, #1
 80006c2:	4836      	ldr	r0, [pc, #216]	; (800079c <main+0x18c>)
 80006c4:	f001 fc2c 	bl	8001f20 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0c9      	beq.n	8000662 <main+0x52>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	482d      	ldr	r0, [pc, #180]	; (800078c <main+0x17c>)
 80006d6:	f001 fc3b 	bl	8001f50 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 80006da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006de:	f000 fd8b 	bl	80011f8 <HAL_Delay>
				wavPlayer_fileSelect(WAV_FILE1);
 80006e2:	482f      	ldr	r0, [pc, #188]	; (80007a0 <main+0x190>)
 80006e4:	f000 fbea 	bl	8000ebc <wavPlayer_fileSelect>
				wavPlayer_play();
 80006e8:	f000 fc0c 	bl	8000f04 <wavPlayer_play>

				while (!wavPlayer_isFinished()) {
 80006ec:	e035      	b.n	800075a <main+0x14a>
					wavPlayer_process();
 80006ee:	f000 fc3b 	bl	8000f68 <wavPlayer_process>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80006f2:	2101      	movs	r1, #1
 80006f4:	4829      	ldr	r0, [pc, #164]	; (800079c <main+0x18c>)
 80006f6:	f001 fc13 	bl	8001f20 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d02c      	beq.n	800075a <main+0x14a>
						pauseResumeToggle ^= 1;
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	71bb      	strb	r3, [r7, #6]
						if (pauseResumeToggle) {
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00b      	beq.n	8000730 <main+0x120>
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <main+0x17c>)
 8000720:	f001 fc16 	bl	8001f50 <HAL_GPIO_WritePin>
							wavPlayer_pause();
 8000724:	f000 fca4 	bl	8001070 <wavPlayer_pause>
							HAL_Delay(200);
 8000728:	20c8      	movs	r0, #200	; 0xc8
 800072a:	f000 fd65 	bl	80011f8 <HAL_Delay>
 800072e:	e014      	b.n	800075a <main+0x14a>
						} else {
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4815      	ldr	r0, [pc, #84]	; (800078c <main+0x17c>)
 8000738:	f001 fc0a 	bl	8001f50 <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
							HAL_Delay(1000);
 800073c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000740:	f000 fd5a 	bl	80011f8 <HAL_Delay>
							if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000744:	2101      	movs	r1, #1
 8000746:	4815      	ldr	r0, [pc, #84]	; (800079c <main+0x18c>)
 8000748:	f001 fbea 	bl	8001f20 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <main+0x146>
								wavPlayer_stop();
 8000752:	f000 fc7b 	bl	800104c <wavPlayer_stop>
							}
							{
								wavPlayer_resume();
 8000756:	f000 fc99 	bl	800108c <wavPlayer_resume>
				while (!wavPlayer_isFinished()) {
 800075a:	f000 fca5 	bl	80010a8 <wavPlayer_isFinished>
 800075e:	4603      	mov	r3, r0
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1c1      	bne.n	80006ee <main+0xde>
							}
						}
					}
				}
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <main+0x17c>)
 8000772:	f001 fbed 	bl	8001f50 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f000 fd3d 	bl	80011f8 <HAL_Delay>
    MX_USB_HOST_Process();
 800077e:	e770      	b.n	8000662 <main+0x52>
 8000780:	2000138c 	.word	0x2000138c
 8000784:	20001440 	.word	0x20001440
 8000788:	20001380 	.word	0x20001380
 800078c:	40020c00 	.word	0x40020c00
 8000790:	0800ccd0 	.word	0x0800ccd0
 8000794:	2000148c 	.word	0x2000148c
 8000798:	200016c0 	.word	0x200016c0
 800079c:	40020000 	.word	0x40020000
 80007a0:	0800ccd4 	.word	0x0800ccd4

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09a      	sub	sp, #104	; 0x68
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f00c f9bd 	bl	800cb32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemClock_Config+0x100>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <SystemClock_Config+0x100>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0x100>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <SystemClock_Config+0x104>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <SystemClock_Config+0x104>)
 8000800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <SystemClock_Config+0x104>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000812:	2301      	movs	r3, #1
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000820:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 168;
 800082a:	23a8      	movs	r3, #168	; 0xa8
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800082e:	2304      	movs	r3, #4
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000832:	2307      	movs	r3, #7
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083a:	4618      	mov	r0, r3
 800083c:	f004 fd7e 	bl	800533c <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000846:	f000 f93f 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	2102      	movs	r1, #2
 8000866:	4618      	mov	r0, r3
 8000868:	f004 ffd8 	bl	800581c <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000872:	f000 f929 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000876:	2301      	movs	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 800087a:	f240 130f 	movw	r3, #271	; 0x10f
 800087e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000880:	2308      	movs	r3, #8
 8000882:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8000884:	2306      	movs	r3, #6
 8000886:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4618      	mov	r0, r3
 800088e:	f005 f9a3 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000898:	f000 f916 	bl	8000ac8 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3768      	adds	r7, #104	; 0x68
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40007000 	.word	0x40007000

080008ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f003 f83b 	bl	8003964 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 f8e8 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000138c 	.word	0x2000138c
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_I2S3_Init+0x54>)
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <MX_I2S3_Init+0x58>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2S3_Init+0x54>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_I2S3_Init+0x54>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_I2S3_Init+0x54>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_I2S3_Init+0x54>)
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_I2S3_Init+0x54>)
 8000930:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000934:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2S3_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2S3_Init+0x54>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2S3_Init+0x54>)
 800094a:	f003 fc5b 	bl	8004204 <HAL_I2S_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000954:	f000 f8b8 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20001440 	.word	0x20001440
 8000960:	40003c00 	.word	0x40003c00

08000964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_DMA_Init+0x3c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <MX_DMA_Init+0x3c>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_DMA_Init+0x3c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2010      	movs	r0, #16
 800098c:	f000 fd31 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000990:	2010      	movs	r0, #16
 8000992:	f000 fd4a 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a3d      	ldr	r2, [pc, #244]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a36      	ldr	r2, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <MX_GPIO_Init+0x114>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x114>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2101      	movs	r1, #1
 8000a4a:	481c      	ldr	r0, [pc, #112]	; (8000abc <MX_GPIO_Init+0x118>)
 8000a4c:	f001 fa80 	bl	8001f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000a50:	2200      	movs	r2, #0
 8000a52:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0x11c>)
 8000a58:	f001 fa7a 	bl	8001f50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_GPIO_Init+0x118>)
 8000a74:	f001 f8d2 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <MX_GPIO_Init+0x120>)
 8000a8c:	f001 f8c6 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000a90:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a94:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0x11c>)
 8000aaa:	f001 f8b7 	bl	8001c1c <HAL_GPIO_Init>

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12c      	bne.n	8000ba4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b84:	f001 f84a 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a45      	ldr	r2, [pc, #276]	; (8000cec <HAL_I2S_MspInit+0x134>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f040 8084 	bne.w	8000ce4 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	4b43      	ldr	r3, [pc, #268]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a3b      	ldr	r2, [pc, #236]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a34      	ldr	r2, [pc, #208]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <HAL_I2S_MspInit+0x138>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c30:	2310      	movs	r3, #16
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c40:	2306      	movs	r3, #6
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482a      	ldr	r0, [pc, #168]	; (8000cf4 <HAL_I2S_MspInit+0x13c>)
 8000c4c:	f000 ffe6 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000c50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c62:	2306      	movs	r3, #6
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4822      	ldr	r0, [pc, #136]	; (8000cf8 <HAL_I2S_MspInit+0x140>)
 8000c6e:	f000 ffd5 	bl	8001c1c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c74:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <HAL_I2S_MspInit+0x148>)
 8000c76:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c80:	2240      	movs	r2, #64	; 0x40
 8000c82:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cb8:	2203      	movs	r2, #3
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cca:	f000 fbc9 	bl	8001460 <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8000cd4:	f7ff fef8 	bl	8000ac8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_I2S_MspInit+0x144>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40003c00 	.word	0x40003c00
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	200013e0 	.word	0x200013e0
 8000d00:	40026088 	.word	0x40026088

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 fa2e 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <DMA1_Stream5_IRQHandler+0x10>)
 8000d66:	f000 fcf1 	bl	800174c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200013e0 	.word	0x200013e0

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f001 fb91 	bl	80024a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20001ccc 	.word	0x20001ccc

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f00b fe76 	bl	800caa8 <__errno>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00002000 	.word	0x00002000
 8000dec:	20000100 	.word	0x20000100
 8000df0:	20001f98 	.word	0x20001f98

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SystemInit+0x28>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <SystemInit+0x28>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SystemInit+0x28>)
 8000e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <audioI2S_setHandle>:
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static I2S_HandleTypeDef *hAudioI2S;

//ustawienie uchwytu i2s
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	hAudioI2S = pI2Shandle;
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <audioI2S_setHandle+0x1c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20001344 	.word	0x20001344

08000e40 <HAL_I2S_TxCpltCallback>:

//przerwanie po zakończeniu transmisji
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI3) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_I2S_TxCpltCallback+0x24>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d102      	bne.n	8000e58 <HAL_I2S_TxCpltCallback+0x18>
		playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000e52:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_I2S_TxCpltCallback+0x28>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	701a      	strb	r2, [r3, #0]
	}
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40003c00 	.word	0x40003c00
 8000e68:	20001341 	.word	0x20001341

08000e6c <HAL_I2S_TxHalfCpltCallback>:

//przerwanie w połowie transmisji bufora
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI3) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d102      	bne.n	8000e84 <HAL_I2S_TxHalfCpltCallback+0x18>
		playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
	}
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40003c00 	.word	0x40003c00
 8000e94:	20001341 	.word	0x20001341

08000e98 <wavPlayer_reset>:

//reset
static void wavPlayer_reset(void) {
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	audioRemainSize = 0;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <wavPlayer_reset+0x1c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	playerReadBytes = 0;
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <wavPlayer_reset+0x20>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20001338 	.word	0x20001338
 8000eb8:	2000133c 	.word	0x2000133c

08000ebc <wavPlayer_fileSelect>:

//wybranie pliku do odtworzenia
bool wavPlayer_fileSelect(const char *filePath) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	WAV_HeaderTypeDef wavHeader;
	UINT readBytes = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
	if (f_open(&wavFile, filePath, FA_READ) != FR_OK) {
 8000ec8:	2201      	movs	r2, #1
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <wavPlayer_fileSelect+0x40>)
 8000ece:	f00a fca5 	bl	800b81c <f_open>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <wavPlayer_fileSelect+0x20>
		return false;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e00b      	b.n	8000ef4 <wavPlayer_fileSelect+0x38>
	}
	f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	222c      	movs	r2, #44	; 0x2c
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <wavPlayer_fileSelect+0x40>)
 8000ee8:	f00a fe56 	bl	800bb98 <f_read>
	fileLength = wavHeader.FileSize;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <wavPlayer_fileSelect+0x44>)
 8000ef0:	6013      	str	r3, [r2, #0]
	return true;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3738      	adds	r7, #56	; 0x38
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000104 	.word	0x20000104
 8000f00:	20000334 	.word	0x20000334

08000f04 <wavPlayer_play>:

//start odtwarzania
void wavPlayer_play(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	isFinished = false;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <wavPlayer_play+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	f_lseek(&wavFile, 0);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	480f      	ldr	r0, [pc, #60]	; (8000f50 <wavPlayer_play+0x4c>)
 8000f12:	f00b f828 	bl	800bf66 <f_lseek>
	f_read(&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <wavPlayer_play+0x50>)
 8000f18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <wavPlayer_play+0x54>)
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <wavPlayer_play+0x4c>)
 8000f20:	f00a fe3a 	bl	800bb98 <f_read>
	audioRemainSize = fileLength - playerReadBytes;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <wavPlayer_play+0x58>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <wavPlayer_play+0x50>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <wavPlayer_play+0x5c>)
 8000f30:	6013      	str	r3, [r2, #0]
	CS43L22_Start();
 8000f32:	f7ff fb52 	bl	80005da <CS43L22_Start>
	HAL_I2S_Transmit_DMA(hAudioI2S,(uint16_t*) &audioBuffer[0], DMA_MAX( AUDIO_BUFFER_SIZE/AUDIODATA_SIZE));
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <wavPlayer_play+0x60>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f3e:	4906      	ldr	r1, [pc, #24]	; (8000f58 <wavPlayer_play+0x54>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fa9f 	bl	8004484 <HAL_I2S_Transmit_DMA>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20001340 	.word	0x20001340
 8000f50:	20000104 	.word	0x20000104
 8000f54:	2000133c 	.word	0x2000133c
 8000f58:	20000338 	.word	0x20000338
 8000f5c:	20000334 	.word	0x20000334
 8000f60:	20001338 	.word	0x20001338
 8000f64:	20001344 	.word	0x20001344

08000f68 <wavPlayer_process>:

//odczyt danych
void wavPlayer_process(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	switch (playerControlSM) {
 8000f6c:	4b30      	ldr	r3, [pc, #192]	; (8001030 <wavPlayer_process+0xc8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d859      	bhi.n	800102a <wavPlayer_process+0xc2>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <wavPlayer_process+0x14>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08001029 	.word	0x08001029
 8000f80:	08000f8d 	.word	0x08000f8d
 8000f84:	08000fcf 	.word	0x08000fcf
 8000f88:	08001011 	.word	0x08001011
	case PLAYER_CONTROL_Idle:
		break;

	case PLAYER_CONTROL_HalfBuffer:
		playerReadBytes = 0;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <wavPlayer_process+0xcc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
		playerControlSM = PLAYER_CONTROL_Idle;
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <wavPlayer_process+0xc8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
		f_read(&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE / 2,
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <wavPlayer_process+0xcc>)
 8000f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f9e:	4926      	ldr	r1, [pc, #152]	; (8001038 <wavPlayer_process+0xd0>)
 8000fa0:	4826      	ldr	r0, [pc, #152]	; (800103c <wavPlayer_process+0xd4>)
 8000fa2:	f00a fdf9 	bl	800bb98 <f_read>
				&playerReadBytes);
		if (audioRemainSize > (AUDIO_BUFFER_SIZE / 2)) {
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <wavPlayer_process+0xd8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fae:	d907      	bls.n	8000fc0 <wavPlayer_process+0x58>
			audioRemainSize -= playerReadBytes;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <wavPlayer_process+0xd8>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <wavPlayer_process+0xcc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <wavPlayer_process+0xd8>)
 8000fbc:	6013      	str	r3, [r2, #0]
		} else {
			audioRemainSize = 0;
			playerControlSM = PLAYER_CONTROL_EndOfFile;
		}
		break;
 8000fbe:	e034      	b.n	800102a <wavPlayer_process+0xc2>
			audioRemainSize = 0;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <wavPlayer_process+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
			playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <wavPlayer_process+0xc8>)
 8000fc8:	2203      	movs	r2, #3
 8000fca:	701a      	strb	r2, [r3, #0]
		break;
 8000fcc:	e02d      	b.n	800102a <wavPlayer_process+0xc2>

	case PLAYER_CONTROL_FullBuffer:
		playerReadBytes = 0;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <wavPlayer_process+0xcc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
		playerControlSM = PLAYER_CONTROL_Idle;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <wavPlayer_process+0xc8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
		f_read(&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE / 2],
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <wavPlayer_process+0xcc>)
 8000fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe0:	4918      	ldr	r1, [pc, #96]	; (8001044 <wavPlayer_process+0xdc>)
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <wavPlayer_process+0xd4>)
 8000fe4:	f00a fdd8 	bl	800bb98 <f_read>
				AUDIO_BUFFER_SIZE / 2, &playerReadBytes);
		if (audioRemainSize > (AUDIO_BUFFER_SIZE / 2)) {
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <wavPlayer_process+0xd8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ff0:	d907      	bls.n	8001002 <wavPlayer_process+0x9a>
			audioRemainSize -= playerReadBytes;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <wavPlayer_process+0xd8>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <wavPlayer_process+0xcc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <wavPlayer_process+0xd8>)
 8000ffe:	6013      	str	r3, [r2, #0]
		} else {
			audioRemainSize = 0;
			playerControlSM = PLAYER_CONTROL_EndOfFile;
		}
		break;
 8001000:	e013      	b.n	800102a <wavPlayer_process+0xc2>
			audioRemainSize = 0;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <wavPlayer_process+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
			playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <wavPlayer_process+0xc8>)
 800100a:	2203      	movs	r2, #3
 800100c:	701a      	strb	r2, [r3, #0]
		break;
 800100e:	e00c      	b.n	800102a <wavPlayer_process+0xc2>

	case PLAYER_CONTROL_EndOfFile:
		f_close(&wavFile);
 8001010:	480a      	ldr	r0, [pc, #40]	; (800103c <wavPlayer_process+0xd4>)
 8001012:	f00a ff7e 	bl	800bf12 <f_close>
		wavPlayer_reset();
 8001016:	f7ff ff3f 	bl	8000e98 <wavPlayer_reset>
		isFinished = true;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <wavPlayer_process+0xe0>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
		playerControlSM = PLAYER_CONTROL_Idle;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <wavPlayer_process+0xc8>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		break;
 8001026:	e000      	b.n	800102a <wavPlayer_process+0xc2>
		break;
 8001028:	bf00      	nop
	}
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20001341 	.word	0x20001341
 8001034:	2000133c 	.word	0x2000133c
 8001038:	20000338 	.word	0x20000338
 800103c:	20000104 	.word	0x20000104
 8001040:	20001338 	.word	0x20001338
 8001044:	20000b38 	.word	0x20000b38
 8001048:	20001340 	.word	0x20001340

0800104c <wavPlayer_stop>:

//zatrzymanie odtwarzania
void wavPlayer_stop(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	CS43L22_Stop();
 8001050:	f7ff face 	bl	80005f0 <CS43L22_Stop>
	HAL_I2S_DMAStop(hAudioI2S);
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <wavPlayer_stop+0x1c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f003 fbb1 	bl	80047c0 <HAL_I2S_DMAStop>
	isFinished = true;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <wavPlayer_stop+0x20>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20001344 	.word	0x20001344
 800106c:	20001340 	.word	0x20001340

08001070 <wavPlayer_pause>:

//pauza
void wavPlayer_pause(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	CS43L22_Stop();
 8001074:	f7ff fabc 	bl	80005f0 <CS43L22_Stop>
	HAL_I2S_DMAPause(hAudioI2S);
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <wavPlayer_pause+0x18>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 faa9 	bl	80045d4 <HAL_I2S_DMAPause>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20001344 	.word	0x20001344

0800108c <wavPlayer_resume>:

//wznowienie odtwarzania
void wavPlayer_resume(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	CS43L22_Start();
 8001090:	f7ff faa3 	bl	80005da <CS43L22_Start>
	HAL_I2S_DMAResume(hAudioI2S);
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <wavPlayer_resume+0x18>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fafd 	bl	8004698 <HAL_I2S_DMAResume>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20001344 	.word	0x20001344

080010a8 <wavPlayer_isFinished>:

//czy zakończono odczyt pliku
bool wavPlayer_isFinished(void) {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	return isFinished;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <wavPlayer_isFinished+0x14>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20001340 	.word	0x20001340

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
  ldr  r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e0:	f842 3b04 	str.w	r3, [r2], #4

080010e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ea:	f7ff fe83 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f00b fce1 	bl	800cab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fa8d 	bl	8000610 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010fc:	0800cdec 	.word	0x0800cdec
  ldr  r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001104:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001108:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800110c:	20001f94 	.word	0x20001f94

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f94d 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fcc6 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f965 	bl	8001446 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f92d 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20001488 	.word	0x20001488

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20001488 	.word	0x20001488

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_Delay+0x40>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffde 	bl	80011e0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
  {
  }
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000008 	.word	0x20000008

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff3e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff31 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff feb8 	bl	80011e0 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e099      	b.n	80015b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149c:	e00f      	b.n	80014be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149e:	f7ff fe9f 	bl	80011e0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d908      	bls.n	80014be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2220      	movs	r2, #32
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e078      	b.n	80015b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e8      	bne.n	800149e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <HAL_DMA_Init+0x158>)
 80014d8:	4013      	ands	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	2b04      	cmp	r3, #4
 8001516:	d107      	bne.n	8001528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4313      	orrs	r3, r2
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4313      	orrs	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f023 0307 	bic.w	r3, r3, #7
 800153e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4313      	orrs	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2b04      	cmp	r3, #4
 8001550:	d117      	bne.n	8001582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00e      	beq.n	8001582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fadf 	bl	8001b28 <DMA_CheckFifoParam>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800157e:	2301      	movs	r3, #1
 8001580:	e016      	b.n	80015b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fa96 	bl	8001abc <DMA_CalcBaseAndBitshift>
 8001590:	4603      	mov	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001598:	223f      	movs	r2, #63	; 0x3f
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	f010803f 	.word	0xf010803f

080015bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_DMA_Start_IT+0x26>
 80015de:	2302      	movs	r3, #2
 80015e0:	e040      	b.n	8001664 <HAL_DMA_Start_IT+0xa8>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d12f      	bne.n	8001656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2202      	movs	r2, #2
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fa28 	bl	8001a60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	223f      	movs	r2, #63	; 0x3f
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0216 	orr.w	r2, r2, #22
 800162a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0208 	orr.w	r2, r2, #8
 8001642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e005      	b.n	8001662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800165e:	2302      	movs	r3, #2
 8001660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800167a:	f7ff fdb1 	bl	80011e0 <HAL_GetTick>
 800167e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d008      	beq.n	800169e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e052      	b.n	8001744 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0216 	bic.w	r2, r2, #22
 80016ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_DMA_Abort+0x62>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0208 	bic.w	r2, r2, #8
 80016dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ee:	e013      	b.n	8001718 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f0:	f7ff fd76 	bl	80011e0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d90c      	bls.n	8001718 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e015      	b.n	8001744 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e4      	bne.n	80016f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	223f      	movs	r2, #63	; 0x3f
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001758:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <HAL_DMA_IRQHandler+0x258>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a92      	ldr	r2, [pc, #584]	; (80019a8 <HAL_DMA_IRQHandler+0x25c>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001776:	2208      	movs	r2, #8
 8001778:	409a      	lsls	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2208      	movs	r2, #8
 80017a6:	409a      	lsls	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	2201      	movs	r2, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e6:	f043 0202 	orr.w	r2, r3, #2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2204      	movs	r2, #4
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	2204      	movs	r2, #4
 8001812:	409a      	lsls	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	f043 0204 	orr.w	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2210      	movs	r2, #16
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d043      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03c      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001846:	2210      	movs	r2, #16
 8001848:	409a      	lsls	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d018      	beq.n	800188e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d108      	bne.n	800187c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d024      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
 800187a:	e01f      	b.n	80018bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e016      	b.n	80018bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0208 	bic.w	r2, r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	2220      	movs	r2, #32
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 808e 	beq.w	80019ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8086 	beq.w	80019ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	2220      	movs	r2, #32
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d136      	bne.n	8001964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0216 	bic.w	r2, r2, #22
 8001904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <HAL_DMA_IRQHandler+0x1da>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0208 	bic.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	223f      	movs	r2, #63	; 0x3f
 800193c:	409a      	lsls	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001956:	2b00      	cmp	r3, #0
 8001958:	d07d      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
        }
        return;
 8001962:	e078      	b.n	8001a56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01c      	beq.n	80019ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d108      	bne.n	8001992 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	2b00      	cmp	r3, #0
 8001986:	d030      	beq.n	80019ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
 8001990:	e02b      	b.n	80019ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d027      	beq.n	80019ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
 80019a2:	e022      	b.n	80019ea <HAL_DMA_IRQHandler+0x29e>
 80019a4:	20000000 	.word	0x20000000
 80019a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0210 	bic.w	r2, r2, #16
 80019c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d032      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d022      	beq.n	8001a44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d307      	bcc.n	8001a32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f2      	bne.n	8001a16 <HAL_DMA_IRQHandler+0x2ca>
 8001a30:	e000      	b.n	8001a34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	4798      	blx	r3
 8001a54:	e000      	b.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a56:	bf00      	nop
    }
  }
}
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop

08001a60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b40      	cmp	r3, #64	; 0x40
 8001a8c:	d108      	bne.n	8001aa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a9e:	e007      	b.n	8001ab0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3b10      	subs	r3, #16
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <DMA_CalcBaseAndBitshift+0x64>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <DMA_CalcBaseAndBitshift+0x68>)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d909      	bls.n	8001afe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001af2:	f023 0303 	bic.w	r3, r3, #3
 8001af6:	1d1a      	adds	r2, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	659a      	str	r2, [r3, #88]	; 0x58
 8001afc:	e007      	b.n	8001b0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	aaaaaaab 	.word	0xaaaaaaab
 8001b24:	0800cd40 	.word	0x0800cd40

08001b28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d11f      	bne.n	8001b82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d855      	bhi.n	8001bf4 <DMA_CheckFifoParam+0xcc>
 8001b48:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <DMA_CheckFifoParam+0x28>)
 8001b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4e:	bf00      	nop
 8001b50:	08001b61 	.word	0x08001b61
 8001b54:	08001b73 	.word	0x08001b73
 8001b58:	08001b61 	.word	0x08001b61
 8001b5c:	08001bf5 	.word	0x08001bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d045      	beq.n	8001bf8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b70:	e042      	b.n	8001bf8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b7a:	d13f      	bne.n	8001bfc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b80:	e03c      	b.n	8001bfc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8a:	d121      	bne.n	8001bd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d836      	bhi.n	8001c00 <DMA_CheckFifoParam+0xd8>
 8001b92:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <DMA_CheckFifoParam+0x70>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001baf 	.word	0x08001baf
 8001ba0:	08001ba9 	.word	0x08001ba9
 8001ba4:	08001bc1 	.word	0x08001bc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bac:	e02f      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d024      	beq.n	8001c04 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bbe:	e021      	b.n	8001c04 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bc8:	d11e      	bne.n	8001c08 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bce:	e01b      	b.n	8001c08 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d902      	bls.n	8001bdc <DMA_CheckFifoParam+0xb4>
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d003      	beq.n	8001be2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bda:	e018      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
      break;
 8001be0:	e015      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00e      	beq.n	8001c0c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf2:	e00b      	b.n	8001c0c <DMA_CheckFifoParam+0xe4>
      break;
 8001bf4:	bf00      	nop
 8001bf6:	e00a      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;
 8001bf8:	bf00      	nop
 8001bfa:	e008      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;
 8001bfc:	bf00      	nop
 8001bfe:	e006      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;
 8001c00:	bf00      	nop
 8001c02:	e004      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;
 8001c04:	bf00      	nop
 8001c06:	e002      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;   
 8001c08:	bf00      	nop
 8001c0a:	e000      	b.n	8001c0e <DMA_CheckFifoParam+0xe6>
      break;
 8001c0c:	bf00      	nop
    }
  } 
  
  return status; 
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e159      	b.n	8001eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	f040 8148 	bne.w	8001ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d00b      	beq.n	8001c76 <HAL_GPIO_Init+0x5a>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6a:	2b11      	cmp	r3, #17
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d130      	bne.n	8001cd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0xfc>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b12      	cmp	r3, #18
 8001d16:	d123      	bne.n	8001d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	08da      	lsrs	r2, r3, #3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3208      	adds	r2, #8
 8001d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	69b9      	ldr	r1, [r7, #24]
 8001d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0203 	and.w	r2, r3, #3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a2 	beq.w	8001ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_GPIO_Init+0x2e4>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a55      	ldr	r2, [pc, #340]	; (8001f00 <HAL_GPIO_Init+0x2e4>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_GPIO_Init+0x2e4>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dbe:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a48      	ldr	r2, [pc, #288]	; (8001f08 <HAL_GPIO_Init+0x2ec>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x202>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a47      	ldr	r2, [pc, #284]	; (8001f0c <HAL_GPIO_Init+0x2f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x1fe>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_GPIO_Init+0x2f4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x1fa>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <HAL_GPIO_Init+0x2f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x1f6>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a44      	ldr	r2, [pc, #272]	; (8001f18 <HAL_GPIO_Init+0x2fc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x1f2>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e008      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e0e:	2307      	movs	r3, #7
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e12:	2303      	movs	r3, #3
 8001e14:	e004      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e002      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_GPIO_Init+0x204>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	f002 0203 	and.w	r2, r2, #3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e30:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_GPIO_Init+0x2e8>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	3302      	adds	r3, #2
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e62:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_GPIO_Init+0x300>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	f67f aea2 	bls.w	8001c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3724      	adds	r7, #36	; 0x24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f60:	787b      	ldrb	r3, [r7, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	041a      	lsls	r2, r3, #16
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	619a      	str	r2, [r3, #24]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f84:	b08f      	sub	sp, #60	; 0x3c
 8001f86:	af0a      	add	r7, sp, #40	; 0x28
 8001f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e054      	b.n	800203e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f00a fa9c 	bl	800c4ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 ffc0 	bl	8005f58 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	687e      	ldr	r6, [r7, #4]
 8001fe0:	466d      	mov	r5, sp
 8001fe2:	f106 0410 	add.w	r4, r6, #16
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff6:	1d33      	adds	r3, r6, #4
 8001ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f003 ff3a 	bl	8005e74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	4618      	mov	r0, r3
 8002008:	f003 ffb7 	bl	8005f7a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	687e      	ldr	r6, [r7, #4]
 8002014:	466d      	mov	r5, sp
 8002016:	f106 0410 	add.w	r4, r6, #16
 800201a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800201c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002026:	e885 0003 	stmia.w	r5, {r0, r1}
 800202a:	1d33      	adds	r3, r6, #4
 800202c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202e:	6838      	ldr	r0, [r7, #0]
 8002030:	f004 f8ca 	bl	80061c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002046 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b089      	sub	sp, #36	; 0x24
 800204a:	af04      	add	r7, sp, #16
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	4608      	mov	r0, r1
 8002050:	4611      	mov	r1, r2
 8002052:	461a      	mov	r2, r3
 8002054:	4603      	mov	r3, r0
 8002056:	70fb      	strb	r3, [r7, #3]
 8002058:	460b      	mov	r3, r1
 800205a:	70bb      	strb	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_HCD_HC_Init+0x28>
 800206a:	2302      	movs	r3, #2
 800206c:	e07f      	b.n	800216e <HAL_HCD_HC_Init+0x128>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	333d      	adds	r3, #61	; 0x3d
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	3338      	adds	r3, #56	; 0x38
 800209a:	787a      	ldrb	r2, [r7, #1]
 800209c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	3340      	adds	r3, #64	; 0x40
 80020ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020b0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	3339      	adds	r3, #57	; 0x39
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	333f      	adds	r3, #63	; 0x3f
 80020d6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	78bb      	ldrb	r3, [r7, #2]
 80020e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020e4:	b2d8      	uxtb	r0, r3
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	333a      	adds	r3, #58	; 0x3a
 80020f4:	4602      	mov	r2, r0
 80020f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da0a      	bge.n	8002116 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	333b      	adds	r3, #59	; 0x3b
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e009      	b.n	800212a <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	333b      	adds	r3, #59	; 0x3b
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	333c      	adds	r3, #60	; 0x3c
 800213a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800213e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	787c      	ldrb	r4, [r7, #1]
 8002146:	78ba      	ldrb	r2, [r7, #2]
 8002148:	78f9      	ldrb	r1, [r7, #3]
 800214a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	4623      	mov	r3, r4
 800215c:	f004 f9b6 	bl	80064cc <USB_HC_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800216c:	7bfb      	ldrb	r3, [r7, #15]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}

08002176 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_HCD_HC_Halt+0x1e>
 8002190:	2302      	movs	r3, #2
 8002192:	e00f      	b.n	80021b4 <HAL_HCD_HC_Halt+0x3e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fbf2 	bl	800698e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	70fb      	strb	r3, [r7, #3]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70bb      	strb	r3, [r7, #2]
 80021d2:	4613      	mov	r3, r2
 80021d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	333b      	adds	r3, #59	; 0x3b
 80021e6:	78ba      	ldrb	r2, [r7, #2]
 80021e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	333f      	adds	r3, #63	; 0x3f
 80021fa:	787a      	ldrb	r2, [r7, #1]
 80021fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021fe:	7c3b      	ldrb	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d114      	bne.n	800222e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	3342      	adds	r3, #66	; 0x42
 8002214:	2203      	movs	r2, #3
 8002216:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	333d      	adds	r3, #61	; 0x3d
 8002228:	7f3a      	ldrb	r2, [r7, #28]
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e009      	b.n	8002242 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	3342      	adds	r3, #66	; 0x42
 800223e:	2202      	movs	r2, #2
 8002240:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002242:	787b      	ldrb	r3, [r7, #1]
 8002244:	2b03      	cmp	r3, #3
 8002246:	f200 80d6 	bhi.w	80023f6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800224a:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <HAL_HCD_HC_SubmitRequest+0x94>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002261 	.word	0x08002261
 8002254:	080023e1 	.word	0x080023e1
 8002258:	080022cd 	.word	0x080022cd
 800225c:	08002357 	.word	0x08002357
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002260:	7c3b      	ldrb	r3, [r7, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	f040 80c9 	bne.w	80023fa <HAL_HCD_HC_SubmitRequest+0x23e>
 8002268:	78bb      	ldrb	r3, [r7, #2]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f040 80c5 	bne.w	80023fa <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002270:	8b3b      	ldrh	r3, [r7, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	3351      	adds	r3, #81	; 0x51
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3351      	adds	r3, #81	; 0x51
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3342      	adds	r3, #66	; 0x42
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022b4:	e0a1      	b.n	80023fa <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3342      	adds	r3, #66	; 0x42
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
      break;
 80022ca:	e096      	b.n	80023fa <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d120      	bne.n	8002314 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3351      	adds	r3, #81	; 0x51
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3342      	adds	r3, #66	; 0x42
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022fc:	e07e      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	3342      	adds	r3, #66	; 0x42
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
      break;
 8002312:	e073      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	3350      	adds	r3, #80	; 0x50
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3342      	adds	r3, #66	; 0x42
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
      break;
 800233e:	e05d      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3342      	adds	r3, #66	; 0x42
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
      break;
 8002354:	e052      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002356:	78bb      	ldrb	r3, [r7, #2]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d120      	bne.n	800239e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	3351      	adds	r3, #81	; 0x51
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002372:	78fa      	ldrb	r2, [r7, #3]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3342      	adds	r3, #66	; 0x42
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002386:	e039      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	3342      	adds	r3, #66	; 0x42
 8002398:	2202      	movs	r2, #2
 800239a:	701a      	strb	r2, [r3, #0]
      break;
 800239c:	e02e      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	3350      	adds	r3, #80	; 0x50
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	3342      	adds	r3, #66	; 0x42
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
      break;
 80023c8:	e018      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	3342      	adds	r3, #66	; 0x42
 80023da:	2202      	movs	r2, #2
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	e00d      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	3342      	adds	r3, #66	; 0x42
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
      break;
 80023f4:	e002      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80023fa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3344      	adds	r3, #68	; 0x44
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	8b39      	ldrh	r1, [r7, #24]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4403      	add	r3, r0
 8002420:	3348      	adds	r3, #72	; 0x48
 8002422:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	334c      	adds	r3, #76	; 0x4c
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	3339      	adds	r3, #57	; 0x39
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	335d      	adds	r3, #93	; 0x5d
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	3338      	adds	r3, #56	; 0x38
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	18d1      	adds	r1, r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	f004 f926 	bl	80066e0 <USB_HC_StartXfer>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop

080024a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fe43 	bl	8006142 <USB_GetMode>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f040 80ef 	bne.w	80026a2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fe27 	bl	800611c <USB_ReadInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80e5 	beq.w	80026a0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fe1e 	bl	800611c <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ea:	d104      	bne.n	80024f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fe0e 	bl	800611c <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800250a:	d104      	bne.n	8002516 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002514:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fdfe 	bl	800611c <USB_ReadInterrupts>
 8002520:	4603      	mov	r3, r0
 8002522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002526:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800252a:	d104      	bne.n	8002536 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002534:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fdee 	bl	800611c <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d103      	bne.n	8002552 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2202      	movs	r2, #2
 8002550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fde0 	bl	800611c <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002566:	d115      	bne.n	8002594 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002570:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f00a f830 	bl	800c5e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f003 fed6 	bl	8006340 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 fdbf 	bl	800611c <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a8:	d102      	bne.n	80025b0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f001 f966 	bl	800387c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fdb1 	bl	800611c <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d106      	bne.n	80025d2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f009 fff3 	bl	800c5b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2208      	movs	r2, #8
 80025d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fda0 	bl	800611c <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e6:	d138      	bne.n	800265a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 f9bd 	bl	800696c <USB_HC_ReadInterrupt>
 80025f2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e025      	b.n	8002646 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002624:	d106      	bne.n	8002634 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8cf 	bl	80027d0 <HCD_HC_IN_IRQHandler>
 8002632:	e005      	b.n	8002640 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fcfd 	bl	800303a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3d4      	bcc.n	80025fa <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fd5c 	bl	800611c <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b10      	cmp	r3, #16
 800266c:	d101      	bne.n	8002672 <HAL_HCD_IRQHandler+0x1d2>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_HCD_IRQHandler+0x1d4>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0210 	bic.w	r2, r2, #16
 8002686:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f001 f84b 	bl	8003724 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0210 	orr.w	r2, r2, #16
 800269c:	619a      	str	r2, [r3, #24]
 800269e:	e000      	b.n	80026a2 <HAL_HCD_IRQHandler+0x202>
      return;
 80026a0:	bf00      	nop
    }
  }
}
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_HCD_Start+0x16>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e013      	b.n	80026e6 <HAL_HCD_Start+0x3e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fc33 	bl	8005f36 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fe96 	bl	8006408 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_HCD_Stop+0x16>
 8002700:	2302      	movs	r3, #2
 8002702:	e00d      	b.n	8002720 <HAL_HCD_Stop+0x32>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f004 fa77 	bl	8006c04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f003 fe3d 	bl	80063b4 <USB_ResetPort>
 800273a:	4603      	mov	r3, r0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	781b      	ldrb	r3, [r3, #0]
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	334c      	adds	r3, #76	; 0x4c
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fe7f 	bl	80064a8 <USB_GetCurrentFrame>
 80027aa:	4603      	mov	r3, r0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fe5a 	bl	800647a <USB_GetHostSpeed>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d119      	bne.n	8002834 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	2304      	movs	r3, #4
 8002810:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	0151      	lsls	r1, r2, #5
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	440a      	add	r2, r1
 8002828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	60d3      	str	r3, [r2, #12]
 8002832:	e0ce      	b.n	80029d2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800284a:	d12c      	bne.n	80028a6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	461a      	mov	r2, r3
 800285a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800285e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	335d      	adds	r3, #93	; 0x5d
 8002870:	2207      	movs	r2, #7
 8002872:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	0151      	lsls	r1, r2, #5
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	440a      	add	r2, r1
 800288a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 f875 	bl	800698e <USB_HC_Halt>
 80028a4:	e095      	b.n	80029d2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d109      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	2320      	movs	r3, #32
 80028cc:	6093      	str	r3, [r2, #8]
 80028ce:	e080      	b.n	80029d2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d134      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	0151      	lsls	r1, r2, #5
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	440a      	add	r2, r1
 80028fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	335d      	adds	r3, #93	; 0x5d
 8002916:	2205      	movs	r2, #5
 8002918:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2310      	movs	r3, #16
 800292a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2308      	movs	r3, #8
 800293c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f004 f820 	bl	800698e <USB_HC_Halt>
 800294e:	e040      	b.n	80029d2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	d134      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	440a      	add	r2, r1
 800297e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fffb 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2310      	movs	r3, #16
 80029a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	335d      	adds	r3, #93	; 0x5d
 80029ba:	2208      	movs	r2, #8
 80029bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	461a      	mov	r2, r3
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d122      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	0151      	lsls	r1, r2, #5
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	440a      	add	r2, r1
 8002a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 ffba 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a2e:	e300      	b.n	8003032 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 80fd 	bne.w	8002c42 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3348      	adds	r3, #72	; 0x48
 8002a60:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0159      	lsls	r1, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a74:	1ad1      	subs	r1, r2, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4403      	add	r3, r0
 8002a84:	334c      	adds	r3, #76	; 0x4c
 8002a86:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	335d      	adds	r3, #93	; 0x5d
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3358      	adds	r3, #88	; 0x58
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	2301      	movs	r3, #1
 8002ac0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	333f      	adds	r3, #63	; 0x3f
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	333f      	adds	r3, #63	; 0x3f
 8002ae8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d121      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	0151      	lsls	r1, r2, #5
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	440a      	add	r2, r1
 8002b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 ff38 	bl	800698e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	6093      	str	r3, [r2, #8]
 8002b30:	e070      	b.n	8002c14 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	333f      	adds	r3, #63	; 0x3f
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d12a      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	b2d8      	uxtb	r0, r3
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4601      	mov	r1, r0
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f009 fd34 	bl	800c604 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b9c:	e03a      	b.n	8002c14 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	333f      	adds	r3, #63	; 0x3f
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d12f      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	335c      	adds	r3, #92	; 0x5c
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3350      	adds	r3, #80	; 0x50
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2d8      	uxtb	r0, r3
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3350      	adds	r3, #80	; 0x50
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	335c      	adds	r3, #92	; 0x5c
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f009 fcf8 	bl	800c604 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3350      	adds	r3, #80	; 0x50
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3350      	adds	r3, #80	; 0x50
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	e1f7      	b.n	8003032 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f040 811a 	bne.w	8002e8e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	335d      	adds	r3, #93	; 0x5d
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10a      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	335c      	adds	r3, #92	; 0x5c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e0d9      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	335d      	adds	r3, #93	; 0x5d
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	d10a      	bne.n	8002cd2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	440b      	add	r3, r1
 8002cca:	335c      	adds	r3, #92	; 0x5c
 8002ccc:	2205      	movs	r2, #5
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e0c3      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	335d      	adds	r3, #93	; 0x5d
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	d00a      	beq.n	8002cfe <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	335d      	adds	r3, #93	; 0x5d
 8002cf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d156      	bne.n	8002dac <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3358      	adds	r3, #88	; 0x58
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c59      	adds	r1, r3, #1
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4403      	add	r3, r0
 8002d20:	3358      	adds	r3, #88	; 0x58
 8002d22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3358      	adds	r3, #88	; 0x58
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d914      	bls.n	8002d64 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3358      	adds	r3, #88	; 0x58
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	335c      	adds	r3, #92	; 0x5c
 8002d5e:	2204      	movs	r2, #4
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e009      	b.n	8002d78 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	440b      	add	r3, r1
 8002d72:	335c      	adds	r3, #92	; 0x5c
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e056      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	440b      	add	r3, r1
 8002dba:	335d      	adds	r3, #93	; 0x5d
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d123      	bne.n	8002e0a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	335c      	adds	r3, #92	; 0x5c
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	e027      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	335d      	adds	r3, #93	; 0x5d
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b07      	cmp	r3, #7
 8002e1e:	d11c      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3358      	adds	r3, #88	; 0x58
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	1c59      	adds	r1, r3, #1
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4403      	add	r3, r0
 8002e42:	3358      	adds	r3, #88	; 0x58
 8002e44:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	335c      	adds	r3, #92	; 0x5c
 8002e56:	2204      	movs	r2, #4
 8002e58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2302      	movs	r3, #2
 8002e6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	b2d8      	uxtb	r0, r3
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	335c      	adds	r3, #92	; 0x5c
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4601      	mov	r1, r0
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f009 fbbc 	bl	800c604 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e8c:	e0d1      	b.n	8003032 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea0:	2b80      	cmp	r3, #128	; 0x80
 8002ea2:	d13e      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	0151      	lsls	r1, r2, #5
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	440a      	add	r2, r1
 8002eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3358      	adds	r3, #88	; 0x58
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1c59      	adds	r1, r3, #1
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4403      	add	r3, r0
 8002ee6:	3358      	adds	r3, #88	; 0x58
 8002ee8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	335d      	adds	r3, #93	; 0x5d
 8002efa:	2206      	movs	r2, #6
 8002efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f003 fd40 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	6093      	str	r3, [r2, #8]
}
 8002f20:	e087      	b.n	8003032 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d17c      	bne.n	8003032 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	440b      	add	r3, r1
 8002f46:	333f      	adds	r3, #63	; 0x3f
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d122      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3358      	adds	r3, #88	; 0x58
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	0151      	lsls	r1, r2, #5
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	440a      	add	r2, r1
 8002f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 fcfe 	bl	800698e <USB_HC_Halt>
 8002f92:	e045      	b.n	8003020 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	333f      	adds	r3, #63	; 0x3f
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	333f      	adds	r3, #63	; 0x3f
 8002fba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d12f      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	440b      	add	r3, r1
 8002fce:	3358      	adds	r3, #88	; 0x58
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d121      	bne.n	8003020 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	335d      	adds	r3, #93	; 0x5d
 8002fec:	2203      	movs	r2, #3
 8002fee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	0151      	lsls	r1, r2, #5
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	440a      	add	r2, r1
 8003006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fcb7 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2310      	movs	r3, #16
 8003030:	6093      	str	r3, [r2, #8]
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d119      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	461a      	mov	r2, r3
 8003078:	2304      	movs	r3, #4
 800307a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	0151      	lsls	r1, r2, #5
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	440a      	add	r2, r1
 8003092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800309c:	e33e      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d141      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2320      	movs	r3, #32
 80030c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	333d      	adds	r3, #61	; 0x3d
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 831f 	bne.w	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	333d      	adds	r3, #61	; 0x3d
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	335c      	adds	r3, #92	; 0x5c
 8003102:	2202      	movs	r2, #2
 8003104:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	440a      	add	r2, r1
 800311c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fc2c 	bl	800698e <USB_HC_Halt>
}
 8003136:	e2f1      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d13f      	bne.n	80031ce <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	335d      	adds	r3, #93	; 0x5d
 800315e:	2204      	movs	r2, #4
 8003160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	333d      	adds	r3, #61	; 0x3d
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	3358      	adds	r3, #88	; 0x58
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	0151      	lsls	r1, r2, #5
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	440a      	add	r2, r1
 80031a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fbea 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	6093      	str	r3, [r2, #8]
}
 80031cc:	e2a6      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e4:	d122      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	0151      	lsls	r1, r2, #5
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	440a      	add	r2, r1
 80031fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fbbc 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	461a      	mov	r2, r3
 8003224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003228:	6093      	str	r3, [r2, #8]
}
 800322a:	e277      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d135      	bne.n	80032ae <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	440b      	add	r3, r1
 8003250:	3358      	adds	r3, #88	; 0x58
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	440a      	add	r2, r1
 800326c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fb84 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	2301      	movs	r3, #1
 8003296:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	335d      	adds	r3, #93	; 0x5d
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
}
 80032ac:	e236      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d12b      	bne.n	800331c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	2308      	movs	r3, #8
 80032d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	0151      	lsls	r1, r2, #5
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	440a      	add	r2, r1
 80032ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fb44 	bl	800698e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	335d      	adds	r3, #93	; 0x5d
 8003316:	2205      	movs	r2, #5
 8003318:	701a      	strb	r2, [r3, #0]
}
 800331a:	e1ff      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b10      	cmp	r3, #16
 8003330:	d155      	bne.n	80033de <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	440b      	add	r3, r1
 8003340:	3358      	adds	r3, #88	; 0x58
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	335d      	adds	r3, #93	; 0x5d
 8003356:	2203      	movs	r2, #3
 8003358:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	333d      	adds	r3, #61	; 0x3d
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d114      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	333c      	adds	r3, #60	; 0x3c
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	333d      	adds	r3, #61	; 0x3d
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	0151      	lsls	r1, r2, #5
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	440a      	add	r2, r1
 80033b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f003 fae2 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2310      	movs	r3, #16
 80033da:	6093      	str	r3, [r2, #8]
}
 80033dc:	e19e      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d12b      	bne.n	800344c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	440a      	add	r2, r1
 800340a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fab5 	bl	800698e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	335d      	adds	r3, #93	; 0x5d
 8003434:	2206      	movs	r2, #6
 8003436:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	6093      	str	r3, [r2, #8]
}
 800344a:	e167      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003462:	d135      	bne.n	80034d0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	0151      	lsls	r1, r2, #5
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	440a      	add	r2, r1
 800347a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fa7d 	bl	800698e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4413      	add	r3, r2
 800349c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a0:	461a      	mov	r2, r3
 80034a2:	2310      	movs	r3, #16
 80034a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b2:	461a      	mov	r2, r3
 80034b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	440b      	add	r3, r1
 80034c8:	335d      	adds	r3, #93	; 0x5d
 80034ca:	2208      	movs	r2, #8
 80034cc:	701a      	strb	r2, [r3, #0]
}
 80034ce:	e125      	b.n	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	f040 811a 	bne.w	800371c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003502:	f023 0302 	bic.w	r3, r3, #2
 8003506:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	335d      	adds	r3, #93	; 0x5d
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d137      	bne.n	800358e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	335c      	adds	r3, #92	; 0x5c
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	333f      	adds	r3, #63	; 0x3f
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d00b      	beq.n	8003560 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	440b      	add	r3, r1
 8003556:	333f      	adds	r3, #63	; 0x3f
 8003558:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800355a:	2b03      	cmp	r3, #3
 800355c:	f040 80c5 	bne.w	80036ea <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	3351      	adds	r3, #81	; 0x51
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2d8      	uxtb	r0, r3
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	3351      	adds	r3, #81	; 0x51
 8003588:	4602      	mov	r2, r0
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e0ad      	b.n	80036ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	335d      	adds	r3, #93	; 0x5d
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d10a      	bne.n	80035ba <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	335c      	adds	r3, #92	; 0x5c
 80035b4:	2202      	movs	r2, #2
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e097      	b.n	80036ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	335d      	adds	r3, #93	; 0x5d
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d10a      	bne.n	80035e6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	335c      	adds	r3, #92	; 0x5c
 80035e0:	2202      	movs	r2, #2
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e081      	b.n	80036ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	440b      	add	r3, r1
 80035f4:	335d      	adds	r3, #93	; 0x5d
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d10a      	bne.n	8003612 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	440b      	add	r3, r1
 800360a:	335c      	adds	r3, #92	; 0x5c
 800360c:	2205      	movs	r2, #5
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e06b      	b.n	80036ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	335d      	adds	r3, #93	; 0x5d
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d00a      	beq.n	800363e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	335d      	adds	r3, #93	; 0x5d
 8003638:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800363a:	2b08      	cmp	r3, #8
 800363c:	d155      	bne.n	80036ea <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	3358      	adds	r3, #88	; 0x58
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	1c59      	adds	r1, r3, #1
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4403      	add	r3, r0
 8003660:	3358      	adds	r3, #88	; 0x58
 8003662:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	3358      	adds	r3, #88	; 0x58
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d914      	bls.n	80036a4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	3358      	adds	r3, #88	; 0x58
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	335c      	adds	r3, #92	; 0x5c
 800369e:	2204      	movs	r2, #4
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e009      	b.n	80036b8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	440b      	add	r3, r1
 80036b2:	335c      	adds	r3, #92	; 0x5c
 80036b4:	2202      	movs	r2, #2
 80036b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	461a      	mov	r2, r3
 80036f8:	2302      	movs	r3, #2
 80036fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	b2d8      	uxtb	r0, r3
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	335c      	adds	r3, #92	; 0x5c
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	4601      	mov	r1, r0
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f008 ff74 	bl	800c604 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800371c:	bf00      	nop
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	0c5b      	lsrs	r3, r3, #17
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003758:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d003      	beq.n	8003768 <HCD_RXQLVL_IRQHandler+0x44>
 8003760:	2b05      	cmp	r3, #5
 8003762:	f000 8082 	beq.w	800386a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003766:	e083      	b.n	8003870 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d07f      	beq.n	800386e <HCD_RXQLVL_IRQHandler+0x14a>
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	440b      	add	r3, r1
 800377c:	3344      	adds	r3, #68	; 0x44
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d074      	beq.n	800386e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	440b      	add	r3, r1
 8003796:	3344      	adds	r3, #68	; 0x44
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	b292      	uxth	r2, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f002 fc93 	bl	80060ca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	3344      	adds	r3, #68	; 0x44
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	18d1      	adds	r1, r2, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4403      	add	r3, r0
 80037c8:	3344      	adds	r3, #68	; 0x44
 80037ca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	; 0x4c
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	18d1      	adds	r1, r2, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4403      	add	r3, r0
 80037f0:	334c      	adds	r3, #76	; 0x4c
 80037f2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HCD_RXQLVL_IRQHandler+0x154>)
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d031      	beq.n	800386e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	4413      	add	r3, r2
 8003812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003820:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003828:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	440b      	add	r3, r1
 800384a:	3350      	adds	r3, #80	; 0x50
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	f083 0301 	eor.w	r3, r3, #1
 8003852:	b2d8      	uxtb	r0, r3
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3350      	adds	r3, #80	; 0x50
 8003864:	4602      	mov	r2, r0
 8003866:	701a      	strb	r2, [r3, #0]
      break;
 8003868:	e001      	b.n	800386e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800386e:	bf00      	nop
  }
}
 8003870:	bf00      	nop
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	1ff80000 	.word	0x1ff80000

0800387c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80038a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d10b      	bne.n	80038cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f008 fe84 	bl	800c5cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f043 0302 	orr.w	r3, r3, #2
 80038ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d132      	bne.n	800393c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d126      	bne.n	8003936 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d113      	bne.n	8003918 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038fa:	d106      	bne.n	800390a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f002 fd1c 	bl	8006340 <USB_InitFSLSPClkSel>
 8003908:	e011      	b.n	800392e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f002 fd15 	bl	8006340 <USB_InitFSLSPClkSel>
 8003916:	e00a      	b.n	800392e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003926:	461a      	mov	r2, r3
 8003928:	f64e 2360 	movw	r3, #60000	; 0xea60
 800392c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f008 fe76 	bl	800c620 <HAL_HCD_PortEnabled_Callback>
 8003934:	e002      	b.n	800393c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f008 fe80 	bl	800c63c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b20      	cmp	r3, #32
 8003944:	d103      	bne.n	800394e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f043 0320 	orr.w	r3, r3, #32
 800394c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e11f      	b.n	8003bb6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd f8cc 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2224      	movs	r2, #36	; 0x24
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c8:	f002 f8f2 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 80039cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4a7b      	ldr	r2, [pc, #492]	; (8003bc0 <HAL_I2C_Init+0x25c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d807      	bhi.n	80039e8 <HAL_I2C_Init+0x84>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a7a      	ldr	r2, [pc, #488]	; (8003bc4 <HAL_I2C_Init+0x260>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	bf94      	ite	ls
 80039e0:	2301      	movls	r3, #1
 80039e2:	2300      	movhi	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e006      	b.n	80039f6 <HAL_I2C_Init+0x92>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a77      	ldr	r2, [pc, #476]	; (8003bc8 <HAL_I2C_Init+0x264>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf94      	ite	ls
 80039f0:	2301      	movls	r3, #1
 80039f2:	2300      	movhi	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0db      	b.n	8003bb6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_I2C_Init+0x268>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	0c9b      	lsrs	r3, r3, #18
 8003a08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a64      	ldr	r2, [pc, #400]	; (8003bc0 <HAL_I2C_Init+0x25c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d802      	bhi.n	8003a38 <HAL_I2C_Init+0xd4>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	e009      	b.n	8003a4c <HAL_I2C_Init+0xe8>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	4a63      	ldr	r2, [pc, #396]	; (8003bd0 <HAL_I2C_Init+0x26c>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4956      	ldr	r1, [pc, #344]	; (8003bc0 <HAL_I2C_Init+0x25c>)
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	d80d      	bhi.n	8003a88 <HAL_I2C_Init+0x124>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1e59      	subs	r1, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	bf38      	it	cc
 8003a84:	2304      	movcc	r3, #4
 8003a86:	e04f      	b.n	8003b28 <HAL_I2C_Init+0x1c4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_I2C_Init+0x150>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	440b      	add	r3, r1
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e012      	b.n	8003ada <HAL_I2C_Init+0x176>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Init+0x17e>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e022      	b.n	8003b28 <HAL_I2C_Init+0x1c4>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10e      	bne.n	8003b08 <HAL_I2C_Init+0x1a4>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1e58      	subs	r0, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	440b      	add	r3, r1
 8003af8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	e00f      	b.n	8003b28 <HAL_I2C_Init+0x1c4>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1e58      	subs	r0, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6859      	ldr	r1, [r3, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	0099      	lsls	r1, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6911      	ldr	r1, [r2, #16]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68d2      	ldr	r2, [r2, #12]
 8003b62:	4311      	orrs	r1, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	000186a0 	.word	0x000186a0
 8003bc4:	001e847f 	.word	0x001e847f
 8003bc8:	003d08ff 	.word	0x003d08ff
 8003bcc:	431bde83 	.word	0x431bde83
 8003bd0:	10624dd3 	.word	0x10624dd3

08003bd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bee:	f7fd faf7 	bl	80011e0 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	f040 80d9 	bne.w	8003db4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2319      	movs	r3, #25
 8003c08:	2201      	movs	r2, #1
 8003c0a:	496d      	ldr	r1, [pc, #436]	; (8003dc0 <HAL_I2C_Mem_Write+0x1ec>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f971 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0cc      	b.n	8003db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Mem_Write+0x56>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0c5      	b.n	8003db6 <HAL_I2C_Mem_Write+0x1e2>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d007      	beq.n	8003c50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2221      	movs	r2, #33	; 0x21
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <HAL_I2C_Mem_Write+0x1f0>)
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c92:	88f8      	ldrh	r0, [r7, #6]
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	8979      	ldrh	r1, [r7, #10]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f890 	bl	8003dc8 <I2C_RequestMemoryWrite>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d052      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e081      	b.n	8003db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f9f2 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d107      	bne.n	8003cda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06b      	b.n	8003db6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d11b      	bne.n	8003d54 <HAL_I2C_Mem_Write+0x180>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d017      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1aa      	bne.n	8003cb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f9de 	bl	8004122 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00d      	beq.n	8003d88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d107      	bne.n	8003d84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e016      	b.n	8003db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	00100002 	.word	0x00100002
 8003dc4:	ffff0000 	.word	0xffff0000

08003dc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	817b      	strh	r3, [r7, #10]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	813b      	strh	r3, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f878 	bl	8003ef4 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e18:	d103      	bne.n	8003e22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e05f      	b.n	8003ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e26:	897b      	ldrh	r3, [r7, #10]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	492d      	ldr	r1, [pc, #180]	; (8003ef0 <I2C_RequestMemoryWrite+0x128>)
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f8b0 	bl	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e04c      	b.n	8003ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	6a39      	ldr	r1, [r7, #32]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f91a 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d107      	bne.n	8003e8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e02b      	b.n	8003ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]
 8003e9e:	e021      	b.n	8003ee4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	6a39      	ldr	r1, [r7, #32]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f8f4 	bl	80040a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00d      	beq.n	8003eda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d107      	bne.n	8003ed6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e005      	b.n	8003ee6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eda:	893b      	ldrh	r3, [r7, #8]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	00010002 	.word	0x00010002

08003ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f04:	e025      	b.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d021      	beq.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fd f967 	bl	80011e0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d116      	bne.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e023      	b.n	8003f9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10d      	bne.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	e00c      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d0b6      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fb0:	e051      	b.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d123      	bne.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f043 0204 	orr.w	r2, r3, #4
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e046      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fd f8e5 	bl	80011e0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e020      	b.n	8004098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10c      	bne.n	800407a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf14      	ite	ne
 8004072:	2301      	movne	r3, #1
 8004074:	2300      	moveq	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	e00b      	b.n	8004092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	43da      	mvns	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d18d      	bne.n	8003fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ac:	e02d      	b.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f878 	bl	80041a4 <I2C_IsAcknowledgeFailed>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e02d      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d021      	beq.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c6:	f7fd f88b 	bl	80011e0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d302      	bcc.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d116      	bne.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d1ca      	bne.n	80040ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800412e:	e02d      	b.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f837 	bl	80041a4 <I2C_IsAcknowledgeFailed>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e02d      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d021      	beq.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004148:	f7fd f84a 	bl	80011e0 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e007      	b.n	800419c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b04      	cmp	r3, #4
 8004198:	d1ca      	bne.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ba:	d11b      	bne.n	80041f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	f043 0204 	orr.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e128      	b.n	8004468 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a90      	ldr	r2, [pc, #576]	; (8004470 <HAL_I2S_Init+0x26c>)
 800422e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7fc fcc1 	bl	8000bb8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800424c:	f023 030f 	bic.w	r3, r3, #15
 8004250:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2202      	movs	r2, #2
 8004258:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d060      	beq.n	8004324 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800426a:	2310      	movs	r3, #16
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e001      	b.n	8004274 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004270:	2320      	movs	r3, #32
 8004272:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b20      	cmp	r3, #32
 800427a:	d802      	bhi.n	8004282 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004282:	2001      	movs	r0, #1
 8004284:	f001 fd98 	bl	8005db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004288:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004292:	d125      	bne.n	80042e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d010      	beq.n	80042be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	461a      	mov	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	3305      	adds	r3, #5
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	e01f      	b.n	80042fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	3305      	adds	r3, #5
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	e00e      	b.n	80042fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	461a      	mov	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	3305      	adds	r3, #5
 80042fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4a5c      	ldr	r2, [pc, #368]	; (8004474 <HAL_I2S_Init+0x270>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	08db      	lsrs	r3, r3, #3
 8004308:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	e003      	b.n	800432c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004324:	2302      	movs	r3, #2
 8004326:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d902      	bls.n	8004338 <HAL_I2S_Init+0x134>
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	2bff      	cmp	r3, #255	; 0xff
 8004336:	d907      	bls.n	8004348 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	f043 0210 	orr.w	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e08f      	b.n	8004468 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	ea42 0103 	orr.w	r1, r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	430a      	orrs	r2, r1
 800435a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004366:	f023 030f 	bic.w	r3, r3, #15
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6851      	ldr	r1, [r2, #4]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6892      	ldr	r2, [r2, #8]
 8004372:	4311      	orrs	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68d2      	ldr	r2, [r2, #12]
 8004378:	4311      	orrs	r1, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6992      	ldr	r2, [r2, #24]
 800437e:	430a      	orrs	r2, r1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d161      	bne.n	8004458 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a38      	ldr	r2, [pc, #224]	; (8004478 <HAL_I2S_Init+0x274>)
 8004398:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_I2S_Init+0x278>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_I2S_Init+0x1a4>
 80043a4:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_I2S_Init+0x27c>)
 80043a6:	e001      	b.n	80043ac <HAL_I2S_Init+0x1a8>
 80043a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	4932      	ldr	r1, [pc, #200]	; (800447c <HAL_I2S_Init+0x278>)
 80043b4:	428a      	cmp	r2, r1
 80043b6:	d101      	bne.n	80043bc <HAL_I2S_Init+0x1b8>
 80043b8:	4a31      	ldr	r2, [pc, #196]	; (8004480 <HAL_I2S_Init+0x27c>)
 80043ba:	e001      	b.n	80043c0 <HAL_I2S_Init+0x1bc>
 80043bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80043c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043c4:	f023 030f 	bic.w	r3, r3, #15
 80043c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_I2S_Init+0x278>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_I2S_Init+0x1d4>
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_I2S_Init+0x27c>)
 80043d6:	e001      	b.n	80043dc <HAL_I2S_Init+0x1d8>
 80043d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043dc:	2202      	movs	r2, #2
 80043de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <HAL_I2S_Init+0x278>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_I2S_Init+0x1ea>
 80043ea:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_I2S_Init+0x27c>)
 80043ec:	e001      	b.n	80043f2 <HAL_I2S_Init+0x1ee>
 80043ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fe:	d003      	beq.n	8004408 <HAL_I2S_Init+0x204>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e001      	b.n	8004414 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	b299      	uxth	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800442a:	4303      	orrs	r3, r0
 800442c:	b29b      	uxth	r3, r3
 800442e:	430b      	orrs	r3, r1
 8004430:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004432:	4313      	orrs	r3, r2
 8004434:	b29a      	uxth	r2, r3
 8004436:	897b      	ldrh	r3, [r7, #10]
 8004438:	4313      	orrs	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004440:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a0d      	ldr	r2, [pc, #52]	; (800447c <HAL_I2S_Init+0x278>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_I2S_Init+0x24c>
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <HAL_I2S_Init+0x27c>)
 800444e:	e001      	b.n	8004454 <HAL_I2S_Init+0x250>
 8004450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004454:	897a      	ldrh	r2, [r7, #10]
 8004456:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08004d01 	.word	0x08004d01
 8004474:	cccccccd 	.word	0xcccccccd
 8004478:	08004e89 	.word	0x08004e89
 800447c:	40003800 	.word	0x40003800
 8004480:	40003400 	.word	0x40003400

08004484 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_I2S_Transmit_DMA+0x1a>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e08e      	b.n	80045c0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_I2S_Transmit_DMA+0x2e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e086      	b.n	80045c0 <HAL_I2S_Transmit_DMA+0x13c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d005      	beq.n	80044d2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
 80044d0:	e076      	b.n	80045c0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2203      	movs	r2, #3
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d002      	beq.n	80044fe <HAL_I2S_Transmit_DMA+0x7a>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d10a      	bne.n	8004514 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004512:	e005      	b.n	8004520 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <HAL_I2S_Transmit_DMA+0x144>)
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	4a27      	ldr	r2, [pc, #156]	; (80045cc <HAL_I2S_Transmit_DMA+0x148>)
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <HAL_I2S_Transmit_DMA+0x14c>)
 8004536:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004540:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004548:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004550:	f7fd f834 	bl	80015bc <HAL_DMA_Start_IT>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00f      	beq.n	800457a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f043 0208 	orr.w	r2, r3, #8
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e022      	b.n	80045c0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004596:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0202 	orr.w	r2, r2, #2
 80045b4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	08004bdf 	.word	0x08004bdf
 80045cc:	08004b9d 	.word	0x08004b9d
 80045d0:	08004bfb 	.word	0x08004bfb

080045d4 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_I2S_DMAPause+0x18>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e04a      	b.n	8004682 <HAL_I2S_DMAPause+0xae>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d108      	bne.n	8004612 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0202 	bic.w	r2, r2, #2
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	e032      	b.n	8004678 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b04      	cmp	r3, #4
 800461c:	d108      	bne.n	8004630 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	e023      	b.n	8004678 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b05      	cmp	r3, #5
 800463a:	d11d      	bne.n	8004678 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0203 	bic.w	r2, r2, #3
 800464a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <HAL_I2S_DMAPause+0xbc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_I2S_DMAPause+0x86>
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <HAL_I2S_DMAPause+0xc0>)
 8004658:	e001      	b.n	800465e <HAL_I2S_DMAPause+0x8a>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	490a      	ldr	r1, [pc, #40]	; (8004690 <HAL_I2S_DMAPause+0xbc>)
 8004666:	428b      	cmp	r3, r1
 8004668:	d101      	bne.n	800466e <HAL_I2S_DMAPause+0x9a>
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <HAL_I2S_DMAPause+0xc0>)
 800466c:	e001      	b.n	8004672 <HAL_I2S_DMAPause+0x9e>
 800466e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004672:	f022 0203 	bic.w	r2, r2, #3
 8004676:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40003800 	.word	0x40003800
 8004694:	40003400 	.word	0x40003400

08004698 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_I2S_DMAResume+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e07d      	b.n	80047ac <HAL_I2S_DMAResume+0x114>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d108      	bne.n	80046d6 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0202 	orr.w	r2, r2, #2
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	e056      	b.n	8004784 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d108      	bne.n	80046f4 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	e047      	b.n	8004784 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b05      	cmp	r3, #5
 80046fe:	d141      	bne.n	8004784 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0203 	orr.w	r2, r2, #3
 800470e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <HAL_I2S_DMAResume+0x120>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_I2S_DMAResume+0x86>
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <HAL_I2S_DMAResume+0x124>)
 800471c:	e001      	b.n	8004722 <HAL_I2S_DMAResume+0x8a>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4923      	ldr	r1, [pc, #140]	; (80047b8 <HAL_I2S_DMAResume+0x120>)
 800472a:	428b      	cmp	r3, r1
 800472c:	d101      	bne.n	8004732 <HAL_I2S_DMAResume+0x9a>
 800472e:	4b23      	ldr	r3, [pc, #140]	; (80047bc <HAL_I2S_DMAResume+0x124>)
 8004730:	e001      	b.n	8004736 <HAL_I2S_DMAResume+0x9e>
 8004732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004736:	f042 0203 	orr.w	r2, r2, #3
 800473a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <HAL_I2S_DMAResume+0x120>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <HAL_I2S_DMAResume+0xb2>
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_I2S_DMAResume+0x124>)
 8004748:	e001      	b.n	800474e <HAL_I2S_DMAResume+0xb6>
 800474a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d115      	bne.n	8004784 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_I2S_DMAResume+0x120>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_I2S_DMAResume+0xce>
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <HAL_I2S_DMAResume+0x124>)
 8004764:	e001      	b.n	800476a <HAL_I2S_DMAResume+0xd2>
 8004766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4911      	ldr	r1, [pc, #68]	; (80047b8 <HAL_I2S_DMAResume+0x120>)
 8004772:	428b      	cmp	r3, r1
 8004774:	d101      	bne.n	800477a <HAL_I2S_DMAResume+0xe2>
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_I2S_DMAResume+0x124>)
 8004778:	e001      	b.n	800477e <HAL_I2S_DMAResume+0xe6>
 800477a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800477e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004782:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047a0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40003800 	.word	0x40003800
 80047bc:	40003400 	.word	0x40003400

080047c0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d4:	d004      	beq.n	80047e0 <HAL_I2S_DMAStop+0x20>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f040 80d1 	bne.w	8004982 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fc ff3d 	bl	800166c <HAL_DMA_Abort>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	f043 0208 	orr.w	r2, r3, #8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004808:	2364      	movs	r3, #100	; 0x64
 800480a:	2201      	movs	r2, #1
 800480c:	2102      	movs	r1, #2
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fb00 	bl	8004e14 <I2S_WaitFlagStateUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f043 0201 	orr.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8004832:	2364      	movs	r3, #100	; 0x64
 8004834:	2200      	movs	r2, #0
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 faeb 	bl	8004e14 <I2S_WaitFlagStateUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0202 	bic.w	r2, r2, #2
 8004888:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b05      	cmp	r3, #5
 8004894:	f040 8165 	bne.w	8004b62 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fc fee1 	bl	800166c <HAL_DMA_Abort>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	f043 0208 	orr.w	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a8a      	ldr	r2, [pc, #552]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_I2S_DMAStop+0x10e>
 80048ca:	4b8a      	ldr	r3, [pc, #552]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 80048cc:	e001      	b.n	80048d2 <HAL_I2S_DMAStop+0x112>
 80048ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4985      	ldr	r1, [pc, #532]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 80048da:	428b      	cmp	r3, r1
 80048dc:	d101      	bne.n	80048e2 <HAL_I2S_DMAStop+0x122>
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 80048e0:	e001      	b.n	80048e6 <HAL_I2S_DMAStop+0x126>
 80048e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d101      	bne.n	80048fe <HAL_I2S_DMAStop+0x13e>
 80048fa:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 80048fc:	e001      	b.n	8004902 <HAL_I2S_DMAStop+0x142>
 80048fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a79      	ldr	r2, [pc, #484]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_I2S_DMAStop+0x154>
 8004910:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004912:	e001      	b.n	8004918 <HAL_I2S_DMAStop+0x158>
 8004914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a73      	ldr	r2, [pc, #460]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_I2S_DMAStop+0x16c>
 8004928:	4b72      	ldr	r3, [pc, #456]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 800492a:	e001      	b.n	8004930 <HAL_I2S_DMAStop+0x170>
 800492c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	496e      	ldr	r1, [pc, #440]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004938:	428b      	cmp	r3, r1
 800493a:	d101      	bne.n	8004940 <HAL_I2S_DMAStop+0x180>
 800493c:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 800493e:	e001      	b.n	8004944 <HAL_I2S_DMAStop+0x184>
 8004940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10c      	bne.n	800496c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800496a:	e0fa      	b.n	8004b62 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_I2S_DMAStop+0x1ba>
 8004976:	4b5f      	ldr	r3, [pc, #380]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004978:	e001      	b.n	800497e <HAL_I2S_DMAStop+0x1be>
 800497a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800497e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004980:	e0ef      	b.n	8004b62 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800498a:	d005      	beq.n	8004998 <HAL_I2S_DMAStop+0x1d8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004994:	f040 80e5 	bne.w	8004b62 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00f      	beq.n	80049c0 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc fe61 	bl	800166c <HAL_DMA_Abort>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0208 	orr.w	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b05      	cmp	r3, #5
 80049ca:	f040 809a 	bne.w	8004b02 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00f      	beq.n	80049f6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fc fe46 	bl	800166c <HAL_DMA_Abort>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f043 0208 	orr.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80049f6:	f7fc fbf3 	bl	80011e0 <HAL_GetTick>
 80049fa:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80049fc:	e012      	b.n	8004a24 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80049fe:	f7fc fbef 	bl	80011e0 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b64      	cmp	r3, #100	; 0x64
 8004a0a:	d90b      	bls.n	8004a24 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2S_DMAStop+0x272>
 8004a2e:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004a30:	e001      	b.n	8004a36 <HAL_I2S_DMAStop+0x276>
 8004a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d1de      	bne.n	80049fe <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004a40:	e012      	b.n	8004a68 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004a42:	f7fc fbcd 	bl	80011e0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b64      	cmp	r3, #100	; 0x64
 8004a4e:	d90b      	bls.n	8004a68 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <HAL_I2S_DMAStop+0x2b6>
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004a74:	e001      	b.n	8004a7a <HAL_I2S_DMAStop+0x2ba>
 8004a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d0de      	beq.n	8004a42 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2S_DMAStop+0x2d2>
 8004a8e:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004a90:	e001      	b.n	8004a96 <HAL_I2S_DMAStop+0x2d6>
 8004a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4914      	ldr	r1, [pc, #80]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004a9e:	428b      	cmp	r3, r1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2S_DMAStop+0x2e6>
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2S_DMAStop+0x2ea>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aae:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0d      	ldr	r2, [pc, #52]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2S_DMAStop+0x302>
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004ac0:	e001      	b.n	8004ac6 <HAL_I2S_DMAStop+0x306>
 8004ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d101      	bne.n	8004ada <HAL_I2S_DMAStop+0x31a>
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004ad8:	e001      	b.n	8004ade <HAL_I2S_DMAStop+0x31e>
 8004ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4902      	ldr	r1, [pc, #8]	; (8004af0 <HAL_I2S_DMAStop+0x330>)
 8004ae6:	428b      	cmp	r3, r1
 8004ae8:	d106      	bne.n	8004af8 <HAL_I2S_DMAStop+0x338>
 8004aea:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <HAL_I2S_DMAStop+0x334>)
 8004aec:	e006      	b.n	8004afc <HAL_I2S_DMAStop+0x33c>
 8004aee:	bf00      	nop
 8004af0:	40003800 	.word	0x40003800
 8004af4:	40003400 	.word	0x40003400
 8004af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004afc:	f022 0202 	bic.w	r2, r2, #2
 8004b00:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b10:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b40:	d10c      	bne.n	8004b5c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e002      	b.n	8004b62 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8004b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0202 	bic.w	r2, r2, #2
 8004bc0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7fc f935 	bl	8000e40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7fc f93d 	bl	8000e6c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0203 	bic.w	r2, r2, #3
 8004c16:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f043 0208 	orr.w	r2, r3, #8
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff ffa5 	bl	8004b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	881a      	ldrh	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c9a      	adds	r2, r3, #2
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10e      	bne.n	8004c9a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc f8d3 	bl	8000e40 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	1c9a      	adds	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10e      	bne.n	8004cf8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff3e 	bl	8004b74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d13a      	bne.n	8004d92 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d109      	bne.n	8004d3a <I2S_IRQHandler+0x3a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d102      	bne.n	8004d3a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ffb4 	bl	8004ca2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d126      	bne.n	8004d92 <I2S_IRQHandler+0x92>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d11f      	bne.n	8004d92 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d60:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	f043 0202 	orr.w	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fefb 	bl	8004b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d136      	bne.n	8004e0c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d109      	bne.n	8004dbc <I2S_IRQHandler+0xbc>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d102      	bne.n	8004dbc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ff45 	bl	8004c46 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d122      	bne.n	8004e0c <I2S_IRQHandler+0x10c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d11b      	bne.n	8004e0c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004de2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f043 0204 	orr.w	r2, r3, #4
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff febe 	bl	8004b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	4613      	mov	r3, r2
 8004e22:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e24:	f7fc f9dc 	bl	80011e0 <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004e2a:	e018      	b.n	8004e5e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d014      	beq.n	8004e5e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004e34:	f7fc f9d4 	bl	80011e0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d902      	bls.n	8004e4a <I2S_WaitFlagStateUntilTimeout+0x36>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e00f      	b.n	8004e7e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	79fb      	ldrb	r3, [r7, #7]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1d7      	bne.n	8004e2c <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4aa2      	ldr	r2, [pc, #648]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004ea2:	4ba2      	ldr	r3, [pc, #648]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ea4:	e001      	b.n	8004eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a9b      	ldr	r2, [pc, #620]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ec0:	4b9a      	ldr	r3, [pc, #616]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ec2:	e001      	b.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed4:	d004      	beq.n	8004ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 8099 	bne.w	8005012 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d107      	bne.n	8004efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f925 	bl	8005144 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9c8 	bl	80052a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d13a      	bne.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d035      	beq.n	8004f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a7e      	ldr	r2, [pc, #504]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f32:	4b7e      	ldr	r3, [pc, #504]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f34:	e001      	b.n	8004f3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4979      	ldr	r1, [pc, #484]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f42:	428b      	cmp	r3, r1
 8004f44:	d101      	bne.n	8004f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f46:	4b79      	ldr	r3, [pc, #484]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f48:	e001      	b.n	8004f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f043 0202 	orr.w	r2, r3, #2
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fdfa 	bl	8004b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	f040 80be 	bne.w	800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80b8 	beq.w	800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a59      	ldr	r2, [pc, #356]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d101      	bne.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004fc6:	4b59      	ldr	r3, [pc, #356]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fc8:	e001      	b.n	8004fce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4954      	ldr	r1, [pc, #336]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fd6:	428b      	cmp	r3, r1
 8004fd8:	d101      	bne.n	8004fde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004fda:	4b54      	ldr	r3, [pc, #336]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fdc:	e001      	b.n	8004fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fe6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fdbc 	bl	8004b88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005010:	e084      	b.n	800511c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b02      	cmp	r3, #2
 800501a:	d107      	bne.n	800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f8be 	bl	80051a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8fd 	bl	8005240 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d12f      	bne.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02a      	beq.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005068:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2e      	ldr	r2, [pc, #184]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005076:	e001      	b.n	800507c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4929      	ldr	r1, [pc, #164]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005084:	428b      	cmp	r3, r1
 8005086:	d101      	bne.n	800508c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005088:	4b28      	ldr	r3, [pc, #160]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800508a:	e001      	b.n	8005090 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800508c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005090:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005094:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f043 0202 	orr.w	r2, r3, #2
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fd6c 	bl	8004b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d131      	bne.n	800511e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02c      	beq.n	800511e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050d0:	e001      	b.n	80050d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80050d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4912      	ldr	r1, [pc, #72]	; (8005128 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050de:	428b      	cmp	r3, r1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050e4:	e001      	b.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80050e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510c:	f043 0204 	orr.w	r2, r3, #4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fd37 	bl	8004b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800511a:	e000      	b.n	800511e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800511c:	bf00      	nop
}
 800511e:	bf00      	nop
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40003800 	.word	0x40003800
 800512c:	40003400 	.word	0x40003400

08005130 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	1c99      	adds	r1, r3, #2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6251      	str	r1, [r2, #36]	; 0x24
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d113      	bne.n	800519e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005184:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff ffc9 	bl	8005130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	1c99      	adds	r1, r3, #2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6251      	str	r1, [r2, #36]	; 0x24
 80051ba:	8819      	ldrh	r1, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <I2SEx_TxISR_I2SExt+0x90>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <I2SEx_TxISR_I2SExt+0x22>
 80051c6:	4b1d      	ldr	r3, [pc, #116]	; (800523c <I2SEx_TxISR_I2SExt+0x94>)
 80051c8:	e001      	b.n	80051ce <I2SEx_TxISR_I2SExt+0x26>
 80051ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ce:	460a      	mov	r2, r1
 80051d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d121      	bne.n	800522e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a12      	ldr	r2, [pc, #72]	; (8005238 <I2SEx_TxISR_I2SExt+0x90>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d101      	bne.n	80051f8 <I2SEx_TxISR_I2SExt+0x50>
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <I2SEx_TxISR_I2SExt+0x94>)
 80051f6:	e001      	b.n	80051fc <I2SEx_TxISR_I2SExt+0x54>
 80051f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	490d      	ldr	r1, [pc, #52]	; (8005238 <I2SEx_TxISR_I2SExt+0x90>)
 8005204:	428b      	cmp	r3, r1
 8005206:	d101      	bne.n	800520c <I2SEx_TxISR_I2SExt+0x64>
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <I2SEx_TxISR_I2SExt+0x94>)
 800520a:	e001      	b.n	8005210 <I2SEx_TxISR_I2SExt+0x68>
 800520c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff ff81 	bl	8005130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40003800 	.word	0x40003800
 800523c:	40003400 	.word	0x40003400

08005240 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68d8      	ldr	r0, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	1c99      	adds	r1, r3, #2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005258:	b282      	uxth	r2, r0
 800525a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d113      	bne.n	800529c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005282:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff ff4a 	bl	8005130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a20      	ldr	r2, [pc, #128]	; (8005334 <I2SEx_RxISR_I2SExt+0x90>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d101      	bne.n	80052ba <I2SEx_RxISR_I2SExt+0x16>
 80052b6:	4b20      	ldr	r3, [pc, #128]	; (8005338 <I2SEx_RxISR_I2SExt+0x94>)
 80052b8:	e001      	b.n	80052be <I2SEx_RxISR_I2SExt+0x1a>
 80052ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052be:	68d8      	ldr	r0, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	1c99      	adds	r1, r3, #2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80052ca:	b282      	uxth	r2, r0
 80052cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d121      	bne.n	800532a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <I2SEx_RxISR_I2SExt+0x90>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d101      	bne.n	80052f4 <I2SEx_RxISR_I2SExt+0x50>
 80052f0:	4b11      	ldr	r3, [pc, #68]	; (8005338 <I2SEx_RxISR_I2SExt+0x94>)
 80052f2:	e001      	b.n	80052f8 <I2SEx_RxISR_I2SExt+0x54>
 80052f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	490d      	ldr	r1, [pc, #52]	; (8005334 <I2SEx_RxISR_I2SExt+0x90>)
 8005300:	428b      	cmp	r3, r1
 8005302:	d101      	bne.n	8005308 <I2SEx_RxISR_I2SExt+0x64>
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <I2SEx_RxISR_I2SExt+0x94>)
 8005306:	e001      	b.n	800530c <I2SEx_RxISR_I2SExt+0x68>
 8005308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005310:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff ff03 	bl	8005130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40003800 	.word	0x40003800
 8005338:	40003400 	.word	0x40003400

0800533c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e25b      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d075      	beq.n	8005446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800535a:	4ba3      	ldr	r3, [pc, #652]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b04      	cmp	r3, #4
 8005364:	d00c      	beq.n	8005380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005366:	4ba0      	ldr	r3, [pc, #640]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800536e:	2b08      	cmp	r3, #8
 8005370:	d112      	bne.n	8005398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005372:	4b9d      	ldr	r3, [pc, #628]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800537e:	d10b      	bne.n	8005398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005380:	4b99      	ldr	r3, [pc, #612]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d05b      	beq.n	8005444 <HAL_RCC_OscConfig+0x108>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d157      	bne.n	8005444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e236      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d106      	bne.n	80053b0 <HAL_RCC_OscConfig+0x74>
 80053a2:	4b91      	ldr	r3, [pc, #580]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a90      	ldr	r2, [pc, #576]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	e01d      	b.n	80053ec <HAL_RCC_OscConfig+0xb0>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x98>
 80053ba:	4b8b      	ldr	r3, [pc, #556]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a8a      	ldr	r2, [pc, #552]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4b88      	ldr	r3, [pc, #544]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a87      	ldr	r2, [pc, #540]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e00b      	b.n	80053ec <HAL_RCC_OscConfig+0xb0>
 80053d4:	4b84      	ldr	r3, [pc, #528]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a83      	ldr	r2, [pc, #524]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b81      	ldr	r3, [pc, #516]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a80      	ldr	r2, [pc, #512]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80053e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d013      	beq.n	800541c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f4:	f7fb fef4 	bl	80011e0 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053fc:	f7fb fef0 	bl	80011e0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	; 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e1fb      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	4b76      	ldr	r3, [pc, #472]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0xc0>
 800541a:	e014      	b.n	8005446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fb fee0 	bl	80011e0 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005424:	f7fb fedc 	bl	80011e0 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	; 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e1e7      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005436:	4b6c      	ldr	r3, [pc, #432]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0xe8>
 8005442:	e000      	b.n	8005446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d063      	beq.n	800551a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005452:	4b65      	ldr	r3, [pc, #404]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800545e:	4b62      	ldr	r3, [pc, #392]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005466:	2b08      	cmp	r3, #8
 8005468:	d11c      	bne.n	80054a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800546a:	4b5f      	ldr	r3, [pc, #380]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d116      	bne.n	80054a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005476:	4b5c      	ldr	r3, [pc, #368]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_RCC_OscConfig+0x152>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d001      	beq.n	800548e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e1bb      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548e:	4b56      	ldr	r3, [pc, #344]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4952      	ldr	r1, [pc, #328]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a2:	e03a      	b.n	800551a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d020      	beq.n	80054ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ac:	4b4f      	ldr	r3, [pc, #316]	; (80055ec <HAL_RCC_OscConfig+0x2b0>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fb fe95 	bl	80011e0 <HAL_GetTick>
 80054b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ba:	f7fb fe91 	bl	80011e0 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e19c      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054cc:	4b46      	ldr	r3, [pc, #280]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d8:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4940      	ldr	r1, [pc, #256]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
 80054ec:	e015      	b.n	800551a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <HAL_RCC_OscConfig+0x2b0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fb fe74 	bl	80011e0 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054fc:	f7fb fe70 	bl	80011e0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e17b      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550e:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d030      	beq.n	8005588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d016      	beq.n	800555c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800552e:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_RCC_OscConfig+0x2b4>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005534:	f7fb fe54 	bl	80011e0 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800553c:	f7fb fe50 	bl	80011e0 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e15b      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554e:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x200>
 800555a:	e015      	b.n	8005588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800555c:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <HAL_RCC_OscConfig+0x2b4>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005562:	f7fb fe3d 	bl	80011e0 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556a:	f7fb fe39 	bl	80011e0 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e144      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80a0 	beq.w	80056d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	6413      	str	r3, [r2, #64]	; 0x40
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_RCC_OscConfig+0x2b8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d121      	bne.n	8005616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <HAL_RCC_OscConfig+0x2b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <HAL_RCC_OscConfig+0x2b8>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7fb fdff 	bl	80011e0 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	e011      	b.n	800560a <HAL_RCC_OscConfig+0x2ce>
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	42470000 	.word	0x42470000
 80055f0:	42470e80 	.word	0x42470e80
 80055f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f8:	f7fb fdf2 	bl	80011e0 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e0fd      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560a:	4b81      	ldr	r3, [pc, #516]	; (8005810 <HAL_RCC_OscConfig+0x4d4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d106      	bne.n	800562c <HAL_RCC_OscConfig+0x2f0>
 800561e:	4b7d      	ldr	r3, [pc, #500]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a7c      	ldr	r2, [pc, #496]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	e01c      	b.n	8005666 <HAL_RCC_OscConfig+0x32a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b05      	cmp	r3, #5
 8005632:	d10c      	bne.n	800564e <HAL_RCC_OscConfig+0x312>
 8005634:	4b77      	ldr	r3, [pc, #476]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	4a76      	ldr	r2, [pc, #472]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 800563a:	f043 0304 	orr.w	r3, r3, #4
 800563e:	6713      	str	r3, [r2, #112]	; 0x70
 8005640:	4b74      	ldr	r3, [pc, #464]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	4a73      	ldr	r2, [pc, #460]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6713      	str	r3, [r2, #112]	; 0x70
 800564c:	e00b      	b.n	8005666 <HAL_RCC_OscConfig+0x32a>
 800564e:	4b71      	ldr	r3, [pc, #452]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	4a70      	ldr	r2, [pc, #448]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005654:	f023 0301 	bic.w	r3, r3, #1
 8005658:	6713      	str	r3, [r2, #112]	; 0x70
 800565a:	4b6e      	ldr	r3, [pc, #440]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	4a6d      	ldr	r2, [pc, #436]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005660:	f023 0304 	bic.w	r3, r3, #4
 8005664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d015      	beq.n	800569a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566e:	f7fb fdb7 	bl	80011e0 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005674:	e00a      	b.n	800568c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fb fdb3 	bl	80011e0 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	4293      	cmp	r3, r2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e0bc      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568c:	4b61      	ldr	r3, [pc, #388]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ee      	beq.n	8005676 <HAL_RCC_OscConfig+0x33a>
 8005698:	e014      	b.n	80056c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569a:	f7fb fda1 	bl	80011e0 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fb fd9d 	bl	80011e0 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0a6      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b8:	4b56      	ldr	r3, [pc, #344]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ee      	bne.n	80056a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ca:	4b52      	ldr	r3, [pc, #328]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	4a51      	ldr	r2, [pc, #324]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 80056d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8092 	beq.w	8005804 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056e0:	4b4c      	ldr	r3, [pc, #304]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 030c 	and.w	r3, r3, #12
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d05c      	beq.n	80057a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d141      	bne.n	8005778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f4:	4b48      	ldr	r3, [pc, #288]	; (8005818 <HAL_RCC_OscConfig+0x4dc>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fa:	f7fb fd71 	bl	80011e0 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005702:	f7fb fd6d 	bl	80011e0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e078      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005714:	4b3f      	ldr	r3, [pc, #252]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f0      	bne.n	8005702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	019b      	lsls	r3, r3, #6
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	085b      	lsrs	r3, r3, #1
 8005738:	3b01      	subs	r3, #1
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	4933      	ldr	r1, [pc, #204]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 8005746:	4313      	orrs	r3, r2
 8005748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800574a:	4b33      	ldr	r3, [pc, #204]	; (8005818 <HAL_RCC_OscConfig+0x4dc>)
 800574c:	2201      	movs	r2, #1
 800574e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fb fd46 	bl	80011e0 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005758:	f7fb fd42 	bl	80011e0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e04d      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x41c>
 8005776:	e045      	b.n	8005804 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005778:	4b27      	ldr	r3, [pc, #156]	; (8005818 <HAL_RCC_OscConfig+0x4dc>)
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577e:	f7fb fd2f 	bl	80011e0 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005786:	f7fb fd2b 	bl	80011e0 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e036      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1f0      	bne.n	8005786 <HAL_RCC_OscConfig+0x44a>
 80057a4:	e02e      	b.n	8005804 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e029      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_RCC_OscConfig+0x4d8>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d11c      	bne.n	8005800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d115      	bne.n	8005800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057da:	4013      	ands	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10d      	bne.n	8005800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d106      	bne.n	8005800 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40007000 	.word	0x40007000
 8005814:	40023800 	.word	0x40023800
 8005818:	42470060 	.word	0x42470060

0800581c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0cc      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005830:	4b68      	ldr	r3, [pc, #416]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d90c      	bls.n	8005858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b65      	ldr	r3, [pc, #404]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005846:	4b63      	ldr	r3, [pc, #396]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d001      	beq.n	8005858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0b8      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d020      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005870:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4a58      	ldr	r2, [pc, #352]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800587a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005888:	4b53      	ldr	r3, [pc, #332]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a52      	ldr	r2, [pc, #328]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005894:	4b50      	ldr	r3, [pc, #320]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	494d      	ldr	r1, [pc, #308]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d044      	beq.n	800593c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	4b47      	ldr	r3, [pc, #284]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d119      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e07f      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d003      	beq.n	80058da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058da:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e06f      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ea:	4b3b      	ldr	r3, [pc, #236]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e067      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fa:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4934      	ldr	r1, [pc, #208]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005908:	4313      	orrs	r3, r2
 800590a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800590c:	f7fb fc68 	bl	80011e0 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	e00a      	b.n	800592a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005914:	f7fb fc64 	bl	80011e0 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e04f      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 020c 	and.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	429a      	cmp	r2, r3
 800593a:	d1eb      	bne.n	8005914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800593c:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d20c      	bcs.n	8005964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b22      	ldr	r3, [pc, #136]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005952:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e032      	b.n	80059ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4916      	ldr	r1, [pc, #88]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800598e:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	490e      	ldr	r1, [pc, #56]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059a2:	f000 f821 	bl	80059e8 <HAL_RCC_GetSysClockFreq>
 80059a6:	4601      	mov	r1, r0
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <HAL_RCC_ClockConfig+0x1c0>)
 80059b4:	5cd3      	ldrb	r3, [r2, r3]
 80059b6:	fa21 f303 	lsr.w	r3, r1, r3
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCC_ClockConfig+0x1c8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fb fbc8 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023c00 	.word	0x40023c00
 80059d8:	40023800 	.word	0x40023800
 80059dc:	0800cd28 	.word	0x0800cd28
 80059e0:	20000000 	.word	0x20000000
 80059e4:	20000004 	.word	0x20000004

080059e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	2300      	movs	r3, #0
 80059f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059fe:	4b63      	ldr	r3, [pc, #396]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d007      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x32>
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d008      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x38>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 80b4 	bne.w	8005b7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a14:	4b5e      	ldr	r3, [pc, #376]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a16:	60bb      	str	r3, [r7, #8]
       break;
 8005a18:	e0b3      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a1a:	4b5e      	ldr	r3, [pc, #376]	; (8005b94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a1c:	60bb      	str	r3, [r7, #8]
      break;
 8005a1e:	e0b0      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a20:	4b5a      	ldr	r3, [pc, #360]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a2a:	4b58      	ldr	r3, [pc, #352]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04a      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a36:	4b55      	ldr	r3, [pc, #340]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	f04f 0400 	mov.w	r4, #0
 8005a40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	ea03 0501 	and.w	r5, r3, r1
 8005a4c:	ea04 0602 	and.w	r6, r4, r2
 8005a50:	4629      	mov	r1, r5
 8005a52:	4632      	mov	r2, r6
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	f04f 0400 	mov.w	r4, #0
 8005a5c:	0154      	lsls	r4, r2, #5
 8005a5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a62:	014b      	lsls	r3, r1, #5
 8005a64:	4619      	mov	r1, r3
 8005a66:	4622      	mov	r2, r4
 8005a68:	1b49      	subs	r1, r1, r5
 8005a6a:	eb62 0206 	sbc.w	r2, r2, r6
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	f04f 0400 	mov.w	r4, #0
 8005a76:	0194      	lsls	r4, r2, #6
 8005a78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a7c:	018b      	lsls	r3, r1, #6
 8005a7e:	1a5b      	subs	r3, r3, r1
 8005a80:	eb64 0402 	sbc.w	r4, r4, r2
 8005a84:	f04f 0100 	mov.w	r1, #0
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	00e2      	lsls	r2, r4, #3
 8005a8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a92:	00d9      	lsls	r1, r3, #3
 8005a94:	460b      	mov	r3, r1
 8005a96:	4614      	mov	r4, r2
 8005a98:	195b      	adds	r3, r3, r5
 8005a9a:	eb44 0406 	adc.w	r4, r4, r6
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	0262      	lsls	r2, r4, #9
 8005aa8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005aac:	0259      	lsls	r1, r3, #9
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4614      	mov	r4, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f04f 0400 	mov.w	r4, #0
 8005abc:	461a      	mov	r2, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	f7fa fb8a 	bl	80001d8 <__aeabi_uldivmod>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e049      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005acc:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	f04f 0400 	mov.w	r4, #0
 8005ad6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	ea03 0501 	and.w	r5, r3, r1
 8005ae2:	ea04 0602 	and.w	r6, r4, r2
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4632      	mov	r2, r6
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	f04f 0400 	mov.w	r4, #0
 8005af2:	0154      	lsls	r4, r2, #5
 8005af4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005af8:	014b      	lsls	r3, r1, #5
 8005afa:	4619      	mov	r1, r3
 8005afc:	4622      	mov	r2, r4
 8005afe:	1b49      	subs	r1, r1, r5
 8005b00:	eb62 0206 	sbc.w	r2, r2, r6
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	f04f 0400 	mov.w	r4, #0
 8005b0c:	0194      	lsls	r4, r2, #6
 8005b0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b12:	018b      	lsls	r3, r1, #6
 8005b14:	1a5b      	subs	r3, r3, r1
 8005b16:	eb64 0402 	sbc.w	r4, r4, r2
 8005b1a:	f04f 0100 	mov.w	r1, #0
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	00e2      	lsls	r2, r4, #3
 8005b24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b28:	00d9      	lsls	r1, r3, #3
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	195b      	adds	r3, r3, r5
 8005b30:	eb44 0406 	adc.w	r4, r4, r6
 8005b34:	f04f 0100 	mov.w	r1, #0
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	02a2      	lsls	r2, r4, #10
 8005b3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b42:	0299      	lsls	r1, r3, #10
 8005b44:	460b      	mov	r3, r1
 8005b46:	4614      	mov	r4, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f04f 0400 	mov.w	r4, #0
 8005b52:	461a      	mov	r2, r3
 8005b54:	4623      	mov	r3, r4
 8005b56:	f7fa fb3f 	bl	80001d8 <__aeabi_uldivmod>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	60bb      	str	r3, [r7, #8]
      break;
 8005b7a:	e002      	b.n	8005b82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b7e:	60bb      	str	r3, [r7, #8]
      break;
 8005b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b82:	68bb      	ldr	r3, [r7, #8]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	00f42400 	.word	0x00f42400
 8005b94:	007a1200 	.word	0x007a1200

08005b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <HAL_RCC_GetHCLKFreq+0x14>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000000 	.word	0x20000000

08005bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bb4:	f7ff fff0 	bl	8005b98 <HAL_RCC_GetHCLKFreq>
 8005bb8:	4601      	mov	r1, r0
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	0a9b      	lsrs	r3, r3, #10
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	4a03      	ldr	r2, [pc, #12]	; (8005bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bc6:	5cd3      	ldrb	r3, [r2, r3]
 8005bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	0800cd38 	.word	0x0800cd38

08005bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d038      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c00:	4b68      	ldr	r3, [pc, #416]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c06:	f7fb faeb 	bl	80011e0 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c0e:	f7fb fae7 	bl	80011e0 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0bd      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c20:	4b61      	ldr	r3, [pc, #388]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f0      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	019b      	lsls	r3, r3, #6
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	071b      	lsls	r3, r3, #28
 8005c3e:	495a      	ldr	r1, [pc, #360]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c46:	4b57      	ldr	r3, [pc, #348]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4c:	f7fb fac8 	bl	80011e0 <HAL_GetTick>
 8005c50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c54:	f7fb fac4 	bl	80011e0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e09a      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c66:	4b50      	ldr	r3, [pc, #320]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8083 	beq.w	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	4b48      	ldr	r3, [pc, #288]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	4a47      	ldr	r2, [pc, #284]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c90:	4b45      	ldr	r3, [pc, #276]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c9c:	4b43      	ldr	r3, [pc, #268]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a42      	ldr	r2, [pc, #264]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca8:	f7fb fa9a 	bl	80011e0 <HAL_GetTick>
 8005cac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cb0:	f7fb fa96 	bl	80011e0 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e06c      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cc2:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cce:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d02f      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d028      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cec:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cf6:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cfc:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d08:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d114      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fb fa64 	bl	80011e0 <HAL_GetTick>
 8005d18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d1c:	f7fb fa60 	bl	80011e0 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e034      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ee      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d4a:	d10d      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d60:	4911      	ldr	r1, [pc, #68]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
 8005d66:	e005      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005d68:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d72:	6093      	str	r3, [r2, #8]
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d80:	4909      	ldr	r1, [pc, #36]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	7d1a      	ldrb	r2, [r3, #20]
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005d98:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	42470068 	.word	0x42470068
 8005da8:	40023800 	.word	0x40023800
 8005dac:	40007000 	.word	0x40007000
 8005db0:	42470e40 	.word	0x42470e40
 8005db4:	424711e0 	.word	0x424711e0

08005db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d13f      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005dd6:	4b23      	ldr	r3, [pc, #140]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dde:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d131      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dea:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dec:	617b      	str	r3, [r7, #20]
          break;
 8005dee:	e031      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005df0:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfc:	d109      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005dfe:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e08:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e008      	b.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005e12:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e1c:	4a14      	ldr	r2, [pc, #80]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e22:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005e24:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	099b      	lsrs	r3, r3, #6
 8005e2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005e38:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e3e:	0f1b      	lsrs	r3, r3, #28
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4a:	617b      	str	r3, [r7, #20]
          break;
 8005e4c:	e002      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
          break;
 8005e52:	bf00      	nop
        }
      }
      break;
 8005e54:	bf00      	nop
    }
  }
  return frequency;
 8005e56:	697b      	ldr	r3, [r7, #20]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40023800 	.word	0x40023800
 8005e68:	00bb8000 	.word	0x00bb8000
 8005e6c:	007a1200 	.word	0x007a1200
 8005e70:	00f42400 	.word	0x00f42400

08005e74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e74:	b084      	sub	sp, #16
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	f107 001c 	add.w	r0, r7, #28
 8005e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d122      	bne.n	8005ed2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f94a 	bl	8006160 <USB_CoreReset>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e01a      	b.n	8005f08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f93e 	bl	8006160 <USB_CoreReset>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8005efa:	e005      	b.n	8005f08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d10b      	bne.n	8005f26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f043 0206 	orr.w	r2, r3, #6
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f32:	b004      	add	sp, #16
 8005f34:	4770      	bx	lr

08005f36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f023 0201 	bic.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d106      	bne.n	8005fa6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
 8005fa4:	e00b      	b.n	8005fbe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60da      	str	r2, [r3, #12]
 8005fb8:	e001      	b.n	8005fbe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e003      	b.n	8005fc6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fbe:	2032      	movs	r0, #50	; 0x32
 8005fc0:	f7fb f91a 	bl	80011f8 <HAL_Delay>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	019b      	lsls	r3, r3, #6
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a09      	ldr	r2, [pc, #36]	; (8006018 <USB_FlushTxFifo+0x48>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e006      	b.n	800600a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b20      	cmp	r3, #32
 8006006:	d0f0      	beq.n	8005fea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	00030d40 	.word	0x00030d40

0800601c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2210      	movs	r2, #16
 800602c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3301      	adds	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a09      	ldr	r2, [pc, #36]	; (800605c <USB_FlushRxFifo+0x40>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d901      	bls.n	8006040 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e006      	b.n	800604e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b10      	cmp	r3, #16
 800604a:	d0f0      	beq.n	800602e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	00030d40 	.word	0x00030d40

08006060 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006060:	b480      	push	{r7}
 8006062:	b089      	sub	sp, #36	; 0x24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4611      	mov	r1, r2
 800606c:	461a      	mov	r2, r3
 800606e:	460b      	mov	r3, r1
 8006070:	71fb      	strb	r3, [r7, #7]
 8006072:	4613      	mov	r3, r2
 8006074:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800607e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	d11a      	bne.n	80060bc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006086:	88bb      	ldrh	r3, [r7, #4]
 8006088:	3303      	adds	r3, #3
 800608a:	089b      	lsrs	r3, r3, #2
 800608c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e00f      	b.n	80060b4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	031a      	lsls	r2, r3, #12
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a0:	461a      	mov	r2, r3
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	3304      	adds	r3, #4
 80060ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3eb      	bcc.n	8006094 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	; 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b089      	sub	sp, #36	; 0x24
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	4613      	mov	r3, r2
 80060d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	3303      	adds	r3, #3
 80060e4:	089b      	lsrs	r3, r3, #2
 80060e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e00b      	b.n	8006106 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3304      	adds	r3, #4
 80060fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	3301      	adds	r3, #1
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3ef      	bcc.n	80060ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800610e:	69fb      	ldr	r3, [r7, #28]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3724      	adds	r7, #36	; 0x24
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0301 	and.w	r3, r3, #1
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <USB_CoreReset+0x64>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d901      	bls.n	800617e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e01b      	b.n	80061b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	daf2      	bge.n	800616c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f043 0201 	orr.w	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a09      	ldr	r2, [pc, #36]	; (80061c4 <USB_CoreReset+0x64>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d901      	bls.n	80061a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e006      	b.n	80061b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d0f0      	beq.n	8006196 <USB_CoreReset+0x36>

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	00030d40 	.word	0x00030d40

080061c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c8:	b084      	sub	sp, #16
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	f107 001c 	add.w	r0, r7, #28
 80061d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061e4:	461a      	mov	r2, r3
 80061e6:	2300      	movs	r3, #0
 80061e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10a      	bne.n	8006236 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800622e:	f043 0304 	orr.w	r3, r3, #4
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e014      	b.n	8006260 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006244:	f023 0304 	bic.w	r3, r3, #4
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e009      	b.n	8006260 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800625a:	f023 0304 	bic.w	r3, r3, #4
 800625e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006260:	2110      	movs	r1, #16
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff feb4 	bl	8005fd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fed7 	bl	800601c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e015      	b.n	80062a0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	461a      	mov	r2, r3
 8006282:	f04f 33ff 	mov.w	r3, #4294967295
 8006286:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d3e5      	bcc.n	8006274 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80062a8:	2101      	movs	r1, #1
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8ac 	bl	8006408 <USB_DriveVbus>

  HAL_Delay(200U);
 80062b0:	20c8      	movs	r0, #200	; 0xc8
 80062b2:	f7fa ffa1 	bl	80011f8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a14      	ldr	r2, [pc, #80]	; (800632c <USB_HostInit+0x164>)
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a13      	ldr	r2, [pc, #76]	; (8006330 <USB_HostInit+0x168>)
 80062e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80062e6:	e009      	b.n	80062fc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2280      	movs	r2, #128	; 0x80
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a10      	ldr	r2, [pc, #64]	; (8006334 <USB_HostInit+0x16c>)
 80062f2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a10      	ldr	r2, [pc, #64]	; (8006338 <USB_HostInit+0x170>)
 80062f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f043 0210 	orr.w	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <USB_HostInit+0x174>)
 8006314:	4313      	orrs	r3, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006326:	b004      	add	sp, #16
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	01000200 	.word	0x01000200
 8006330:	00e00300 	.word	0x00e00300
 8006334:	00600080 	.word	0x00600080
 8006338:	004000e0 	.word	0x004000e0
 800633c:	a3200008 	.word	0xa3200008

08006340 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006378:	4313      	orrs	r3, r2
 800637a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006388:	461a      	mov	r2, r3
 800638a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800638e:	6053      	str	r3, [r2, #4]
 8006390:	e009      	b.n	80063a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	2b02      	cmp	r3, #2
 8006396:	d106      	bne.n	80063a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800639e:	461a      	mov	r2, r3
 80063a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80063a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80063e4:	2064      	movs	r0, #100	; 0x64
 80063e6:	f7fa ff07 	bl	80011f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80063f8:	200a      	movs	r0, #10
 80063fa:	f7fa fefd 	bl	80011f8 <HAL_Delay>

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800642c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <USB_DriveVbus+0x44>
 8006438:	78fb      	ldrb	r3, [r7, #3]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d106      	bne.n	800644c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800644a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d109      	bne.n	800646c <USB_DriveVbus+0x64>
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800646a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	0c5b      	lsrs	r3, r3, #17
 8006498:	f003 0303 	and.w	r3, r3, #3
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	b29b      	uxth	r3, r3
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	4608      	mov	r0, r1
 80064d6:	4611      	mov	r1, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	70fb      	strb	r3, [r7, #3]
 80064de:	460b      	mov	r3, r1
 80064e0:	70bb      	strb	r3, [r7, #2]
 80064e2:	4613      	mov	r3, r2
 80064e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fa:	461a      	mov	r2, r3
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006502:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006506:	2b03      	cmp	r3, #3
 8006508:	d87e      	bhi.n	8006608 <USB_HC_Init+0x13c>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <USB_HC_Init+0x44>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006521 	.word	0x08006521
 8006514:	080065cb 	.word	0x080065cb
 8006518:	08006521 	.word	0x08006521
 800651c:	0800658d 	.word	0x0800658d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652c:	461a      	mov	r2, r3
 800652e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006532:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006538:	2b00      	cmp	r3, #0
 800653a:	da10      	bge.n	800655e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	78fa      	ldrb	r2, [r7, #3]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800655c:	e057      	b.n	800660e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d051      	beq.n	800660e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4413      	add	r3, r2
 8006572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	440a      	add	r2, r1
 8006580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006584:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006588:	60d3      	str	r3, [r2, #12]
      break;
 800658a:	e040      	b.n	800660e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	461a      	mov	r2, r3
 800659a:	f240 639d 	movw	r3, #1693	; 0x69d
 800659e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	da34      	bge.n	8006612 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065c8:	e023      	b.n	8006612 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	461a      	mov	r2, r3
 80065d8:	f240 2325 	movw	r3, #549	; 0x225
 80065dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da17      	bge.n	8006616 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	78fa      	ldrb	r2, [r7, #3]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006600:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006604:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006606:	e006      	b.n	8006616 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
      break;
 800660c:	e004      	b.n	8006618 <USB_HC_Init+0x14c>
      break;
 800660e:	bf00      	nop
 8006610:	e002      	b.n	8006618 <USB_HC_Init+0x14c>
      break;
 8006612:	bf00      	nop
 8006614:	e000      	b.n	8006618 <USB_HC_Init+0x14c>
      break;
 8006616:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	2101      	movs	r1, #1
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006632:	4313      	orrs	r3, r2
 8006634:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006642:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006646:	2b00      	cmp	r3, #0
 8006648:	da03      	bge.n	8006652 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800664a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e001      	b.n	8006656 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006656:	f897 3020 	ldrb.w	r3, [r7, #32]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d103      	bne.n	8006666 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800665e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e001      	b.n	800666a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800666a:	787b      	ldrb	r3, [r7, #1]
 800666c:	059b      	lsls	r3, r3, #22
 800666e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006672:	78bb      	ldrb	r3, [r7, #2]
 8006674:	02db      	lsls	r3, r3, #11
 8006676:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800667a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800667c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006680:	049b      	lsls	r3, r3, #18
 8006682:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006686:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006688:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800668a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800668e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	0159      	lsls	r1, r3, #5
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	440b      	add	r3, r1
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066a6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80066a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d10f      	bne.n	80066d0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066ce:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop

080066e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08c      	sub	sp, #48	; 0x30
 80066e4:	af02      	add	r7, sp, #8
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80066f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d028      	beq.n	800675c <USB_HC_StartXfer+0x7c>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	791b      	ldrb	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d124      	bne.n	800675c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <USB_HC_StartXfer+0x50>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	795b      	ldrb	r3, [r3, #5]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d107      	bne.n	8006730 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	4619      	mov	r1, r3
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fa30 	bl	8006b8c <USB_DoPing>
      return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e114      	b.n	800695a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d112      	bne.n	800675c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	6a3a      	ldr	r2, [r7, #32]
 800674a:	440a      	add	r2, r1
 800674c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006750:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006754:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2200      	movs	r2, #0
 800675a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d018      	beq.n	8006796 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	8912      	ldrh	r2, [r2, #8]
 800676c:	4413      	add	r3, r2
 800676e:	3b01      	subs	r3, #1
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	8912      	ldrh	r2, [r2, #8]
 8006774:	fbb3 f3f2 	udiv	r3, r3, r2
 8006778:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800677a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800677c:	8b7b      	ldrh	r3, [r7, #26]
 800677e:	429a      	cmp	r2, r3
 8006780:	d90b      	bls.n	800679a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006782:	8b7b      	ldrh	r3, [r7, #26]
 8006784:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006786:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	8912      	ldrh	r2, [r2, #8]
 800678c:	fb02 f203 	mul.w	r2, r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	611a      	str	r2, [r3, #16]
 8006794:	e001      	b.n	800679a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006796:	2301      	movs	r3, #1
 8006798:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	78db      	ldrb	r3, [r3, #3]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d006      	beq.n	80067b0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80067a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	8912      	ldrh	r2, [r2, #8]
 80067a8:	fb02 f203 	mul.w	r2, r2, r3
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ba:	04d9      	lsls	r1, r3, #19
 80067bc:	4b69      	ldr	r3, [pc, #420]	; (8006964 <USB_HC_StartXfer+0x284>)
 80067be:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067c0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	7a9b      	ldrb	r3, [r3, #10]
 80067c6:	075b      	lsls	r3, r3, #29
 80067c8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067cc:	69f9      	ldr	r1, [r7, #28]
 80067ce:	0148      	lsls	r0, r1, #5
 80067d0:	6a39      	ldr	r1, [r7, #32]
 80067d2:	4401      	add	r1, r0
 80067d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067d8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067da:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80067dc:	79fb      	ldrb	r3, [r7, #7]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	68d9      	ldr	r1, [r3, #12]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f2:	460a      	mov	r2, r1
 80067f4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf0c      	ite	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	2300      	movne	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	6a3a      	ldr	r2, [r7, #32]
 8006822:	440a      	add	r2, r1
 8006824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800682c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	7e7b      	ldrb	r3, [r7, #25]
 800683e:	075b      	lsls	r3, r3, #29
 8006840:	69f9      	ldr	r1, [r7, #28]
 8006842:	0148      	lsls	r0, r1, #5
 8006844:	6a39      	ldr	r1, [r7, #32]
 8006846:	4401      	add	r1, r0
 8006848:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800684c:	4313      	orrs	r3, r2
 800684e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a42      	ldr	r2, [pc, #264]	; (8006968 <USB_HC_StartXfer+0x288>)
 8006860:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006862:	4b41      	ldr	r3, [pc, #260]	; (8006968 <USB_HC_StartXfer+0x288>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800686a:	4a3f      	ldr	r2, [pc, #252]	; (8006968 <USB_HC_StartXfer+0x288>)
 800686c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	78db      	ldrb	r3, [r3, #3]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006876:	4b3c      	ldr	r3, [pc, #240]	; (8006968 <USB_HC_StartXfer+0x288>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	4a3a      	ldr	r2, [pc, #232]	; (8006968 <USB_HC_StartXfer+0x288>)
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e005      	b.n	8006890 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006884:	4b38      	ldr	r3, [pc, #224]	; (8006968 <USB_HC_StartXfer+0x288>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800688c:	4a36      	ldr	r2, [pc, #216]	; (8006968 <USB_HC_StartXfer+0x288>)
 800688e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006890:	4b35      	ldr	r3, [pc, #212]	; (8006968 <USB_HC_StartXfer+0x288>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006898:	4a33      	ldr	r2, [pc, #204]	; (8006968 <USB_HC_StartXfer+0x288>)
 800689a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a8:	461a      	mov	r2, r3
 80068aa:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <USB_HC_StartXfer+0x288>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e04f      	b.n	800695a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d14a      	bne.n	8006958 <USB_HC_StartXfer+0x278>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d046      	beq.n	8006958 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	79db      	ldrb	r3, [r3, #7]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d830      	bhi.n	8006934 <USB_HC_StartXfer+0x254>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <USB_HC_StartXfer+0x1f8>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	080068e9 	.word	0x080068e9
 80068dc:	0800690d 	.word	0x0800690d
 80068e0:	080068e9 	.word	0x080068e9
 80068e4:	0800690d 	.word	0x0800690d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	3303      	adds	r3, #3
 80068ee:	089b      	lsrs	r3, r3, #2
 80068f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068f2:	8afa      	ldrh	r2, [r7, #22]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d91c      	bls.n	8006938 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f043 0220 	orr.w	r2, r3, #32
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	619a      	str	r2, [r3, #24]
        }
        break;
 800690a:	e015      	b.n	8006938 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	3303      	adds	r3, #3
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006916:	8afa      	ldrh	r2, [r7, #22]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	b29b      	uxth	r3, r3
 8006922:	429a      	cmp	r2, r3
 8006924:	d90a      	bls.n	800693c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	619a      	str	r2, [r3, #24]
        }
        break;
 8006932:	e003      	b.n	800693c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006934:	bf00      	nop
 8006936:	e002      	b.n	800693e <USB_HC_StartXfer+0x25e>
        break;
 8006938:	bf00      	nop
 800693a:	e000      	b.n	800693e <USB_HC_StartXfer+0x25e>
        break;
 800693c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	68d9      	ldr	r1, [r3, #12]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	785a      	ldrb	r2, [r3, #1]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	b298      	uxth	r0, r3
 800694c:	2300      	movs	r3, #0
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	4603      	mov	r3, r0
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff fb84 	bl	8006060 <USB_WritePacket>
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3728      	adds	r7, #40	; 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	1ff80000 	.word	0x1ff80000
 8006968:	20001348 	.word	0x20001348

0800696c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	b29b      	uxth	r3, r3
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800698e:	b480      	push	{r7}
 8006990:	b087      	sub	sp, #28
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	0c9b      	lsrs	r3, r3, #18
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <USB_HC_Halt+0x3a>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d16c      	bne.n	8006aa2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d143      	bne.n	8006a7c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a52:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	3301      	adds	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a60:	d81d      	bhi.n	8006a9e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a78:	d0ec      	beq.n	8006a54 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a7a:	e080      	b.n	8006b7e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a9a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a9c:	e06f      	b.n	8006b7e <USB_HC_Halt+0x1f0>
          break;
 8006a9e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006aa0:	e06d      	b.n	8006b7e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ac0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d143      	bne.n	8006b5a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b10:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b30:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	3301      	adds	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b3e:	d81d      	bhi.n	8006b7c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b56:	d0ec      	beq.n	8006b32 <USB_HC_Halt+0x1a4>
 8006b58:	e011      	b.n	8006b7e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e000      	b.n	8006b7e <USB_HC_Halt+0x1f0>
          break;
 8006b7c:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	04da      	lsls	r2, r3, #19
 8006ba8:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <USB_DoPing+0x74>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bbc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bd4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bdc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	1ff80000 	.word	0x1ff80000

08006c04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff f99f 	bl	8005f58 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c1a:	2110      	movs	r1, #16
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff f9d7 	bl	8005fd0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff f9fa 	bl	800601c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	e01f      	b.n	8006c6e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c44:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c4c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c54:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c62:	461a      	mov	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b0f      	cmp	r3, #15
 8006c72:	d9dc      	bls.n	8006c2e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c74:	2300      	movs	r3, #0
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	e034      	b.n	8006ce4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c90:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c98:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ca0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc0:	d80c      	bhi.n	8006cdc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd8:	d0ec      	beq.n	8006cb4 <USB_StopHost+0xb0>
 8006cda:	e000      	b.n	8006cde <USB_StopHost+0xda>
        break;
 8006cdc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	613b      	str	r3, [r7, #16]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	d9c7      	bls.n	8006c7a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff f918 	bl	8005f36 <USB_EnableGlobalInt>

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006d14:	4904      	ldr	r1, [pc, #16]	; (8006d28 <MX_FATFS_Init+0x18>)
 8006d16:	4805      	ldr	r0, [pc, #20]	; (8006d2c <MX_FATFS_Init+0x1c>)
 8006d18:	f005 fb7a 	bl	800c410 <FATFS_LinkDriver>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <MX_FATFS_Init+0x20>)
 8006d22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d24:	bf00      	nop
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2000148c 	.word	0x2000148c
 8006d2c:	0800cd48 	.word	0x0800cd48
 8006d30:	200018f0 	.word	0x200018f0

08006d34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4808      	ldr	r0, [pc, #32]	; (8006d90 <USBH_status+0x34>)
 8006d70:	f000 fe11 	bl	8007996 <USBH_MSC_UnitIsReady>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <USBH_status+0x24>
  {
    res = RES_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e001      	b.n	8006d84 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200018f4 	.word	0x200018f4

08006d94 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b094      	sub	sp, #80	; 0x50
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8006daa:	7bf9      	ldrb	r1, [r7, #15]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4812      	ldr	r0, [pc, #72]	; (8006e00 <USBH_read+0x6c>)
 8006db6:	f000 fe38 	bl	8007a2a <USBH_MSC_Read>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <USBH_read+0x34>
  {
    res = RES_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006dc6:	e015      	b.n	8006df4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006dc8:	f107 0210 	add.w	r2, r7, #16
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	480b      	ldr	r0, [pc, #44]	; (8006e00 <USBH_read+0x6c>)
 8006dd2:	f000 fe06 	bl	80079e2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006dd6:	7f7b      	ldrb	r3, [r7, #29]
 8006dd8:	2b28      	cmp	r3, #40	; 0x28
 8006dda:	d003      	beq.n	8006de4 <USBH_read+0x50>
 8006ddc:	2b3a      	cmp	r3, #58	; 0x3a
 8006dde:	d001      	beq.n	8006de4 <USBH_read+0x50>
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d103      	bne.n	8006dec <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006de4:	2303      	movs	r3, #3
 8006de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006dea:	e003      	b.n	8006df4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006df2:	bf00      	nop
    }
  }

  return res;
 8006df4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3748      	adds	r7, #72	; 0x48
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200018f4 	.word	0x200018f4

08006e04 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b094      	sub	sp, #80	; 0x50
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006e1a:	7bf9      	ldrb	r1, [r7, #15]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	4817      	ldr	r0, [pc, #92]	; (8006e84 <USBH_write+0x80>)
 8006e26:	f000 fe69 	bl	8007afc <USBH_MSC_Write>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <USBH_write+0x34>
  {
    res = RES_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006e36:	e01f      	b.n	8006e78 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006e38:	f107 0210 	add.w	r2, r7, #16
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4810      	ldr	r0, [pc, #64]	; (8006e84 <USBH_write+0x80>)
 8006e42:	f000 fdce 	bl	80079e2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006e46:	7f7b      	ldrb	r3, [r7, #29]
 8006e48:	2b27      	cmp	r3, #39	; 0x27
 8006e4a:	d009      	beq.n	8006e60 <USBH_write+0x5c>
 8006e4c:	2b27      	cmp	r3, #39	; 0x27
 8006e4e:	dc02      	bgt.n	8006e56 <USBH_write+0x52>
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d009      	beq.n	8006e68 <USBH_write+0x64>
 8006e54:	e00c      	b.n	8006e70 <USBH_write+0x6c>
 8006e56:	2b28      	cmp	r3, #40	; 0x28
 8006e58:	d006      	beq.n	8006e68 <USBH_write+0x64>
 8006e5a:	2b3a      	cmp	r3, #58	; 0x3a
 8006e5c:	d004      	beq.n	8006e68 <USBH_write+0x64>
 8006e5e:	e007      	b.n	8006e70 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006e60:	2302      	movs	r3, #2
 8006e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e66:	e007      	b.n	8006e78 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e6e:	e003      	b.n	8006e78 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006e76:	bf00      	nop
    }
  }

  return res;
 8006e78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3748      	adds	r7, #72	; 0x48
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	200018f4 	.word	0x200018f4

08006e88 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b090      	sub	sp, #64	; 0x40
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	603a      	str	r2, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
 8006e94:	460b      	mov	r3, r1
 8006e96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006e9e:	79bb      	ldrb	r3, [r7, #6]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d852      	bhi.n	8006f4a <USBH_ioctl+0xc2>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBH_ioctl+0x24>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ec5 	.word	0x08006ec5
 8006eb4:	08006eef 	.word	0x08006eef
 8006eb8:	08006f1b 	.word	0x08006f1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006ec2:	e045      	b.n	8006f50 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006ec4:	f107 0208 	add.w	r2, r7, #8
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4823      	ldr	r0, [pc, #140]	; (8006f5c <USBH_ioctl+0xd4>)
 8006ece:	f000 fd88 	bl	80079e2 <USBH_MSC_GetLUNInfo>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006ee4:	e034      	b.n	8006f50 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006eec:	e030      	b.n	8006f50 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006eee:	f107 0208 	add.w	r2, r7, #8
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4819      	ldr	r0, [pc, #100]	; (8006f5c <USBH_ioctl+0xd4>)
 8006ef8:	f000 fd73 	bl	80079e2 <USBH_MSC_GetLUNInfo>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d107      	bne.n	8006f12 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006f02:	8a3b      	ldrh	r3, [r7, #16]
 8006f04:	461a      	mov	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006f10:	e01e      	b.n	8006f50 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006f18:	e01a      	b.n	8006f50 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006f1a:	f107 0208 	add.w	r2, r7, #8
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	4619      	mov	r1, r3
 8006f22:	480e      	ldr	r0, [pc, #56]	; (8006f5c <USBH_ioctl+0xd4>)
 8006f24:	f000 fd5d 	bl	80079e2 <USBH_MSC_GetLUNInfo>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006f2e:	8a3b      	ldrh	r3, [r7, #16]
 8006f30:	0a5b      	lsrs	r3, r3, #9
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006f40:	e006      	b.n	8006f50 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006f48:	e002      	b.n	8006f50 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006f4a:	2304      	movs	r3, #4
 8006f4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006f50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3740      	adds	r7, #64	; 0x40
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	200018f4 	.word	0x200018f4

08006f60 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f60:	b590      	push	{r4, r7, lr}
 8006f62:	b089      	sub	sp, #36	; 0x24
 8006f64:	af04      	add	r7, sp, #16
 8006f66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f6e:	7919      	ldrb	r1, [r3, #4]
 8006f70:	2350      	movs	r3, #80	; 0x50
 8006f72:	2206      	movs	r2, #6
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f001 fc4f 	bl	8008818 <USBH_FindInterface>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2bff      	cmp	r3, #255	; 0xff
 8006f82:	d002      	beq.n	8006f8a <USBH_MSC_InterfaceInit+0x2a>
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d901      	bls.n	8006f8e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	e0ef      	b.n	800716e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 fc24 	bl	80087e0 <USBH_SelectInterface>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0e3      	b.n	800716e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006fac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006fb0:	f005 fda4 	bl	800cafc <malloc>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e0d0      	b.n	800716e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68b8      	ldr	r0, [r7, #8]
 8006fd4:	f005 fdad 	bl	800cb32 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	211a      	movs	r1, #26
 8006fde:	fb01 f303 	mul.w	r3, r1, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	da16      	bge.n	800701e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	211a      	movs	r1, #26
 8006ff6:	fb01 f303 	mul.w	r3, r1, r3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	211a      	movs	r1, #26
 800700c:	fb01 f303 	mul.w	r3, r1, r3
 8007010:	4413      	add	r3, r2
 8007012:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	815a      	strh	r2, [r3, #10]
 800701c:	e015      	b.n	800704a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	211a      	movs	r1, #26
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	211a      	movs	r1, #26
 800703a:	fb01 f303 	mul.w	r3, r1, r3
 800703e:	4413      	add	r3, r2
 8007040:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007044:	881a      	ldrh	r2, [r3, #0]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	211a      	movs	r1, #26
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	4413      	add	r3, r2
 8007056:	f203 3356 	addw	r3, r3, #854	; 0x356
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b25b      	sxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	da16      	bge.n	8007090 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	211a      	movs	r1, #26
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	4413      	add	r3, r2
 800706e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	211a      	movs	r1, #26
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	4413      	add	r3, r2
 8007084:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	815a      	strh	r2, [r3, #10]
 800708e:	e015      	b.n	80070bc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	211a      	movs	r1, #26
 8007096:	fb01 f303 	mul.w	r3, r1, r3
 800709a:	4413      	add	r3, r2
 800709c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	211a      	movs	r1, #26
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070b6:	881a      	ldrh	r2, [r3, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2200      	movs	r2, #0
 80070cc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	799b      	ldrb	r3, [r3, #6]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f002 fdc2 	bl	8009c5e <USBH_AllocPipe>
 80070da:	4603      	mov	r3, r0
 80070dc:	461a      	mov	r2, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	79db      	ldrb	r3, [r3, #7]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f002 fdb8 	bl	8009c5e <USBH_AllocPipe>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fda4 	bl	8007c44 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	7959      	ldrb	r1, [r3, #5]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	7998      	ldrb	r0, [r3, #6]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	8912      	ldrh	r2, [r2, #8]
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	2202      	movs	r2, #2
 8007118:	9201      	str	r2, [sp, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4623      	mov	r3, r4
 800711e:	4602      	mov	r2, r0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f002 fd6d 	bl	8009c00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	7919      	ldrb	r1, [r3, #4]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	79d8      	ldrb	r0, [r3, #7]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	8952      	ldrh	r2, [r2, #10]
 800713e:	9202      	str	r2, [sp, #8]
 8007140:	2202      	movs	r2, #2
 8007142:	9201      	str	r2, [sp, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4623      	mov	r3, r4
 8007148:	4602      	mov	r2, r0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f002 fd58 	bl	8009c00 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	791b      	ldrb	r3, [r3, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f005 fbeb 	bl	800c934 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	795b      	ldrb	r3, [r3, #5]
 8007162:	2200      	movs	r2, #0
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f005 fbe4 	bl	800c934 <USBH_LL_SetToggle>

  return USBH_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	bd90      	pop	{r4, r7, pc}

08007176 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	795b      	ldrb	r3, [r3, #5]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00e      	beq.n	80071ae <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	795b      	ldrb	r3, [r3, #5]
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f002 fd51 	bl	8009c3e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	795b      	ldrb	r3, [r3, #5]
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f002 fd7c 	bl	8009ca0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	791b      	ldrb	r3, [r3, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f002 fd3e 	bl	8009c3e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f002 fd69 	bl	8009ca0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00b      	beq.n	80071f8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f005 fc8f 	bl	800cb0c <free>
    phost->pActiveClass->pData = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071f4:	2200      	movs	r2, #0
 80071f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	7b9b      	ldrb	r3, [r3, #14]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d004      	beq.n	800722a <USBH_MSC_ClassRequest+0x28>
 8007220:	2b03      	cmp	r3, #3
 8007222:	d03e      	beq.n	80072a2 <USBH_MSC_ClassRequest+0xa0>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d000      	beq.n	800722a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8007228:	e04a      	b.n	80072c0 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fcea 	bl	8007c08 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b03      	cmp	r3, #3
 800723c:	d104      	bne.n	8007248 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d135      	bne.n	80072ba <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d804      	bhi.n	8007260 <USBH_MSC_ClassRequest+0x5e>
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	b2da      	uxtb	r2, r3
 800725e:	e000      	b.n	8007262 <USBH_MSC_ClassRequest+0x60>
 8007260:	2202      	movs	r2, #2
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007266:	2300      	movs	r3, #0
 8007268:	73bb      	strb	r3, [r7, #14]
 800726a:	e014      	b.n	8007296 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	2134      	movs	r1, #52	; 0x34
 8007272:	fb01 f303 	mul.w	r3, r1, r3
 8007276:	4413      	add	r3, r2
 8007278:	3392      	adds	r3, #146	; 0x92
 800727a:	2202      	movs	r2, #2
 800727c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	2134      	movs	r1, #52	; 0x34
 8007284:	fb01 f303 	mul.w	r3, r1, r3
 8007288:	4413      	add	r3, r2
 800728a:	33c1      	adds	r3, #193	; 0xc1
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	3301      	adds	r3, #1
 8007294:	73bb      	strb	r3, [r7, #14]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	7bba      	ldrb	r2, [r7, #14]
 800729c:	429a      	cmp	r2, r3
 800729e:	d3e5      	bcc.n	800726c <USBH_MSC_ClassRequest+0x6a>
      break;
 80072a0:	e00b      	b.n	80072ba <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80072a2:	2100      	movs	r1, #0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f002 f878 	bl	800939a <USBH_ClrFeature>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	7bda      	ldrb	r2, [r3, #15]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	739a      	strb	r2, [r3, #14]
      break;
 80072b8:	e001      	b.n	80072be <USBH_MSC_ClassRequest+0xbc>
      break;
 80072ba:	bf00      	nop
 80072bc:	e000      	b.n	80072c0 <USBH_MSC_ClassRequest+0xbe>
      break;
 80072be:	bf00      	nop
  }

  return status;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80072de:	2301      	movs	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	7b1b      	ldrb	r3, [r3, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <USBH_MSC_Process+0x2e>
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	f000 8271 	beq.w	80077da <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80072f8:	e272      	b.n	80077e0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	429a      	cmp	r2, r3
 8007308:	f080 824f 	bcs.w	80077aa <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007312:	4619      	mov	r1, r3
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	2334      	movs	r3, #52	; 0x34
 8007318:	fb03 f301 	mul.w	r3, r3, r1
 800731c:	4413      	add	r3, r2
 800731e:	3391      	adds	r3, #145	; 0x91
 8007320:	2201      	movs	r2, #1
 8007322:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800732a:	4619      	mov	r1, r3
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	2334      	movs	r3, #52	; 0x34
 8007330:	fb03 f301 	mul.w	r3, r3, r1
 8007334:	4413      	add	r3, r2
 8007336:	3390      	adds	r3, #144	; 0x90
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b08      	cmp	r3, #8
 800733c:	f200 8243 	bhi.w	80077c6 <USBH_MSC_Process+0x4fa>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USBH_MSC_Process+0x7c>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	0800736d 	.word	0x0800736d
 800734c:	080077c7 	.word	0x080077c7
 8007350:	08007435 	.word	0x08007435
 8007354:	080075b9 	.word	0x080075b9
 8007358:	08007393 	.word	0x08007393
 800735c:	08007685 	.word	0x08007685
 8007360:	080077c7 	.word	0x080077c7
 8007364:	080077c7 	.word	0x080077c7
 8007368:	08007799 	.word	0x08007799
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007372:	4619      	mov	r1, r3
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	2334      	movs	r3, #52	; 0x34
 8007378:	fb03 f301 	mul.w	r3, r3, r1
 800737c:	4413      	add	r3, r2
 800737e:	3390      	adds	r3, #144	; 0x90
 8007380:	2204      	movs	r2, #4
 8007382:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007390:	e222      	b.n	80077d8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007398:	b2d9      	uxtb	r1, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073a0:	461a      	mov	r2, r3
 80073a2:	2334      	movs	r3, #52	; 0x34
 80073a4:	fb03 f302 	mul.w	r3, r3, r2
 80073a8:	3398      	adds	r3, #152	; 0x98
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4413      	add	r3, r2
 80073ae:	3307      	adds	r3, #7
 80073b0:	461a      	mov	r2, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 ff68 	bl	8008288 <USBH_MSC_SCSI_Inquiry>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073c8:	4619      	mov	r1, r3
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	2334      	movs	r3, #52	; 0x34
 80073ce:	fb03 f301 	mul.w	r3, r3, r1
 80073d2:	4413      	add	r3, r2
 80073d4:	3390      	adds	r3, #144	; 0x90
 80073d6:	2202      	movs	r2, #2
 80073d8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d10c      	bne.n	80073fa <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073e6:	4619      	mov	r1, r3
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	2334      	movs	r3, #52	; 0x34
 80073ec:	fb03 f301 	mul.w	r3, r3, r1
 80073f0:	4413      	add	r3, r2
 80073f2:	3390      	adds	r3, #144	; 0x90
 80073f4:	2205      	movs	r2, #5
 80073f6:	701a      	strb	r2, [r3, #0]
            break;
 80073f8:	e1e7      	b.n	80077ca <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	f040 81e4 	bne.w	80077ca <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007408:	4619      	mov	r1, r3
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	2334      	movs	r3, #52	; 0x34
 800740e:	fb03 f301 	mul.w	r3, r3, r1
 8007412:	4413      	add	r3, r2
 8007414:	3390      	adds	r3, #144	; 0x90
 8007416:	2201      	movs	r2, #1
 8007418:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007420:	4619      	mov	r1, r3
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	2334      	movs	r3, #52	; 0x34
 8007426:	fb03 f301 	mul.w	r3, r3, r1
 800742a:	4413      	add	r3, r2
 800742c:	3391      	adds	r3, #145	; 0x91
 800742e:	2202      	movs	r2, #2
 8007430:	701a      	strb	r2, [r3, #0]
            break;
 8007432:	e1ca      	b.n	80077ca <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800743a:	b2db      	uxtb	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fe64 	bl	800810c <USBH_MSC_SCSI_TestUnitReady>
 8007444:	4603      	mov	r3, r0
 8007446:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007448:	7bbb      	ldrb	r3, [r7, #14]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d149      	bne.n	80074e2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007454:	4619      	mov	r1, r3
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	2334      	movs	r3, #52	; 0x34
 800745a:	fb03 f301 	mul.w	r3, r3, r1
 800745e:	4413      	add	r3, r2
 8007460:	3392      	adds	r3, #146	; 0x92
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800746e:	4619      	mov	r1, r3
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	2334      	movs	r3, #52	; 0x34
 8007474:	fb03 f301 	mul.w	r3, r3, r1
 8007478:	4413      	add	r3, r2
 800747a:	33c1      	adds	r3, #193	; 0xc1
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	e00b      	b.n	800749a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007488:	4619      	mov	r1, r3
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	2334      	movs	r3, #52	; 0x34
 800748e:	fb03 f301 	mul.w	r3, r3, r1
 8007492:	4413      	add	r3, r2
 8007494:	33c1      	adds	r3, #193	; 0xc1
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074a0:	4619      	mov	r1, r3
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	2334      	movs	r3, #52	; 0x34
 80074a6:	fb03 f301 	mul.w	r3, r3, r1
 80074aa:	4413      	add	r3, r2
 80074ac:	3390      	adds	r3, #144	; 0x90
 80074ae:	2203      	movs	r2, #3
 80074b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074b8:	4619      	mov	r1, r3
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	2334      	movs	r3, #52	; 0x34
 80074be:	fb03 f301 	mul.w	r3, r3, r1
 80074c2:	4413      	add	r3, r2
 80074c4:	3391      	adds	r3, #145	; 0x91
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074d0:	4619      	mov	r1, r3
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	2334      	movs	r3, #52	; 0x34
 80074d6:	fb03 f301 	mul.w	r3, r3, r1
 80074da:	4413      	add	r3, r2
 80074dc:	3392      	adds	r3, #146	; 0x92
 80074de:	2200      	movs	r2, #0
 80074e0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d14a      	bne.n	800757e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80074ee:	4619      	mov	r1, r3
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	2334      	movs	r3, #52	; 0x34
 80074f4:	fb03 f301 	mul.w	r3, r3, r1
 80074f8:	4413      	add	r3, r2
 80074fa:	3392      	adds	r3, #146	; 0x92
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d00c      	beq.n	800751c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007508:	4619      	mov	r1, r3
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	2334      	movs	r3, #52	; 0x34
 800750e:	fb03 f301 	mul.w	r3, r3, r1
 8007512:	4413      	add	r3, r2
 8007514:	33c1      	adds	r3, #193	; 0xc1
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e00b      	b.n	8007534 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007522:	4619      	mov	r1, r3
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	2334      	movs	r3, #52	; 0x34
 8007528:	fb03 f301 	mul.w	r3, r3, r1
 800752c:	4413      	add	r3, r2
 800752e:	33c1      	adds	r3, #193	; 0xc1
 8007530:	2200      	movs	r2, #0
 8007532:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800753a:	4619      	mov	r1, r3
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	2334      	movs	r3, #52	; 0x34
 8007540:	fb03 f301 	mul.w	r3, r3, r1
 8007544:	4413      	add	r3, r2
 8007546:	3390      	adds	r3, #144	; 0x90
 8007548:	2205      	movs	r2, #5
 800754a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007552:	4619      	mov	r1, r3
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	2334      	movs	r3, #52	; 0x34
 8007558:	fb03 f301 	mul.w	r3, r3, r1
 800755c:	4413      	add	r3, r2
 800755e:	3391      	adds	r3, #145	; 0x91
 8007560:	2201      	movs	r2, #1
 8007562:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800756a:	4619      	mov	r1, r3
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	2334      	movs	r3, #52	; 0x34
 8007570:	fb03 f301 	mul.w	r3, r3, r1
 8007574:	4413      	add	r3, r2
 8007576:	3392      	adds	r3, #146	; 0x92
 8007578:	2202      	movs	r2, #2
 800757a:	701a      	strb	r2, [r3, #0]
            break;
 800757c:	e127      	b.n	80077ce <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800757e:	7bbb      	ldrb	r3, [r7, #14]
 8007580:	2b04      	cmp	r3, #4
 8007582:	f040 8124 	bne.w	80077ce <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800758c:	4619      	mov	r1, r3
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	2334      	movs	r3, #52	; 0x34
 8007592:	fb03 f301 	mul.w	r3, r3, r1
 8007596:	4413      	add	r3, r2
 8007598:	3390      	adds	r3, #144	; 0x90
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075a4:	4619      	mov	r1, r3
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	2334      	movs	r3, #52	; 0x34
 80075aa:	fb03 f301 	mul.w	r3, r3, r1
 80075ae:	4413      	add	r3, r2
 80075b0:	3391      	adds	r3, #145	; 0x91
 80075b2:	2202      	movs	r2, #2
 80075b4:	701a      	strb	r2, [r3, #0]
            break;
 80075b6:	e10a      	b.n	80077ce <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075be:	b2d9      	uxtb	r1, r3
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075c6:	461a      	mov	r2, r3
 80075c8:	2334      	movs	r3, #52	; 0x34
 80075ca:	fb03 f302 	mul.w	r3, r3, r2
 80075ce:	3390      	adds	r3, #144	; 0x90
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4413      	add	r3, r2
 80075d4:	3304      	adds	r3, #4
 80075d6:	461a      	mov	r2, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fdda 	bl	8008192 <USBH_MSC_SCSI_ReadCapacity>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d120      	bne.n	800762a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075ee:	4619      	mov	r1, r3
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	2334      	movs	r3, #52	; 0x34
 80075f4:	fb03 f301 	mul.w	r3, r3, r1
 80075f8:	4413      	add	r3, r2
 80075fa:	3390      	adds	r3, #144	; 0x90
 80075fc:	2201      	movs	r2, #1
 80075fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007606:	4619      	mov	r1, r3
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	2334      	movs	r3, #52	; 0x34
 800760c:	fb03 f301 	mul.w	r3, r3, r1
 8007610:	4413      	add	r3, r2
 8007612:	3391      	adds	r3, #145	; 0x91
 8007614:	2200      	movs	r2, #0
 8007616:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800761e:	3301      	adds	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007628:	e0d3      	b.n	80077d2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d10c      	bne.n	800764a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007636:	4619      	mov	r1, r3
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	2334      	movs	r3, #52	; 0x34
 800763c:	fb03 f301 	mul.w	r3, r3, r1
 8007640:	4413      	add	r3, r2
 8007642:	3390      	adds	r3, #144	; 0x90
 8007644:	2205      	movs	r2, #5
 8007646:	701a      	strb	r2, [r3, #0]
            break;
 8007648:	e0c3      	b.n	80077d2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	2b04      	cmp	r3, #4
 800764e:	f040 80c0 	bne.w	80077d2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007658:	4619      	mov	r1, r3
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	2334      	movs	r3, #52	; 0x34
 800765e:	fb03 f301 	mul.w	r3, r3, r1
 8007662:	4413      	add	r3, r2
 8007664:	3390      	adds	r3, #144	; 0x90
 8007666:	2201      	movs	r2, #1
 8007668:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007670:	4619      	mov	r1, r3
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	2334      	movs	r3, #52	; 0x34
 8007676:	fb03 f301 	mul.w	r3, r3, r1
 800767a:	4413      	add	r3, r2
 800767c:	3391      	adds	r3, #145	; 0x91
 800767e:	2202      	movs	r2, #2
 8007680:	701a      	strb	r2, [r3, #0]
            break;
 8007682:	e0a6      	b.n	80077d2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800768a:	b2d9      	uxtb	r1, r3
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007692:	461a      	mov	r2, r3
 8007694:	2334      	movs	r3, #52	; 0x34
 8007696:	fb03 f302 	mul.w	r3, r3, r2
 800769a:	3398      	adds	r3, #152	; 0x98
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4413      	add	r3, r2
 80076a0:	3304      	adds	r3, #4
 80076a2:	461a      	mov	r2, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fe94 	bl	80083d2 <USBH_MSC_SCSI_RequestSense>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d145      	bne.n	8007740 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ba:	4619      	mov	r1, r3
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	2334      	movs	r3, #52	; 0x34
 80076c0:	fb03 f301 	mul.w	r3, r3, r1
 80076c4:	4413      	add	r3, r2
 80076c6:	339c      	adds	r3, #156	; 0x9c
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	d00c      	beq.n	80076e8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076d4:	4619      	mov	r1, r3
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	2334      	movs	r3, #52	; 0x34
 80076da:	fb03 f301 	mul.w	r3, r3, r1
 80076de:	4413      	add	r3, r2
 80076e0:	339c      	adds	r3, #156	; 0x9c
 80076e2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d117      	bne.n	8007718 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d80c      	bhi.n	8007718 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007704:	4619      	mov	r1, r3
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	2334      	movs	r3, #52	; 0x34
 800770a:	fb03 f301 	mul.w	r3, r3, r1
 800770e:	4413      	add	r3, r2
 8007710:	3390      	adds	r3, #144	; 0x90
 8007712:	2202      	movs	r2, #2
 8007714:	701a      	strb	r2, [r3, #0]
                  break;
 8007716:	e05f      	b.n	80077d8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800771e:	4619      	mov	r1, r3
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	2334      	movs	r3, #52	; 0x34
 8007724:	fb03 f301 	mul.w	r3, r3, r1
 8007728:	4413      	add	r3, r2
 800772a:	3390      	adds	r3, #144	; 0x90
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007736:	3301      	adds	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d10c      	bne.n	8007760 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800774c:	4619      	mov	r1, r3
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	2334      	movs	r3, #52	; 0x34
 8007752:	fb03 f301 	mul.w	r3, r3, r1
 8007756:	4413      	add	r3, r2
 8007758:	3390      	adds	r3, #144	; 0x90
 800775a:	2208      	movs	r2, #8
 800775c:	701a      	strb	r2, [r3, #0]
            break;
 800775e:	e03a      	b.n	80077d6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d137      	bne.n	80077d6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800776c:	4619      	mov	r1, r3
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	2334      	movs	r3, #52	; 0x34
 8007772:	fb03 f301 	mul.w	r3, r3, r1
 8007776:	4413      	add	r3, r2
 8007778:	3390      	adds	r3, #144	; 0x90
 800777a:	2201      	movs	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007784:	4619      	mov	r1, r3
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	2334      	movs	r3, #52	; 0x34
 800778a:	fb03 f301 	mul.w	r3, r3, r1
 800778e:	4413      	add	r3, r2
 8007790:	3391      	adds	r3, #145	; 0x91
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
            break;
 8007796:	e01e      	b.n	80077d6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800779e:	3301      	adds	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80077a8:	e016      	b.n	80077d8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2201      	movs	r2, #1
 80077b6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077be:	2102      	movs	r1, #2
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
      break;
 80077c4:	e00c      	b.n	80077e0 <USBH_MSC_Process+0x514>
            break;
 80077c6:	bf00      	nop
 80077c8:	e00a      	b.n	80077e0 <USBH_MSC_Process+0x514>
            break;
 80077ca:	bf00      	nop
 80077cc:	e008      	b.n	80077e0 <USBH_MSC_Process+0x514>
            break;
 80077ce:	bf00      	nop
 80077d0:	e006      	b.n	80077e0 <USBH_MSC_Process+0x514>
            break;
 80077d2:	bf00      	nop
 80077d4:	e004      	b.n	80077e0 <USBH_MSC_Process+0x514>
            break;
 80077d6:	bf00      	nop
      break;
 80077d8:	e002      	b.n	80077e0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	75fb      	strb	r3, [r7, #23]
      break;
 80077de:	bf00      	nop
  }
  return error;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop

080077ec <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b088      	sub	sp, #32
 8007806:	af02      	add	r7, sp, #8
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	2134      	movs	r1, #52	; 0x34
 8007826:	fb01 f303 	mul.w	r3, r1, r3
 800782a:	4413      	add	r3, r2
 800782c:	3390      	adds	r3, #144	; 0x90
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b06      	cmp	r3, #6
 8007832:	d004      	beq.n	800783e <USBH_MSC_RdWrProcess+0x3c>
 8007834:	2b07      	cmp	r3, #7
 8007836:	d037      	beq.n	80078a8 <USBH_MSC_RdWrProcess+0xa6>
 8007838:	2b05      	cmp	r3, #5
 800783a:	d06a      	beq.n	8007912 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800783c:	e0a6      	b.n	800798c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800783e:	78f9      	ldrb	r1, [r7, #3]
 8007840:	2300      	movs	r3, #0
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	2200      	movs	r2, #0
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fea6 	bl	800859a <USBH_MSC_SCSI_Read>
 800784e:	4603      	mov	r3, r0
 8007850:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10b      	bne.n	8007870 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	2134      	movs	r1, #52	; 0x34
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	3390      	adds	r3, #144	; 0x90
 8007866:	2201      	movs	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]
      break;
 800786e:	e088      	b.n	8007982 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d109      	bne.n	800788a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	2134      	movs	r1, #52	; 0x34
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	4413      	add	r3, r2
 8007882:	3390      	adds	r3, #144	; 0x90
 8007884:	2205      	movs	r2, #5
 8007886:	701a      	strb	r2, [r3, #0]
      break;
 8007888:	e07b      	b.n	8007982 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d178      	bne.n	8007982 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	2134      	movs	r1, #52	; 0x34
 8007896:	fb01 f303 	mul.w	r3, r1, r3
 800789a:	4413      	add	r3, r2
 800789c:	3390      	adds	r3, #144	; 0x90
 800789e:	2208      	movs	r2, #8
 80078a0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80078a2:	2302      	movs	r3, #2
 80078a4:	75fb      	strb	r3, [r7, #23]
      break;
 80078a6:	e06c      	b.n	8007982 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80078a8:	78f9      	ldrb	r1, [r7, #3]
 80078aa:	2300      	movs	r3, #0
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	2200      	movs	r2, #0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fe06 	bl	80084c4 <USBH_MSC_SCSI_Write>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	2134      	movs	r1, #52	; 0x34
 80078c8:	fb01 f303 	mul.w	r3, r1, r3
 80078cc:	4413      	add	r3, r2
 80078ce:	3390      	adds	r3, #144	; 0x90
 80078d0:	2201      	movs	r2, #1
 80078d2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
      break;
 80078d8:	e055      	b.n	8007986 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d109      	bne.n	80078f4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	2134      	movs	r1, #52	; 0x34
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	3390      	adds	r3, #144	; 0x90
 80078ee:	2205      	movs	r2, #5
 80078f0:	701a      	strb	r2, [r3, #0]
      break;
 80078f2:	e048      	b.n	8007986 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d145      	bne.n	8007986 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	2134      	movs	r1, #52	; 0x34
 8007900:	fb01 f303 	mul.w	r3, r1, r3
 8007904:	4413      	add	r3, r2
 8007906:	3390      	adds	r3, #144	; 0x90
 8007908:	2208      	movs	r2, #8
 800790a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800790c:	2302      	movs	r3, #2
 800790e:	75fb      	strb	r3, [r7, #23]
      break;
 8007910:	e039      	b.n	8007986 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	2234      	movs	r2, #52	; 0x34
 8007916:	fb02 f303 	mul.w	r3, r2, r3
 800791a:	3398      	adds	r3, #152	; 0x98
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fd53 	bl	80083d2 <USBH_MSC_SCSI_RequestSense>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d113      	bne.n	800795e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	2134      	movs	r1, #52	; 0x34
 800793c:	fb01 f303 	mul.w	r3, r1, r3
 8007940:	4413      	add	r3, r2
 8007942:	3390      	adds	r3, #144	; 0x90
 8007944:	2201      	movs	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	2134      	movs	r1, #52	; 0x34
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	4413      	add	r3, r2
 8007954:	3391      	adds	r3, #145	; 0x91
 8007956:	2202      	movs	r2, #2
 8007958:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800795a:	2302      	movs	r3, #2
 800795c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d012      	beq.n	800798a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b04      	cmp	r3, #4
 8007968:	d10f      	bne.n	800798a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	2134      	movs	r1, #52	; 0x34
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	4413      	add	r3, r2
 8007976:	3390      	adds	r3, #144	; 0x90
 8007978:	2208      	movs	r2, #8
 800797a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800797c:	2302      	movs	r3, #2
 800797e:	75fb      	strb	r3, [r7, #23]
      break;
 8007980:	e003      	b.n	800798a <USBH_MSC_RdWrProcess+0x188>
      break;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800798a:	bf00      	nop

  }
  return error;
 800798c:	7dfb      	ldrb	r3, [r7, #23]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b0b      	cmp	r3, #11
 80079b4:	d10c      	bne.n	80079d0 <USBH_MSC_UnitIsReady+0x3a>
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	2134      	movs	r1, #52	; 0x34
 80079bc:	fb01 f303 	mul.w	r3, r1, r3
 80079c0:	4413      	add	r3, r2
 80079c2:	3391      	adds	r3, #145	; 0x91
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80079ca:	2301      	movs	r3, #1
 80079cc:	73fb      	strb	r3, [r7, #15]
 80079ce:	e001      	b.n	80079d4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	460b      	mov	r3, r1
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b0b      	cmp	r3, #11
 8007a02:	d10d      	bne.n	8007a20 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	2234      	movs	r2, #52	; 0x34
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	3390      	adds	r3, #144	; 0x90
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	2234      	movs	r2, #52	; 0x34
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f005 f880 	bl	800cb1c <memcpy>
    return USBH_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e000      	b.n	8007a22 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007a20:	2302      	movs	r3, #2
  }
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b088      	sub	sp, #32
 8007a2e:	af02      	add	r7, sp, #8
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	460b      	mov	r3, r1
 8007a38:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00e      	beq.n	8007a6e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007a56:	2b0b      	cmp	r3, #11
 8007a58:	d109      	bne.n	8007a6e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007a5a:	7afb      	ldrb	r3, [r7, #11]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	2134      	movs	r1, #52	; 0x34
 8007a60:	fb01 f303 	mul.w	r3, r1, r3
 8007a64:	4413      	add	r3, r2
 8007a66:	3390      	adds	r3, #144	; 0x90
 8007a68:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d001      	beq.n	8007a72 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e040      	b.n	8007af4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2206      	movs	r2, #6
 8007a76:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	2134      	movs	r1, #52	; 0x34
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	3390      	adds	r3, #144	; 0x90
 8007a86:	2206      	movs	r2, #6
 8007a88:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007a94:	7af9      	ldrb	r1, [r7, #11]
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fd7b 	bl	800859a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aaa:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007aac:	e016      	b.n	8007adc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	f242 7110 	movw	r1, #10000	; 0x2710
 8007abe:	fb01 f303 	mul.w	r3, r1, r3
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d805      	bhi.n	8007ad2 <USBH_MSC_Read+0xa8>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e00b      	b.n	8007af4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007adc:	7afb      	ldrb	r3, [r7, #11]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff fe8e 	bl	8007802 <USBH_MSC_RdWrProcess>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d0e0      	beq.n	8007aae <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2201      	movs	r2, #1
 8007af0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00e      	beq.n	8007b40 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007b28:	2b0b      	cmp	r3, #11
 8007b2a:	d109      	bne.n	8007b40 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	2134      	movs	r1, #52	; 0x34
 8007b32:	fb01 f303 	mul.w	r3, r1, r3
 8007b36:	4413      	add	r3, r2
 8007b38:	3390      	adds	r3, #144	; 0x90
 8007b3a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d001      	beq.n	8007b44 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007b40:	2302      	movs	r3, #2
 8007b42:	e040      	b.n	8007bc6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2207      	movs	r2, #7
 8007b48:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	2134      	movs	r1, #52	; 0x34
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	3390      	adds	r3, #144	; 0x90
 8007b58:	2207      	movs	r2, #7
 8007b5a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007b66:	7af9      	ldrb	r1, [r7, #11]
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fca7 	bl	80084c4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b7c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007b7e:	e016      	b.n	8007bae <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	6a3b      	ldr	r3, [r7, #32]
 8007b8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d805      	bhi.n	8007ba4 <USBH_MSC_Write+0xa8>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007baa:	2302      	movs	r3, #2
 8007bac:	e00b      	b.n	8007bc6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fe25 	bl	8007802 <USBH_MSC_RdWrProcess>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d0e0      	beq.n	8007b80 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2221      	movs	r2, #33	; 0x21
 8007bda:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	22ff      	movs	r2, #255	; 0xff
 8007be0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f001 fdae 	bl	800975a <USBH_CtlReq>
 8007bfe:	4603      	mov	r3, r0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	22a1      	movs	r2, #161	; 0xa1
 8007c16:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	22fe      	movs	r2, #254	; 0xfe
 8007c1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007c30:	2201      	movs	r2, #1
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 fd90 	bl	800975a <USBH_CtlReq>
 8007c3a:	4603      	mov	r3, r0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <USBH_MSC_BOT_Init+0x3c>)
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <USBH_MSC_BOT_Init+0x40>)
 8007c60:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	43425355 	.word	0x43425355
 8007c84:	20304050 	.word	0x20304050

08007c88 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	2b0a      	cmp	r3, #10
 8007cbc:	f200 81a1 	bhi.w	8008002 <USBH_MSC_BOT_Process+0x37a>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <USBH_MSC_BOT_Process+0x40>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007cf5 	.word	0x08007cf5
 8007ccc:	08007d1f 	.word	0x08007d1f
 8007cd0:	08007d89 	.word	0x08007d89
 8007cd4:	08007da7 	.word	0x08007da7
 8007cd8:	08007e2b 	.word	0x08007e2b
 8007cdc:	08007e4f 	.word	0x08007e4f
 8007ce0:	08007ee9 	.word	0x08007ee9
 8007ce4:	08007f05 	.word	0x08007f05
 8007ce8:	08007f57 	.word	0x08007f57
 8007cec:	08007f87 	.word	0x08007f87
 8007cf0:	08007fe9 	.word	0x08007fe9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	795a      	ldrb	r2, [r3, #5]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	4613      	mov	r3, r2
 8007d14:	221f      	movs	r2, #31
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 ff2f 	bl	8009b7a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007d1c:	e180      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f004 fddb 	bl	800c8e0 <USBH_LL_GetURBState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007d2e:	7d3b      	ldrb	r3, [r7, #20]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d118      	bne.n	8007d66 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00f      	beq.n	8007d5c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007d42:	b25b      	sxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da04      	bge.n	8007d52 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d50:	e159      	b.n	8008006 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2205      	movs	r2, #5
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d5a:	e154      	b.n	8008006 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2207      	movs	r2, #7
 8007d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d64:	e14f      	b.n	8008006 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d66:	7d3b      	ldrb	r3, [r7, #20]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d104      	bne.n	8007d76 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d74:	e147      	b.n	8008006 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8007d76:	7d3b      	ldrb	r3, [r7, #20]
 8007d78:	2b05      	cmp	r3, #5
 8007d7a:	f040 8144 	bne.w	8008006 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	220a      	movs	r2, #10
 8007d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007d86:	e13e      	b.n	8008006 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	895a      	ldrh	r2, [r3, #10]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	791b      	ldrb	r3, [r3, #4]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 ff14 	bl	8009bc4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8007da4:	e13c      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f004 fd97 	bl	800c8e0 <USBH_LL_GetURBState>
 8007db2:	4603      	mov	r3, r0
 8007db4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007db6:	7d3b      	ldrb	r3, [r7, #20]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d12d      	bne.n	8007e18 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	8952      	ldrh	r2, [r2, #10]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d910      	bls.n	8007dea <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	8952      	ldrh	r2, [r2, #10]
 8007dd2:	441a      	add	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	8952      	ldrh	r2, [r2, #10]
 8007de2:	1a9a      	subs	r2, r3, r2
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007de8:	e002      	b.n	8007df0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2200      	movs	r2, #0
 8007dee:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	895a      	ldrh	r2, [r3, #10]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	791b      	ldrb	r3, [r3, #4]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fedc 	bl	8009bc4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007e0c:	e0fd      	b.n	800800a <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2207      	movs	r2, #7
 8007e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e16:	e0f8      	b.n	800800a <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8007e18:	7d3b      	ldrb	r3, [r7, #20]
 8007e1a:	2b05      	cmp	r3, #5
 8007e1c:	f040 80f5 	bne.w	800800a <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2209      	movs	r2, #9
 8007e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e28:	e0ef      	b.n	800800a <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	891a      	ldrh	r2, [r3, #8]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	7958      	ldrb	r0, [r3, #5]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f001 fe9b 	bl	8009b7a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2206      	movs	r2, #6
 8007e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007e4c:	e0e8      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	795b      	ldrb	r3, [r3, #5]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f004 fd43 	bl	800c8e0 <USBH_LL_GetURBState>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007e5e:	7d3b      	ldrb	r3, [r7, #20]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d130      	bne.n	8007ec6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	8912      	ldrh	r2, [r2, #8]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d910      	bls.n	8007e92 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	8912      	ldrh	r2, [r2, #8]
 8007e7a:	441a      	add	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	8912      	ldrh	r2, [r2, #8]
 8007e8a:	1a9a      	subs	r2, r3, r2
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e90:	e002      	b.n	8007e98 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2200      	movs	r2, #0
 8007e96:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00d      	beq.n	8007ebc <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	891a      	ldrh	r2, [r3, #8]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	7958      	ldrb	r0, [r3, #5]
 8007eae:	2301      	movs	r3, #1
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f001 fe60 	bl	8009b7a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007eba:	e0a8      	b.n	800800e <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	2207      	movs	r2, #7
 8007ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ec4:	e0a3      	b.n	800800e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ec6:	7d3b      	ldrb	r3, [r7, #20]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d104      	bne.n	8007ed6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2205      	movs	r2, #5
 8007ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ed4:	e09b      	b.n	800800e <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8007ed6:	7d3b      	ldrb	r3, [r7, #20]
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	f040 8098 	bne.w	800800e <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	220a      	movs	r2, #10
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007ee6:	e092      	b.n	800800e <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	791b      	ldrb	r3, [r3, #4]
 8007ef2:	220d      	movs	r2, #13
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 fe65 	bl	8009bc4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	2208      	movs	r2, #8
 8007efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f02:	e08d      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	791b      	ldrb	r3, [r3, #4]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f004 fce8 	bl	800c8e0 <USBH_LL_GetURBState>
 8007f10:	4603      	mov	r3, r0
 8007f12:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007f14:	7d3b      	ldrb	r3, [r7, #20]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d115      	bne.n	8007f46 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8aa 	bl	8008084 <USBH_MSC_DecodeCSW>
 8007f30:	4603      	mov	r3, r0
 8007f32:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007f34:	7d7b      	ldrb	r3, [r7, #21]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d102      	bne.n	8007f40 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007f3e:	e068      	b.n	8008012 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8007f40:	2302      	movs	r3, #2
 8007f42:	75fb      	strb	r3, [r7, #23]
      break;
 8007f44:	e065      	b.n	8008012 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8007f46:	7d3b      	ldrb	r3, [r7, #20]
 8007f48:	2b05      	cmp	r3, #5
 8007f4a:	d162      	bne.n	8008012 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2209      	movs	r2, #9
 8007f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f54:	e05d      	b.n	8008012 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f865 	bl	800802c <USBH_MSC_BOT_Abort>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007f66:	7dbb      	ldrb	r3, [r7, #22]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d104      	bne.n	8007f76 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	2207      	movs	r2, #7
 8007f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007f74:	e04f      	b.n	8008016 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007f76:	7dbb      	ldrb	r3, [r7, #22]
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d14c      	bne.n	8008016 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	220b      	movs	r2, #11
 8007f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007f84:	e047      	b.n	8008016 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f84d 	bl	800802c <USBH_MSC_BOT_Abort>
 8007f92:	4603      	mov	r3, r0
 8007f94:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007f96:	7dbb      	ldrb	r3, [r7, #22]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11d      	bne.n	8007fd8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	795b      	ldrb	r3, [r3, #5]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f004 fcf9 	bl	800c99a <USBH_LL_GetToggle>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	7959      	ldrb	r1, [r3, #5]
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	f1c3 0301 	rsb	r3, r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f004 fcba 	bl	800c934 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f004 fcb3 	bl	800c934 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2209      	movs	r2, #9
 8007fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007fd6:	e020      	b.n	800801a <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8007fd8:	7dbb      	ldrb	r3, [r7, #22]
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d11d      	bne.n	800801a <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	220b      	movs	r2, #11
 8007fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007fe6:	e018      	b.n	800801a <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fdf0 	bl	8007bce <USBH_MSC_BOT_REQ_Reset>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d112      	bne.n	800801e <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008000:	e00d      	b.n	800801e <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8008002:	bf00      	nop
 8008004:	e00c      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 8008006:	bf00      	nop
 8008008:	e00a      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 800800a:	bf00      	nop
 800800c:	e008      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 800800e:	bf00      	nop
 8008010:	e006      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 8008012:	bf00      	nop
 8008014:	e004      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 8008016:	bf00      	nop
 8008018:	e002      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 800801a:	bf00      	nop
 800801c:	e000      	b.n	8008020 <USBH_MSC_BOT_Process+0x398>
      break;
 800801e:	bf00      	nop
  }
  return status;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop

0800802c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
 8008038:	4613      	mov	r3, r2
 800803a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800803c:	2302      	movs	r3, #2
 800803e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800804a:	78bb      	ldrb	r3, [r7, #2]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <USBH_MSC_BOT_Abort+0x2a>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d009      	beq.n	8008068 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008054:	e011      	b.n	800807a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	79db      	ldrb	r3, [r3, #7]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f99c 	bl	800939a <USBH_ClrFeature>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]
      break;
 8008066:	e008      	b.n	800807a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	799b      	ldrb	r3, [r3, #6]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 f993 	bl	800939a <USBH_ClrFeature>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
      break;
 8008078:	bf00      	nop
  }
  return status;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008096:	2301      	movs	r3, #1
 8008098:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	791b      	ldrb	r3, [r3, #4]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f004 fb8b 	bl	800c7bc <USBH_LL_GetLastXferSize>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b0d      	cmp	r3, #13
 80080aa:	d002      	beq.n	80080b2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80080ac:	2302      	movs	r3, #2
 80080ae:	73fb      	strb	r3, [r7, #15]
 80080b0:	e024      	b.n	80080fc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b6:	4a14      	ldr	r2, [pc, #80]	; (8008108 <USBH_MSC_DecodeCSW+0x84>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d11d      	bne.n	80080f8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d119      	bne.n	80080fc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]
 80080d6:	e011      	b.n	80080fc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d102      	bne.n	80080e8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
 80080e6:	e009      	b.n	80080fc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d104      	bne.n	80080fc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80080f2:	2302      	movs	r3, #2
 80080f4:	73fb      	strb	r3, [r7, #15]
 80080f6:	e001      	b.n	80080fc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80080f8:	2302      	movs	r3, #2
 80080fa:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	53425355 	.word	0x53425355

0800810c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008118:	2302      	movs	r3, #2
 800811a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800812c:	2b01      	cmp	r3, #1
 800812e:	d002      	beq.n	8008136 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008130:	2b02      	cmp	r3, #2
 8008132:	d021      	beq.n	8008178 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008134:	e028      	b.n	8008188 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	220a      	movs	r2, #10
 8008148:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	3363      	adds	r3, #99	; 0x63
 8008150:	2210      	movs	r2, #16
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f004 fcec 	bl	800cb32 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2202      	movs	r2, #2
 800816e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008172:	2301      	movs	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
      break;
 8008176:	e007      	b.n	8008188 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fd83 	bl	8007c88 <USBH_MSC_BOT_Process>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	bf00      	nop
  }

  return error;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b086      	sub	sp, #24
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	460b      	mov	r3, r1
 800819c:	607a      	str	r2, [r7, #4]
 800819e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80081a0:	2301      	movs	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d002      	beq.n	80081be <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d027      	beq.n	800820c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80081bc:	e05f      	b.n	800827e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2208      	movs	r2, #8
 80081c2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	220a      	movs	r2, #10
 80081d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3363      	adds	r3, #99	; 0x63
 80081d8:	2210      	movs	r2, #16
 80081da:	2100      	movs	r1, #0
 80081dc:	4618      	mov	r0, r3
 80081de:	f004 fca8 	bl	800cb32 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2225      	movs	r2, #37	; 0x25
 80081e6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2202      	movs	r2, #2
 80081f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f103 0210 	add.w	r2, r3, #16
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008206:	2301      	movs	r3, #1
 8008208:	75fb      	strb	r3, [r7, #23]
      break;
 800820a:	e038      	b.n	800827e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	4619      	mov	r1, r3
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff fd39 	bl	8007c88 <USBH_MSC_BOT_Process>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d12d      	bne.n	800827c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008226:	3303      	adds	r3, #3
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008232:	3302      	adds	r3, #2
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	3301      	adds	r3, #1
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008246:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	061b      	lsls	r3, r3, #24
 8008252:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800825e:	3307      	adds	r3, #7
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b29a      	uxth	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800826a:	3306      	adds	r3, #6
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b29b      	uxth	r3, r3
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	b29b      	uxth	r3, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	809a      	strh	r2, [r3, #4]
      break;
 800827c:	bf00      	nop
  }

  return error;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	460b      	mov	r3, r1
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008296:	2302      	movs	r3, #2
 8008298:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d002      	beq.n	80082b4 <USBH_MSC_SCSI_Inquiry+0x2c>
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d03d      	beq.n	800832e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80082b2:	e089      	b.n	80083c8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2224      	movs	r2, #36	; 0x24
 80082b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	220a      	movs	r2, #10
 80082c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	3363      	adds	r3, #99	; 0x63
 80082ce:	220a      	movs	r2, #10
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f004 fc2d 	bl	800cb32 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2212      	movs	r2, #18
 80082dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	015b      	lsls	r3, r3, #5
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2224      	movs	r2, #36	; 0x24
 8008300:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f103 0210 	add.w	r2, r3, #16
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008328:	2301      	movs	r3, #1
 800832a:	75fb      	strb	r3, [r7, #23]
      break;
 800832c:	e04c      	b.n	80083c8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800832e:	7afb      	ldrb	r3, [r7, #11]
 8008330:	4619      	mov	r1, r3
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fca8 	bl	8007c88 <USBH_MSC_BOT_Process>
 8008338:	4603      	mov	r3, r0
 800833a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d141      	bne.n	80083c6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008342:	2222      	movs	r2, #34	; 0x22
 8008344:	2100      	movs	r1, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f004 fbf3 	bl	800cb32 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008374:	3301      	adds	r3, #1
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	b25b      	sxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	da03      	bge.n	8008386 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	709a      	strb	r2, [r3, #2]
 8008384:	e002      	b.n	800838c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	1cd8      	adds	r0, r3, #3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008396:	3308      	adds	r3, #8
 8008398:	2208      	movs	r2, #8
 800839a:	4619      	mov	r1, r3
 800839c:	f004 fbbe 	bl	800cb1c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 000c 	add.w	r0, r3, #12
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ac:	3310      	adds	r3, #16
 80083ae:	2210      	movs	r2, #16
 80083b0:	4619      	mov	r1, r3
 80083b2:	f004 fbb3 	bl	800cb1c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	331d      	adds	r3, #29
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80083c0:	3220      	adds	r2, #32
 80083c2:	6812      	ldr	r2, [r2, #0]
 80083c4:	601a      	str	r2, [r3, #0]
      break;
 80083c6:	bf00      	nop
  }

  return error;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b086      	sub	sp, #24
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	460b      	mov	r3, r1
 80083dc:	607a      	str	r2, [r7, #4]
 80083de:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80083e0:	2302      	movs	r3, #2
 80083e2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d002      	beq.n	80083fe <USBH_MSC_SCSI_RequestSense+0x2c>
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d03d      	beq.n	8008478 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80083fc:	e05d      	b.n	80084ba <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	220e      	movs	r2, #14
 8008402:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2280      	movs	r2, #128	; 0x80
 8008408:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	220a      	movs	r2, #10
 8008410:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	3363      	adds	r3, #99	; 0x63
 8008418:	2210      	movs	r2, #16
 800841a:	2100      	movs	r1, #0
 800841c:	4618      	mov	r0, r3
 800841e:	f004 fb88 	bl	800cb32 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2203      	movs	r2, #3
 8008426:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	015b      	lsls	r3, r3, #5
 800842e:	b2da      	uxtb	r2, r3
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	220e      	movs	r2, #14
 800844a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2202      	movs	r2, #2
 8008462:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f103 0210 	add.w	r2, r3, #16
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008472:	2301      	movs	r3, #1
 8008474:	75fb      	strb	r3, [r7, #23]
      break;
 8008476:	e020      	b.n	80084ba <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	4619      	mov	r1, r3
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fc03 	bl	8007c88 <USBH_MSC_BOT_Process>
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008492:	3302      	adds	r3, #2
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	b2da      	uxtb	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a6:	7b1a      	ldrb	r2, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b2:	7b5a      	ldrb	r2, [r3, #13]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	709a      	strb	r2, [r3, #2]
      break;
 80084b8:	bf00      	nop
  }

  return error;
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	607a      	str	r2, [r7, #4]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	460b      	mov	r3, r1
 80084d2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80084d4:	2302      	movs	r3, #2
 80084d6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d002      	beq.n	80084f2 <USBH_MSC_SCSI_Write+0x2e>
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d047      	beq.n	8008580 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80084f0:	e04e      	b.n	8008590 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80084f8:	461a      	mov	r2, r3
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	fb03 f202 	mul.w	r2, r3, r2
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	220a      	movs	r2, #10
 8008510:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	3363      	adds	r3, #99	; 0x63
 8008518:	2210      	movs	r2, #16
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f004 fb08 	bl	800cb32 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	222a      	movs	r2, #42	; 0x2a
 8008526:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800852a:	79fa      	ldrb	r2, [r7, #7]
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008532:	79ba      	ldrb	r2, [r7, #6]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800853a:	797a      	ldrb	r2, [r7, #5]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008542:	1d3b      	adds	r3, r7, #4
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800854c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008556:	f107 0320 	add.w	r3, r7, #32
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2202      	movs	r2, #2
 800856e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800857a:	2301      	movs	r3, #1
 800857c:	75fb      	strb	r3, [r7, #23]
      break;
 800857e:	e007      	b.n	8008590 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008580:	7afb      	ldrb	r3, [r7, #11]
 8008582:	4619      	mov	r1, r3
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff fb7f 	bl	8007c88 <USBH_MSC_BOT_Process>
 800858a:	4603      	mov	r3, r0
 800858c:	75fb      	strb	r3, [r7, #23]
      break;
 800858e:	bf00      	nop
  }

  return error;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	60f8      	str	r0, [r7, #12]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	460b      	mov	r3, r1
 80085a8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80085aa:	2302      	movs	r3, #2
 80085ac:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d002      	beq.n	80085c8 <USBH_MSC_SCSI_Read+0x2e>
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d047      	beq.n	8008656 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80085c6:	e04e      	b.n	8008666 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80085ce:	461a      	mov	r2, r3
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	fb03 f202 	mul.w	r2, r3, r2
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2280      	movs	r2, #128	; 0x80
 80085de:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	220a      	movs	r2, #10
 80085e6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3363      	adds	r3, #99	; 0x63
 80085ee:	2210      	movs	r2, #16
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f004 fa9d 	bl	800cb32 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	2228      	movs	r2, #40	; 0x28
 80085fc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008600:	79fa      	ldrb	r2, [r7, #7]
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008608:	79ba      	ldrb	r2, [r7, #6]
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008610:	797a      	ldrb	r2, [r7, #5]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008618:	1d3b      	adds	r3, r7, #4
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008622:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800862c:	f107 0320 	add.w	r3, r7, #32
 8008630:	781a      	ldrb	r2, [r3, #0]
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008650:	2301      	movs	r3, #1
 8008652:	75fb      	strb	r3, [r7, #23]
      break;
 8008654:	e007      	b.n	8008666 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008656:	7afb      	ldrb	r3, [r7, #11]
 8008658:	4619      	mov	r1, r3
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fb14 	bl	8007c88 <USBH_MSC_BOT_Process>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]
      break;
 8008664:	bf00      	nop
  }

  return error;
 8008666:	7dfb      	ldrb	r3, [r7, #23]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4613      	mov	r3, r2
 800867c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008684:	2302      	movs	r3, #2
 8008686:	e029      	b.n	80086dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	79fa      	ldrb	r2, [r7, #7]
 800868c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f81f 	bl	80086e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f003 ffbf 	bl	800c658 <USBH_LL_Init>

  return USBH_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e009      	b.n	800870a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	33e0      	adds	r3, #224	; 0xe0
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3301      	adds	r3, #1
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b0e      	cmp	r3, #14
 800870e:	d9f2      	bls.n	80086f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e009      	b.n	800872a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3301      	adds	r3, #1
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008730:	d3f1      	bcc.n	8008716 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2240      	movs	r2, #64	; 0x40
 8008756:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d016      	beq.n	80087ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10e      	bne.n	80087c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80087b0:	1c59      	adds	r1, r3, #1
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	33de      	adds	r3, #222	; 0xde
 80087bc:	6839      	ldr	r1, [r7, #0]
 80087be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	e004      	b.n	80087d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80087c8:	2302      	movs	r3, #2
 80087ca:	73fb      	strb	r3, [r7, #15]
 80087cc:	e001      	b.n	80087d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80087ce:	2302      	movs	r3, #2
 80087d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80087f6:	78fa      	ldrb	r2, [r7, #3]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d204      	bcs.n	8008806 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008804:	e001      	b.n	800880a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008806:	2302      	movs	r3, #2
 8008808:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	461a      	mov	r2, r3
 8008826:	4603      	mov	r3, r0
 8008828:	70fb      	strb	r3, [r7, #3]
 800882a:	460b      	mov	r3, r1
 800882c:	70bb      	strb	r3, [r7, #2]
 800882e:	4613      	mov	r3, r2
 8008830:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008840:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008842:	e025      	b.n	8008890 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	221a      	movs	r2, #26
 8008848:	fb02 f303 	mul.w	r3, r2, r3
 800884c:	3308      	adds	r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	3302      	adds	r3, #2
 8008854:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	795b      	ldrb	r3, [r3, #5]
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	429a      	cmp	r2, r3
 800885e:	d002      	beq.n	8008866 <USBH_FindInterface+0x4e>
 8008860:	78fb      	ldrb	r3, [r7, #3]
 8008862:	2bff      	cmp	r3, #255	; 0xff
 8008864:	d111      	bne.n	800888a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800886a:	78ba      	ldrb	r2, [r7, #2]
 800886c:	429a      	cmp	r2, r3
 800886e:	d002      	beq.n	8008876 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008870:	78bb      	ldrb	r3, [r7, #2]
 8008872:	2bff      	cmp	r3, #255	; 0xff
 8008874:	d109      	bne.n	800888a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800887a:	787a      	ldrb	r2, [r7, #1]
 800887c:	429a      	cmp	r2, r3
 800887e:	d002      	beq.n	8008886 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008880:	787b      	ldrb	r3, [r7, #1]
 8008882:	2bff      	cmp	r3, #255	; 0xff
 8008884:	d101      	bne.n	800888a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	e006      	b.n	8008898 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	3301      	adds	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d9d6      	bls.n	8008844 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008896:	23ff      	movs	r3, #255	; 0xff
}
 8008898:	4618      	mov	r0, r3
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f003 ff0f 	bl	800c6d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80088b2:	2101      	movs	r1, #1
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f004 f826 	bl	800c906 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af04      	add	r7, sp, #16
 80088ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d102      	bne.n	80088e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2203      	movs	r2, #3
 80088e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b0b      	cmp	r3, #11
 80088ee:	f200 81b3 	bhi.w	8008c58 <USBH_Process+0x394>
 80088f2:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <USBH_Process+0x34>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	08008929 	.word	0x08008929
 80088fc:	0800895b 	.word	0x0800895b
 8008900:	080089c3 	.word	0x080089c3
 8008904:	08008bf3 	.word	0x08008bf3
 8008908:	08008c59 	.word	0x08008c59
 800890c:	08008a67 	.word	0x08008a67
 8008910:	08008b99 	.word	0x08008b99
 8008914:	08008a9d 	.word	0x08008a9d
 8008918:	08008abd 	.word	0x08008abd
 800891c:	08008add 	.word	0x08008add
 8008920:	08008b0b 	.word	0x08008b0b
 8008924:	08008bdb 	.word	0x08008bdb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8193 	beq.w	8008c5c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800893c:	20c8      	movs	r0, #200	; 0xc8
 800893e:	f004 f85f 	bl	800ca00 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f003 ff1f 	bl	800c786 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008958:	e180      	b.n	8008c5c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008960:	2b01      	cmp	r3, #1
 8008962:	d107      	bne.n	8008974 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008972:	e182      	b.n	8008c7a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800897a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800897e:	d914      	bls.n	80089aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008986:	3301      	adds	r3, #1
 8008988:	b2da      	uxtb	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008996:	2b03      	cmp	r3, #3
 8008998:	d903      	bls.n	80089a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	220d      	movs	r2, #13
 800899e:	701a      	strb	r2, [r3, #0]
      break;
 80089a0:	e16b      	b.n	8008c7a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
      break;
 80089a8:	e167      	b.n	8008c7a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80089b0:	f103 020a 	add.w	r2, r3, #10
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80089ba:	200a      	movs	r0, #10
 80089bc:	f004 f820 	bl	800ca00 <USBH_Delay>
      break;
 80089c0:	e15b      	b.n	8008c7a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089d2:	2104      	movs	r1, #4
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80089d8:	2064      	movs	r0, #100	; 0x64
 80089da:	f004 f811 	bl	800ca00 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f003 feac 	bl	800c73c <USBH_LL_GetSpeed>
 80089e4:	4603      	mov	r3, r0
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2205      	movs	r2, #5
 80089f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80089f4:	2100      	movs	r1, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f931 	bl	8009c5e <USBH_AllocPipe>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a04:	2180      	movs	r1, #128	; 0x80
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 f929 	bl	8009c5e <USBH_AllocPipe>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	461a      	mov	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7919      	ldrb	r1, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a28:	b292      	uxth	r2, r2
 8008a2a:	9202      	str	r2, [sp, #8]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	9201      	str	r2, [sp, #4]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	4603      	mov	r3, r0
 8008a34:	2280      	movs	r2, #128	; 0x80
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 f8e2 	bl	8009c00 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	7959      	ldrb	r1, [r3, #5]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a50:	b292      	uxth	r2, r2
 8008a52:	9202      	str	r2, [sp, #8]
 8008a54:	2200      	movs	r2, #0
 8008a56:	9201      	str	r2, [sp, #4]
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 f8ce 	bl	8009c00 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a64:	e109      	b.n	8008c7a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f90c 	bl	8008c84 <USBH_HandleEnum>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f040 80f3 	bne.w	8008c60 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d103      	bne.n	8008a94 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2208      	movs	r2, #8
 8008a90:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008a92:	e0e5      	b.n	8008c60 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2207      	movs	r2, #7
 8008a98:	701a      	strb	r2, [r3, #0]
      break;
 8008a9a:	e0e1      	b.n	8008c60 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 80de 	beq.w	8008c64 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aae:	2101      	movs	r1, #1
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2208      	movs	r2, #8
 8008ab8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008aba:	e0d3      	b.n	8008c64 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fc20 	bl	800930c <USBH_SetCfg>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 80ca 	bne.w	8008c68 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2209      	movs	r2, #9
 8008ad8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ada:	e0c5      	b.n	8008c68 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008ae2:	f003 0320 	and.w	r3, r3, #32
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00b      	beq.n	8008b02 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008aea:	2101      	movs	r1, #1
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc30 	bl	8009352 <USBH_SetFeature>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f040 80b9 	bne.w	8008c6c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	220a      	movs	r2, #10
 8008afe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b00:	e0b4      	b.n	8008c6c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	220a      	movs	r2, #10
 8008b06:	701a      	strb	r2, [r3, #0]
      break;
 8008b08:	e0b0      	b.n	8008c6c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 80ad 	beq.w	8008c70 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
 8008b22:	e016      	b.n	8008b52 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008b24:	7bfa      	ldrb	r2, [r7, #15]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32de      	adds	r2, #222	; 0xde
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	791a      	ldrb	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d108      	bne.n	8008b4c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008b3a:	7bfa      	ldrb	r2, [r7, #15]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32de      	adds	r2, #222	; 0xde
 8008b40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008b4a:	e005      	b.n	8008b58 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	73fb      	strb	r3, [r7, #15]
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0e5      	beq.n	8008b24 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d016      	beq.n	8008b90 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d109      	bne.n	8008b88 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2206      	movs	r2, #6
 8008b78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b80:	2103      	movs	r1, #3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b86:	e073      	b.n	8008c70 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	220d      	movs	r2, #13
 8008b8c:	701a      	strb	r2, [r3, #0]
      break;
 8008b8e:	e06f      	b.n	8008c70 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	220d      	movs	r2, #13
 8008b94:	701a      	strb	r2, [r3, #0]
      break;
 8008b96:	e06b      	b.n	8008c70 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d017      	beq.n	8008bd2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d103      	bne.n	8008bc2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	220b      	movs	r2, #11
 8008bbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bc0:	e058      	b.n	8008c74 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d154      	bne.n	8008c74 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	220d      	movs	r2, #13
 8008bce:	701a      	strb	r2, [r3, #0]
      break;
 8008bd0:	e050      	b.n	8008c74 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	220d      	movs	r2, #13
 8008bd6:	701a      	strb	r2, [r3, #0]
      break;
 8008bd8:	e04c      	b.n	8008c74 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d049      	beq.n	8008c78 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
      }
      break;
 8008bf0:	e042      	b.n	8008c78 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff fd72 	bl	80086e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c2e:	2105      	movs	r1, #5
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff fe2b 	bl	80088a4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c4e:	e014      	b.n	8008c7a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f003 fd3d 	bl	800c6d0 <USBH_LL_Start>
      break;
 8008c56:	e010      	b.n	8008c7a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008c58:	bf00      	nop
 8008c5a:	e00e      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c5c:	bf00      	nop
 8008c5e:	e00c      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c60:	bf00      	nop
 8008c62:	e00a      	b.n	8008c7a <USBH_Process+0x3b6>
    break;
 8008c64:	bf00      	nop
 8008c66:	e008      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c68:	bf00      	nop
 8008c6a:	e006      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e004      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c70:	bf00      	nop
 8008c72:	e002      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c74:	bf00      	nop
 8008c76:	e000      	b.n	8008c7a <USBH_Process+0x3b6>
      break;
 8008c78:	bf00      	nop
  }
  return USBH_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af04      	add	r7, sp, #16
 8008c8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008c90:	2301      	movs	r3, #1
 8008c92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	785b      	ldrb	r3, [r3, #1]
 8008c98:	2b07      	cmp	r3, #7
 8008c9a:	f200 81c1 	bhi.w	8009020 <USBH_HandleEnum+0x39c>
 8008c9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <USBH_HandleEnum+0x20>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008d83 	.word	0x08008d83
 8008cac:	08008ded 	.word	0x08008ded
 8008cb0:	08008e7b 	.word	0x08008e7b
 8008cb4:	08008ee5 	.word	0x08008ee5
 8008cb8:	08008f55 	.word	0x08008f55
 8008cbc:	08008f9b 	.word	0x08008f9b
 8008cc0:	08008fe1 	.word	0x08008fe1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008cc4:	2108      	movs	r1, #8
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa50 	bl	800916c <USBH_Get_DevDesc>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d130      	bne.n	8008d38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	7919      	ldrb	r1, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008cfa:	b292      	uxth	r2, r2
 8008cfc:	9202      	str	r2, [sp, #8]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	9201      	str	r2, [sp, #4]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	4603      	mov	r3, r0
 8008d06:	2280      	movs	r2, #128	; 0x80
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 ff79 	bl	8009c00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7959      	ldrb	r1, [r3, #5]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d22:	b292      	uxth	r2, r2
 8008d24:	9202      	str	r2, [sp, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	9201      	str	r2, [sp, #4]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2200      	movs	r2, #0
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 ff65 	bl	8009c00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d36:	e175      	b.n	8009024 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	f040 8172 	bne.w	8009024 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d46:	3301      	adds	r3, #1
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d903      	bls.n	8008d62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	220d      	movs	r2, #13
 8008d5e:	701a      	strb	r2, [r3, #0]
      break;
 8008d60:	e160      	b.n	8009024 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	795b      	ldrb	r3, [r3, #5]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 ff99 	bl	8009ca0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	791b      	ldrb	r3, [r3, #4]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 ff93 	bl	8009ca0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
      break;
 8008d80:	e150      	b.n	8009024 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008d82:	2112      	movs	r1, #18
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9f1 	bl	800916c <USBH_Get_DevDesc>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d9a:	e145      	b.n	8009028 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	f040 8142 	bne.w	8009028 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008daa:	3301      	adds	r3, #1
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d903      	bls.n	8008dc6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	220d      	movs	r2, #13
 8008dc2:	701a      	strb	r2, [r3, #0]
      break;
 8008dc4:	e130      	b.n	8009028 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	795b      	ldrb	r3, [r3, #5]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 ff67 	bl	8009ca0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	791b      	ldrb	r3, [r3, #4]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 ff61 	bl	8009ca0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
      break;
 8008dea:	e11d      	b.n	8009028 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008dec:	2101      	movs	r1, #1
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa68 	bl	80092c4 <USBH_SetAddress>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d132      	bne.n	8008e64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008dfe:	2002      	movs	r0, #2
 8008e00:	f003 fdfe 	bl	800ca00 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2203      	movs	r2, #3
 8008e10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7919      	ldrb	r1, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008e26:	b292      	uxth	r2, r2
 8008e28:	9202      	str	r2, [sp, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	9201      	str	r2, [sp, #4]
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	4603      	mov	r3, r0
 8008e32:	2280      	movs	r2, #128	; 0x80
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fee3 	bl	8009c00 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	7959      	ldrb	r1, [r3, #5]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	9202      	str	r2, [sp, #8]
 8008e52:	2200      	movs	r2, #0
 8008e54:	9201      	str	r2, [sp, #4]
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fecf 	bl	8009c00 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e62:	e0e3      	b.n	800902c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	f040 80e0 	bne.w	800902c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	220d      	movs	r2, #13
 8008e70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	705a      	strb	r2, [r3, #1]
      break;
 8008e78:	e0d8      	b.n	800902c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008e7a:	2109      	movs	r1, #9
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f99d 	bl	80091bc <USBH_Get_CfgDesc>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e92:	e0cd      	b.n	8009030 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	f040 80ca 	bne.w	8009030 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d903      	bls.n	8008ebe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	220d      	movs	r2, #13
 8008eba:	701a      	strb	r2, [r3, #0]
      break;
 8008ebc:	e0b8      	b.n	8009030 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	795b      	ldrb	r3, [r3, #5]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 feeb 	bl	8009ca0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	791b      	ldrb	r3, [r3, #4]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fee5 	bl	8009ca0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]
      break;
 8008ee2:	e0a5      	b.n	8009030 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f965 	bl	80091bc <USBH_Get_CfgDesc>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d103      	bne.n	8008f04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2205      	movs	r2, #5
 8008f00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f02:	e097      	b.n	8009034 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	f040 8094 	bne.w	8009034 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f12:	3301      	adds	r3, #1
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d903      	bls.n	8008f2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	220d      	movs	r2, #13
 8008f2a:	701a      	strb	r2, [r3, #0]
      break;
 8008f2c:	e082      	b.n	8009034 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	795b      	ldrb	r3, [r3, #5]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 feb3 	bl	8009ca0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	791b      	ldrb	r3, [r3, #4]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fead 	bl	8009ca0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
      break;
 8008f52:	e06f      	b.n	8009034 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d019      	beq.n	8008f92 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f6a:	23ff      	movs	r3, #255	; 0xff
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f949 	bl	8009204 <USBH_Get_StringDesc>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2206      	movs	r2, #6
 8008f80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f82:	e059      	b.n	8009038 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d156      	bne.n	8009038 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	705a      	strb	r2, [r3, #1]
      break;
 8008f90:	e052      	b.n	8009038 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2206      	movs	r2, #6
 8008f96:	705a      	strb	r2, [r3, #1]
      break;
 8008f98:	e04e      	b.n	8009038 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d019      	beq.n	8008fd8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008fb0:	23ff      	movs	r3, #255	; 0xff
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f926 	bl	8009204 <USBH_Get_StringDesc>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d103      	bne.n	8008fca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2207      	movs	r2, #7
 8008fc6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008fc8:	e038      	b.n	800903c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d135      	bne.n	800903c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2207      	movs	r2, #7
 8008fd4:	705a      	strb	r2, [r3, #1]
      break;
 8008fd6:	e031      	b.n	800903c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2207      	movs	r2, #7
 8008fdc:	705a      	strb	r2, [r3, #1]
      break;
 8008fde:	e02d      	b.n	800903c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d017      	beq.n	800901a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ff6:	23ff      	movs	r3, #255	; 0xff
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f903 	bl	8009204 <USBH_Get_StringDesc>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800900c:	e018      	b.n	8009040 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d115      	bne.n	8009040 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	e012      	b.n	8009040 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e00f      	b.n	8009040 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009020:	bf00      	nop
 8009022:	e00e      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 8009024:	bf00      	nop
 8009026:	e00c      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 8009028:	bf00      	nop
 800902a:	e00a      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 800902c:	bf00      	nop
 800902e:	e008      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 8009030:	bf00      	nop
 8009032:	e006      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <USBH_HandleEnum+0x3be>
      break;
 8009040:	bf00      	nop
  }
  return Status;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b082      	sub	sp, #8
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f804 	bl	800908e <USBH_HandleSof>
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b0b      	cmp	r3, #11
 800909e:	d10a      	bne.n	80090b6 <USBH_HandleSof+0x28>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
  }
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80090ce:	bf00      	nop
}
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80090ea:	bf00      	nop
}
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f003 fade 	bl	800c706 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	791b      	ldrb	r3, [r3, #4]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fda5 	bl	8009ca0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	795b      	ldrb	r3, [r3, #5]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fd9f 	bl	8009ca0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af02      	add	r7, sp, #8
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	b29b      	uxth	r3, r3
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800918a:	2100      	movs	r1, #0
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f864 	bl	800925a <USBH_GetDescriptor>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f203 3026 	addw	r0, r3, #806	; 0x326
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	b292      	uxth	r2, r2
 80091ac:	4619      	mov	r1, r3
 80091ae:	f000 f918 	bl	80093e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	331c      	adds	r3, #28
 80091cc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80091ce:	887b      	ldrh	r3, [r7, #2]
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091d8:	2100      	movs	r1, #0
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f83d 	bl	800925a <USBH_GetDescriptor>
 80091e0:	4603      	mov	r3, r0
 80091e2:	72fb      	strb	r3, [r7, #11]
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d107      	bne.n	80091fa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80091f0:	887a      	ldrh	r2, [r7, #2]
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f964 	bl	80094c2 <USBH_ParseCfgDesc>
  }

  return status;
 80091fa:	7afb      	ldrb	r3, [r7, #11]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af02      	add	r7, sp, #8
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	461a      	mov	r2, r3
 8009210:	460b      	mov	r3, r1
 8009212:	72fb      	strb	r3, [r7, #11]
 8009214:	4613      	mov	r3, r2
 8009216:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009220:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009228:	893b      	ldrh	r3, [r7, #8]
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	460b      	mov	r3, r1
 800922e:	2100      	movs	r1, #0
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f812 	bl	800925a <USBH_GetDescriptor>
 8009236:	4603      	mov	r3, r0
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d107      	bne.n	8009250 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009246:	893a      	ldrh	r2, [r7, #8]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fa37 	bl	80096be <USBH_ParseStringDesc>
  }

  return status;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	72fb      	strb	r3, [r7, #11]
 8009268:	4613      	mov	r3, r2
 800926a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	789b      	ldrb	r3, [r3, #2]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d11c      	bne.n	80092ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009274:	7afb      	ldrb	r3, [r7, #11]
 8009276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800927a:	b2da      	uxtb	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2206      	movs	r2, #6
 8009284:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	893a      	ldrh	r2, [r7, #8]
 800928a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800928c:	893b      	ldrh	r3, [r7, #8]
 800928e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009296:	d104      	bne.n	80092a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f240 4209 	movw	r2, #1033	; 0x409
 800929e:	829a      	strh	r2, [r3, #20]
 80092a0:	e002      	b.n	80092a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8b3a      	ldrh	r2, [r7, #24]
 80092ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80092ae:	8b3b      	ldrh	r3, [r7, #24]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6879      	ldr	r1, [r7, #4]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 fa50 	bl	800975a <USBH_CtlReq>
 80092ba:	4603      	mov	r3, r0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	789b      	ldrb	r3, [r3, #2]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d10f      	bne.n	80092f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80092f8:	2200      	movs	r2, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fa2c 	bl	800975a <USBH_CtlReq>
 8009302:	4603      	mov	r3, r0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	789b      	ldrb	r3, [r3, #2]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10e      	bne.n	800933e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2209      	movs	r2, #9
 800932a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	887a      	ldrh	r2, [r7, #2]
 8009330:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fa09 	bl	800975a <USBH_CtlReq>
 8009348:	4603      	mov	r3, r0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	789b      	ldrb	r3, [r3, #2]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d10f      	bne.n	8009386 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2203      	movs	r2, #3
 8009370:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	b29a      	uxth	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009386:	2200      	movs	r2, #0
 8009388:	2100      	movs	r1, #0
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f9e5 	bl	800975a <USBH_CtlReq>
 8009390:	4603      	mov	r3, r0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	789b      	ldrb	r3, [r3, #2]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d10f      	bne.n	80093ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9c1 	bl	800975a <USBH_CtlReq>
 80093d8:	4603      	mov	r3, r0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	4613      	mov	r3, r2
 80093ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	781a      	ldrb	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	785a      	ldrb	r2, [r3, #1]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	3302      	adds	r3, #2
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	b29a      	uxth	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	3303      	adds	r3, #3
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	021b      	lsls	r3, r3, #8
 8009412:	b29b      	uxth	r3, r3
 8009414:	4313      	orrs	r3, r2
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	791a      	ldrb	r2, [r3, #4]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	795a      	ldrb	r2, [r3, #5]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	799a      	ldrb	r2, [r3, #6]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	79da      	ldrb	r2, [r3, #7]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	2b08      	cmp	r3, #8
 8009440:	d939      	bls.n	80094b6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	3308      	adds	r3, #8
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	b29a      	uxth	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	3309      	adds	r3, #9
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b29b      	uxth	r3, r3
 8009452:	021b      	lsls	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	4313      	orrs	r3, r2
 8009458:	b29a      	uxth	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	330a      	adds	r3, #10
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	b29a      	uxth	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	330b      	adds	r3, #11
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	b29b      	uxth	r3, r3
 8009472:	4313      	orrs	r3, r2
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	330c      	adds	r3, #12
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	b29a      	uxth	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	330d      	adds	r3, #13
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b29b      	uxth	r3, r3
 800948e:	4313      	orrs	r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	7b9a      	ldrb	r2, [r3, #14]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	7bda      	ldrb	r2, [r3, #15]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	7c1a      	ldrb	r2, [r3, #16]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	7c5a      	ldrb	r2, [r3, #17]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	745a      	strb	r2, [r3, #17]
  }
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b08a      	sub	sp, #40	; 0x28
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	4613      	mov	r3, r2
 80094ce:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	781a      	ldrb	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	785a      	ldrb	r2, [r3, #1]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3302      	adds	r3, #2
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3303      	adds	r3, #3
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	b29b      	uxth	r3, r3
 8009508:	4313      	orrs	r3, r2
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	791a      	ldrb	r2, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	795a      	ldrb	r2, [r3, #5]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	799a      	ldrb	r2, [r3, #6]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	79da      	ldrb	r2, [r3, #7]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	7a1a      	ldrb	r2, [r3, #8]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	2b09      	cmp	r3, #9
 800953c:	d95f      	bls.n	80095fe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800953e:	2309      	movs	r3, #9
 8009540:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009546:	e051      	b.n	80095ec <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009548:	f107 0316 	add.w	r3, r7, #22
 800954c:	4619      	mov	r1, r3
 800954e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009550:	f000 f8e8 	bl	8009724 <USBH_GetNextDesc>
 8009554:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	2b04      	cmp	r3, #4
 800955c:	d146      	bne.n	80095ec <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800955e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009562:	221a      	movs	r2, #26
 8009564:	fb02 f303 	mul.w	r3, r2, r3
 8009568:	3308      	adds	r3, #8
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	3302      	adds	r3, #2
 8009570:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009574:	69f8      	ldr	r0, [r7, #28]
 8009576:	f000 f846 	bl	8009606 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009580:	2300      	movs	r3, #0
 8009582:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009584:	e022      	b.n	80095cc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009586:	f107 0316 	add.w	r3, r7, #22
 800958a:	4619      	mov	r1, r3
 800958c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800958e:	f000 f8c9 	bl	8009724 <USBH_GetNextDesc>
 8009592:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	2b05      	cmp	r3, #5
 800959a:	d117      	bne.n	80095cc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800959c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80095a4:	3201      	adds	r2, #1
 80095a6:	00d2      	lsls	r2, r2, #3
 80095a8:	211a      	movs	r1, #26
 80095aa:	fb01 f303 	mul.w	r3, r1, r3
 80095ae:	4413      	add	r3, r2
 80095b0:	3308      	adds	r3, #8
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4413      	add	r3, r2
 80095b6:	3304      	adds	r3, #4
 80095b8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80095ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095bc:	69b8      	ldr	r0, [r7, #24]
 80095be:	f000 f851 	bl	8009664 <USBH_ParseEPDesc>
            ep_ix++;
 80095c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80095c6:	3301      	adds	r3, #1
 80095c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	791b      	ldrb	r3, [r3, #4]
 80095d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d204      	bcs.n	80095e2 <USBH_ParseCfgDesc+0x120>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	885a      	ldrh	r2, [r3, #2]
 80095dc:	8afb      	ldrh	r3, [r7, #22]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d8d1      	bhi.n	8009586 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80095e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095e6:	3301      	adds	r3, #1
 80095e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d804      	bhi.n	80095fe <USBH_ParseCfgDesc+0x13c>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	885a      	ldrh	r2, [r3, #2]
 80095f8:	8afb      	ldrh	r3, [r7, #22]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d8a4      	bhi.n	8009548 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80095fe:	bf00      	nop
 8009600:	3728      	adds	r7, #40	; 0x28
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	785a      	ldrb	r2, [r3, #1]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	789a      	ldrb	r2, [r3, #2]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	78da      	ldrb	r2, [r3, #3]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	791a      	ldrb	r2, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	795a      	ldrb	r2, [r3, #5]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	799a      	ldrb	r2, [r3, #6]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	79da      	ldrb	r2, [r3, #7]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	7a1a      	ldrb	r2, [r3, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	721a      	strb	r2, [r3, #8]
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781a      	ldrb	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	785a      	ldrb	r2, [r3, #1]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	789a      	ldrb	r2, [r3, #2]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	78da      	ldrb	r2, [r3, #3]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	3304      	adds	r3, #4
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	b29a      	uxth	r2, r3
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	3305      	adds	r3, #5
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	b29b      	uxth	r3, r3
 800969e:	021b      	lsls	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	4313      	orrs	r3, r2
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	799a      	ldrb	r2, [r3, #6]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	719a      	strb	r2, [r3, #6]
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80096be:	b480      	push	{r7}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	4613      	mov	r3, r2
 80096ca:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d120      	bne.n	8009718 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	1e9a      	subs	r2, r3, #2
 80096dc:	88fb      	ldrh	r3, [r7, #6]
 80096de:	4293      	cmp	r3, r2
 80096e0:	bf28      	it	cs
 80096e2:	4613      	movcs	r3, r2
 80096e4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3302      	adds	r3, #2
 80096ea:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80096ec:	2300      	movs	r3, #0
 80096ee:	82fb      	strh	r3, [r7, #22]
 80096f0:	e00b      	b.n	800970a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80096f2:	8afb      	ldrh	r3, [r7, #22]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	3301      	adds	r3, #1
 8009702:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009704:	8afb      	ldrh	r3, [r7, #22]
 8009706:	3302      	adds	r3, #2
 8009708:	82fb      	strh	r3, [r7, #22]
 800970a:	8afa      	ldrh	r2, [r7, #22]
 800970c:	8abb      	ldrh	r3, [r7, #20]
 800970e:	429a      	cmp	r2, r3
 8009710:	d3ef      	bcc.n	80096f2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
  }
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	881a      	ldrh	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	4413      	add	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800974c:	68fb      	ldr	r3, [r7, #12]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	4613      	mov	r3, r2
 8009766:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009768:	2301      	movs	r3, #1
 800976a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	789b      	ldrb	r3, [r3, #2]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d002      	beq.n	800977a <USBH_CtlReq+0x20>
 8009774:	2b02      	cmp	r3, #2
 8009776:	d00f      	beq.n	8009798 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009778:	e027      	b.n	80097ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2202      	movs	r2, #2
 8009790:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009792:	2301      	movs	r3, #1
 8009794:	75fb      	strb	r3, [r7, #23]
      break;
 8009796:	e018      	b.n	80097ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 f81b 	bl	80097d4 <USBH_HandleControl>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <USBH_CtlReq+0x54>
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	d106      	bne.n	80097bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	761a      	strb	r2, [r3, #24]
      break;
 80097ba:	e005      	b.n	80097c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d102      	bne.n	80097c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	709a      	strb	r2, [r3, #2]
      break;
 80097c8:	bf00      	nop
  }
  return status;
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b086      	sub	sp, #24
 80097d8:	af02      	add	r7, sp, #8
 80097da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80097dc:	2301      	movs	r3, #1
 80097de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7e1b      	ldrb	r3, [r3, #24]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	2b0a      	cmp	r3, #10
 80097ec:	f200 8158 	bhi.w	8009aa0 <USBH_HandleControl+0x2cc>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <USBH_HandleControl+0x24>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009825 	.word	0x08009825
 80097fc:	0800983f 	.word	0x0800983f
 8009800:	080098a9 	.word	0x080098a9
 8009804:	080098cf 	.word	0x080098cf
 8009808:	08009907 	.word	0x08009907
 800980c:	08009933 	.word	0x08009933
 8009810:	08009985 	.word	0x08009985
 8009814:	080099a7 	.word	0x080099a7
 8009818:	080099e3 	.word	0x080099e3
 800981c:	08009a0b 	.word	0x08009a0b
 8009820:	08009a49 	.word	0x08009a49
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f103 0110 	add.w	r1, r3, #16
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	795b      	ldrb	r3, [r3, #5]
 800982e:	461a      	mov	r2, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f945 	bl	8009ac0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2202      	movs	r2, #2
 800983a:	761a      	strb	r2, [r3, #24]
      break;
 800983c:	e13b      	b.n	8009ab6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	795b      	ldrb	r3, [r3, #5]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f003 f84b 	bl	800c8e0 <USBH_LL_GetURBState>
 800984a:	4603      	mov	r3, r0
 800984c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d11e      	bne.n	8009892 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7c1b      	ldrb	r3, [r3, #16]
 8009858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800985c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	8adb      	ldrh	r3, [r3, #22]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009866:	7b7b      	ldrb	r3, [r7, #13]
 8009868:	2b80      	cmp	r3, #128	; 0x80
 800986a:	d103      	bne.n	8009874 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2203      	movs	r2, #3
 8009870:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009872:	e117      	b.n	8009aa4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2205      	movs	r2, #5
 8009878:	761a      	strb	r2, [r3, #24]
      break;
 800987a:	e113      	b.n	8009aa4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800987c:	7b7b      	ldrb	r3, [r7, #13]
 800987e:	2b80      	cmp	r3, #128	; 0x80
 8009880:	d103      	bne.n	800988a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2209      	movs	r2, #9
 8009886:	761a      	strb	r2, [r3, #24]
      break;
 8009888:	e10c      	b.n	8009aa4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2207      	movs	r2, #7
 800988e:	761a      	strb	r2, [r3, #24]
      break;
 8009890:	e108      	b.n	8009aa4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b04      	cmp	r3, #4
 8009896:	d003      	beq.n	80098a0 <USBH_HandleControl+0xcc>
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b02      	cmp	r3, #2
 800989c:	f040 8102 	bne.w	8009aa4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	220b      	movs	r2, #11
 80098a4:	761a      	strb	r2, [r3, #24]
      break;
 80098a6:	e0fd      	b.n	8009aa4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6899      	ldr	r1, [r3, #8]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	899a      	ldrh	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	791b      	ldrb	r3, [r3, #4]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f93c 	bl	8009b3e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2204      	movs	r2, #4
 80098ca:	761a      	strb	r2, [r3, #24]
      break;
 80098cc:	e0f3      	b.n	8009ab6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	791b      	ldrb	r3, [r3, #4]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f003 f803 	bl	800c8e0 <USBH_LL_GetURBState>
 80098da:	4603      	mov	r3, r0
 80098dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d102      	bne.n	80098ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2209      	movs	r2, #9
 80098e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	d102      	bne.n	80098f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80098f0:	2303      	movs	r3, #3
 80098f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098f4:	e0d8      	b.n	8009aa8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	f040 80d5 	bne.w	8009aa8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	220b      	movs	r2, #11
 8009902:	761a      	strb	r2, [r3, #24]
      break;
 8009904:	e0d0      	b.n	8009aa8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6899      	ldr	r1, [r3, #8]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	899a      	ldrh	r2, [r3, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7958      	ldrb	r0, [r3, #5]
 8009912:	2301      	movs	r3, #1
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4603      	mov	r3, r0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f8eb 	bl	8009af4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009924:	b29a      	uxth	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2206      	movs	r2, #6
 800992e:	761a      	strb	r2, [r3, #24]
      break;
 8009930:	e0c1      	b.n	8009ab6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	795b      	ldrb	r3, [r3, #5]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f002 ffd1 	bl	800c8e0 <USBH_LL_GetURBState>
 800993e:	4603      	mov	r3, r0
 8009940:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d103      	bne.n	8009950 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2207      	movs	r2, #7
 800994c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800994e:	e0ad      	b.n	8009aac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	2b05      	cmp	r3, #5
 8009954:	d105      	bne.n	8009962 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	220c      	movs	r2, #12
 800995a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800995c:	2303      	movs	r3, #3
 800995e:	73fb      	strb	r3, [r7, #15]
      break;
 8009960:	e0a4      	b.n	8009aac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d103      	bne.n	8009970 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2205      	movs	r2, #5
 800996c:	761a      	strb	r2, [r3, #24]
      break;
 800996e:	e09d      	b.n	8009aac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b04      	cmp	r3, #4
 8009974:	f040 809a 	bne.w	8009aac <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	220b      	movs	r2, #11
 800997c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800997e:	2302      	movs	r3, #2
 8009980:	73fb      	strb	r3, [r7, #15]
      break;
 8009982:	e093      	b.n	8009aac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	791b      	ldrb	r3, [r3, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	2100      	movs	r1, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8d6 	bl	8009b3e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009998:	b29a      	uxth	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2208      	movs	r2, #8
 80099a2:	761a      	strb	r2, [r3, #24]

      break;
 80099a4:	e087      	b.n	8009ab6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	791b      	ldrb	r3, [r3, #4]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 ff97 	bl	800c8e0 <USBH_LL_GetURBState>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099b6:	7bbb      	ldrb	r3, [r7, #14]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d105      	bne.n	80099c8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	220d      	movs	r2, #13
 80099c0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099c6:	e073      	b.n	8009ab0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80099c8:	7bbb      	ldrb	r3, [r7, #14]
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d103      	bne.n	80099d6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	220b      	movs	r2, #11
 80099d2:	761a      	strb	r2, [r3, #24]
      break;
 80099d4:	e06c      	b.n	8009ab0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
 80099d8:	2b05      	cmp	r3, #5
 80099da:	d169      	bne.n	8009ab0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80099dc:	2303      	movs	r3, #3
 80099de:	73fb      	strb	r3, [r7, #15]
      break;
 80099e0:	e066      	b.n	8009ab0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	795a      	ldrb	r2, [r3, #5]
 80099e6:	2301      	movs	r3, #1
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	4613      	mov	r3, r2
 80099ec:	2200      	movs	r2, #0
 80099ee:	2100      	movs	r1, #0
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f87f 	bl	8009af4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	220a      	movs	r2, #10
 8009a06:	761a      	strb	r2, [r3, #24]
      break;
 8009a08:	e055      	b.n	8009ab6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	795b      	ldrb	r3, [r3, #5]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f002 ff65 	bl	800c8e0 <USBH_LL_GetURBState>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d105      	bne.n	8009a2c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	220d      	movs	r2, #13
 8009a28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a2a:	e043      	b.n	8009ab4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d103      	bne.n	8009a3a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2209      	movs	r2, #9
 8009a36:	761a      	strb	r2, [r3, #24]
      break;
 8009a38:	e03c      	b.n	8009ab4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d139      	bne.n	8009ab4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	220b      	movs	r2, #11
 8009a44:	761a      	strb	r2, [r3, #24]
      break;
 8009a46:	e035      	b.n	8009ab4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7e5b      	ldrb	r3, [r3, #25]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	765a      	strb	r2, [r3, #25]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	7e5b      	ldrb	r3, [r3, #25]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d806      	bhi.n	8009a6a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a68:	e025      	b.n	8009ab6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a70:	2106      	movs	r1, #6
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	795b      	ldrb	r3, [r3, #5]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f90c 	bl	8009ca0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f906 	bl	8009ca0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a9e:	e00a      	b.n	8009ab6 <USBH_HandleControl+0x2e2>

    default:
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e008      	b.n	8009ab6 <USBH_HandleControl+0x2e2>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e006      	b.n	8009ab6 <USBH_HandleControl+0x2e2>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e004      	b.n	8009ab6 <USBH_HandleControl+0x2e2>
      break;
 8009aac:	bf00      	nop
 8009aae:	e002      	b.n	8009ab6 <USBH_HandleControl+0x2e2>
      break;
 8009ab0:	bf00      	nop
 8009ab2:	e000      	b.n	8009ab6 <USBH_HandleControl+0x2e2>
      break;
 8009ab4:	bf00      	nop
  }

  return status;
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af04      	add	r7, sp, #16
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4613      	mov	r3, r2
 8009acc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ace:	79f9      	ldrb	r1, [r7, #7]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	9302      	str	r3, [sp, #8]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	9301      	str	r3, [sp, #4]
 8009adc:	2300      	movs	r3, #0
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f002 feca 	bl	800c87e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af04      	add	r7, sp, #16
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	460b      	mov	r3, r1
 8009b04:	80fb      	strh	r3, [r7, #6]
 8009b06:	4613      	mov	r3, r2
 8009b08:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b18:	7979      	ldrb	r1, [r7, #5]
 8009b1a:	7e3b      	ldrb	r3, [r7, #24]
 8009b1c:	9303      	str	r3, [sp, #12]
 8009b1e:	88fb      	ldrh	r3, [r7, #6]
 8009b20:	9302      	str	r3, [sp, #8]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	2301      	movs	r3, #1
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f002 fea5 	bl	800c87e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b088      	sub	sp, #32
 8009b42:	af04      	add	r7, sp, #16
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	80fb      	strh	r3, [r7, #6]
 8009b50:	4613      	mov	r3, r2
 8009b52:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b54:	7979      	ldrb	r1, [r7, #5]
 8009b56:	2300      	movs	r3, #0
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	88fb      	ldrh	r3, [r7, #6]
 8009b5c:	9302      	str	r3, [sp, #8]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	2301      	movs	r3, #1
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	2300      	movs	r3, #0
 8009b68:	2201      	movs	r2, #1
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f002 fe87 	bl	800c87e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009b70:	2300      	movs	r3, #0

}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b088      	sub	sp, #32
 8009b7e:	af04      	add	r7, sp, #16
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	4611      	mov	r1, r2
 8009b86:	461a      	mov	r2, r3
 8009b88:	460b      	mov	r3, r1
 8009b8a:	80fb      	strh	r3, [r7, #6]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b9e:	7979      	ldrb	r1, [r7, #5]
 8009ba0:	7e3b      	ldrb	r3, [r7, #24]
 8009ba2:	9303      	str	r3, [sp, #12]
 8009ba4:	88fb      	ldrh	r3, [r7, #6]
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	9301      	str	r3, [sp, #4]
 8009bac:	2301      	movs	r3, #1
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f002 fe62 	bl	800c87e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af04      	add	r7, sp, #16
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	4611      	mov	r1, r2
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	80fb      	strh	r3, [r7, #6]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009bda:	7979      	ldrb	r1, [r7, #5]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	9302      	str	r3, [sp, #8]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	9301      	str	r3, [sp, #4]
 8009be8:	2301      	movs	r3, #1
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2302      	movs	r3, #2
 8009bee:	2201      	movs	r2, #1
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f002 fe44 	bl	800c87e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af04      	add	r7, sp, #16
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	4608      	mov	r0, r1
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4603      	mov	r3, r0
 8009c10:	70fb      	strb	r3, [r7, #3]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70bb      	strb	r3, [r7, #2]
 8009c16:	4613      	mov	r3, r2
 8009c18:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009c1a:	7878      	ldrb	r0, [r7, #1]
 8009c1c:	78ba      	ldrb	r2, [r7, #2]
 8009c1e:	78f9      	ldrb	r1, [r7, #3]
 8009c20:	8b3b      	ldrh	r3, [r7, #24]
 8009c22:	9302      	str	r3, [sp, #8]
 8009c24:	7d3b      	ldrb	r3, [r7, #20]
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	7c3b      	ldrb	r3, [r7, #16]
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f002 fdd7 	bl	800c7e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	460b      	mov	r3, r1
 8009c48:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f002 fdf6 	bl	800c840 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3708      	adds	r7, #8
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f836 	bl	8009cdc <USBH_GetFreePipe>
 8009c70:	4603      	mov	r3, r0
 8009c72:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c74:	89fb      	ldrh	r3, [r7, #14]
 8009c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00a      	beq.n	8009c94 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009c7e:	78fa      	ldrb	r2, [r7, #3]
 8009c80:	89fb      	ldrh	r3, [r7, #14]
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	33e0      	adds	r3, #224	; 0xe0
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c94:	89fb      	ldrh	r3, [r7, #14]
 8009c96:	b2db      	uxtb	r3, r3
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b0a      	cmp	r3, #10
 8009cb0:	d80d      	bhi.n	8009cce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	33e0      	adds	r3, #224	; 0xe0
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	33e0      	adds	r3, #224	; 0xe0
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73fb      	strb	r3, [r7, #15]
 8009cec:	e00f      	b.n	8009d0e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	33e0      	adds	r3, #224	; 0xe0
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	e007      	b.n	8009d18 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	73fb      	strb	r3, [r7, #15]
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b0a      	cmp	r3, #10
 8009d12:	d9ec      	bls.n	8009cee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <disk_status+0x30>)
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	79fa      	ldrb	r2, [r7, #7]
 8009d3c:	4905      	ldr	r1, [pc, #20]	; (8009d54 <disk_status+0x30>)
 8009d3e:	440a      	add	r2, r1
 8009d40:	7a12      	ldrb	r2, [r2, #8]
 8009d42:	4610      	mov	r0, r2
 8009d44:	4798      	blx	r3
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20001374 	.word	0x20001374

08009d58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	4a0d      	ldr	r2, [pc, #52]	; (8009da0 <disk_initialize+0x48>)
 8009d6a:	5cd3      	ldrb	r3, [r2, r3]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d111      	bne.n	8009d94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	4a0b      	ldr	r2, [pc, #44]	; (8009da0 <disk_initialize+0x48>)
 8009d74:	2101      	movs	r1, #1
 8009d76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <disk_initialize+0x48>)
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	79fa      	ldrb	r2, [r7, #7]
 8009d86:	4906      	ldr	r1, [pc, #24]	; (8009da0 <disk_initialize+0x48>)
 8009d88:	440a      	add	r2, r1
 8009d8a:	7a12      	ldrb	r2, [r2, #8]
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4798      	blx	r3
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20001374 	.word	0x20001374

08009da4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009da4:	b590      	push	{r4, r7, lr}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
 8009dae:	603b      	str	r3, [r7, #0]
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	4a0a      	ldr	r2, [pc, #40]	; (8009de0 <disk_read+0x3c>)
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	689c      	ldr	r4, [r3, #8]
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	4a07      	ldr	r2, [pc, #28]	; (8009de0 <disk_read+0x3c>)
 8009dc4:	4413      	add	r3, r2
 8009dc6:	7a18      	ldrb	r0, [r3, #8]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	47a0      	blx	r4
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd90      	pop	{r4, r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20001374 	.word	0x20001374

08009de4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009de4:	b590      	push	{r4, r7, lr}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	4a0a      	ldr	r2, [pc, #40]	; (8009e20 <disk_write+0x3c>)
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	68dc      	ldr	r4, [r3, #12]
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	4a07      	ldr	r2, [pc, #28]	; (8009e20 <disk_write+0x3c>)
 8009e04:	4413      	add	r3, r2
 8009e06:	7a18      	ldrb	r0, [r3, #8]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	68b9      	ldr	r1, [r7, #8]
 8009e0e:	47a0      	blx	r4
 8009e10:	4603      	mov	r3, r0
 8009e12:	75fb      	strb	r3, [r7, #23]
  return res;
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	371c      	adds	r7, #28
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd90      	pop	{r4, r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20001374 	.word	0x20001374

08009e24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	603a      	str	r2, [r7, #0]
 8009e2e:	71fb      	strb	r3, [r7, #7]
 8009e30:	460b      	mov	r3, r1
 8009e32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	4a09      	ldr	r2, [pc, #36]	; (8009e5c <disk_ioctl+0x38>)
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	79fa      	ldrb	r2, [r7, #7]
 8009e42:	4906      	ldr	r1, [pc, #24]	; (8009e5c <disk_ioctl+0x38>)
 8009e44:	440a      	add	r2, r1
 8009e46:	7a10      	ldrb	r0, [r2, #8]
 8009e48:	79b9      	ldrb	r1, [r7, #6]
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	4798      	blx	r3
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20001374 	.word	0x20001374

08009e60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e70:	89fb      	ldrh	r3, [r7, #14]
 8009e72:	021b      	lsls	r3, r3, #8
 8009e74:	b21a      	sxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	b21b      	sxth	r3, r3
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	b21b      	sxth	r3, r3
 8009e80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e82:	89fb      	ldrh	r3, [r7, #14]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3303      	adds	r3, #3
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	3202      	adds	r2, #2
 8009ea8:	7812      	ldrb	r2, [r2, #0]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	3201      	adds	r2, #1
 8009eb6:	7812      	ldrb	r2, [r2, #0]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	021b      	lsls	r3, r3, #8
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7812      	ldrb	r2, [r2, #0]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	1c5a      	adds	r2, r3, #1
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	887a      	ldrh	r2, [r7, #2]
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	887b      	ldrh	r3, [r7, #2]
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	1c5a      	adds	r2, r3, #1
 8009ef8:	607a      	str	r2, [r7, #4]
 8009efa:	887a      	ldrh	r2, [r7, #2]
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	0a1b      	lsrs	r3, r3, #8
 8009f26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	701a      	strb	r2, [r3, #0]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	b2d2      	uxtb	r2, r2
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	607a      	str	r2, [r7, #4]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	b2d2      	uxtb	r2, r2
 8009f56:	701a      	strb	r2, [r3, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00d      	beq.n	8009f9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	1c53      	adds	r3, r2, #1
 8009f82:	613b      	str	r3, [r7, #16]
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	1c59      	adds	r1, r3, #1
 8009f88:	6179      	str	r1, [r7, #20]
 8009f8a:	7812      	ldrb	r2, [r2, #0]
 8009f8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f1      	bne.n	8009f7e <mem_cpy+0x1a>
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	371c      	adds	r7, #28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009fa6:	b480      	push	{r7}
 8009fa8:	b087      	sub	sp, #28
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	60f8      	str	r0, [r7, #12]
 8009fae:	60b9      	str	r1, [r7, #8]
 8009fb0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	617a      	str	r2, [r7, #20]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f3      	bne.n	8009fb6 <mem_set+0x10>
}
 8009fce:	bf00      	nop
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009fda:	b480      	push	{r7}
 8009fdc:	b089      	sub	sp, #36	; 0x24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	61fb      	str	r3, [r7, #28]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	1c5a      	adds	r2, r3, #1
 8009ff6:	61fa      	str	r2, [r7, #28]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	61ba      	str	r2, [r7, #24]
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	1acb      	subs	r3, r1, r3
 800a006:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	607b      	str	r3, [r7, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <mem_cmp+0x40>
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d0eb      	beq.n	8009ff2 <mem_cmp+0x18>

	return r;
 800a01a:	697b      	ldr	r3, [r7, #20]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3724      	adds	r7, #36	; 0x24
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a032:	e002      	b.n	800a03a <chk_chr+0x12>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3301      	adds	r3, #1
 800a038:	607b      	str	r3, [r7, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <chk_chr+0x26>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d1f2      	bne.n	800a034 <chk_chr+0xc>
	return *str;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	781b      	ldrb	r3, [r3, #0]
}
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
	...

0800a060 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a06a:	2300      	movs	r3, #0
 800a06c:	60bb      	str	r3, [r7, #8]
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e029      	b.n	800a0c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a074:	4a27      	ldr	r2, [pc, #156]	; (800a114 <chk_lock+0xb4>)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	4413      	add	r3, r2
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01d      	beq.n	800a0be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a082:	4a24      	ldr	r2, [pc, #144]	; (800a114 <chk_lock+0xb4>)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	011b      	lsls	r3, r3, #4
 800a088:	4413      	add	r3, r2
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d116      	bne.n	800a0c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a094:	4a1f      	ldr	r2, [pc, #124]	; (800a114 <chk_lock+0xb4>)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	4413      	add	r3, r2
 800a09c:	3304      	adds	r3, #4
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d10c      	bne.n	800a0c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a0a8:	4a1a      	ldr	r2, [pc, #104]	; (800a114 <chk_lock+0xb4>)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d102      	bne.n	800a0c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a0bc:	e007      	b.n	800a0ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d9d2      	bls.n	800a074 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d109      	bne.n	800a0e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <chk_lock+0x80>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d101      	bne.n	800a0e4 <chk_lock+0x84>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e010      	b.n	800a106 <chk_lock+0xa6>
 800a0e4:	2312      	movs	r3, #18
 800a0e6:	e00e      	b.n	800a106 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d108      	bne.n	800a100 <chk_lock+0xa0>
 800a0ee:	4a09      	ldr	r2, [pc, #36]	; (800a114 <chk_lock+0xb4>)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	011b      	lsls	r3, r3, #4
 800a0f4:	4413      	add	r3, r2
 800a0f6:	330c      	adds	r3, #12
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fe:	d101      	bne.n	800a104 <chk_lock+0xa4>
 800a100:	2310      	movs	r3, #16
 800a102:	e000      	b.n	800a106 <chk_lock+0xa6>
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20001354 	.word	0x20001354

0800a118 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a11e:	2300      	movs	r3, #0
 800a120:	607b      	str	r3, [r7, #4]
 800a122:	e002      	b.n	800a12a <enq_lock+0x12>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3301      	adds	r3, #1
 800a128:	607b      	str	r3, [r7, #4]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d806      	bhi.n	800a13e <enq_lock+0x26>
 800a130:	4a09      	ldr	r2, [pc, #36]	; (800a158 <enq_lock+0x40>)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	4413      	add	r3, r2
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1f2      	bne.n	800a124 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b02      	cmp	r3, #2
 800a142:	bf14      	ite	ne
 800a144:	2301      	movne	r3, #1
 800a146:	2300      	moveq	r3, #0
 800a148:	b2db      	uxtb	r3, r3
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20001354 	.word	0x20001354

0800a15c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	e01f      	b.n	800a1ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a16c:	4a41      	ldr	r2, [pc, #260]	; (800a274 <inc_lock+0x118>)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	011b      	lsls	r3, r3, #4
 800a172:	4413      	add	r3, r2
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d113      	bne.n	800a1a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a17e:	4a3d      	ldr	r2, [pc, #244]	; (800a274 <inc_lock+0x118>)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	011b      	lsls	r3, r3, #4
 800a184:	4413      	add	r3, r2
 800a186:	3304      	adds	r3, #4
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a18e:	429a      	cmp	r2, r3
 800a190:	d109      	bne.n	800a1a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a192:	4a38      	ldr	r2, [pc, #224]	; (800a274 <inc_lock+0x118>)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	4413      	add	r3, r2
 800a19a:	3308      	adds	r3, #8
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d006      	beq.n	800a1b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d9dc      	bls.n	800a16c <inc_lock+0x10>
 800a1b2:	e000      	b.n	800a1b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a1b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d132      	bne.n	800a222 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e002      	b.n	800a1c8 <inc_lock+0x6c>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d806      	bhi.n	800a1dc <inc_lock+0x80>
 800a1ce:	4a29      	ldr	r2, [pc, #164]	; (800a274 <inc_lock+0x118>)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	011b      	lsls	r3, r3, #4
 800a1d4:	4413      	add	r3, r2
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f2      	bne.n	800a1c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d101      	bne.n	800a1e6 <inc_lock+0x8a>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e040      	b.n	800a268 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	4922      	ldr	r1, [pc, #136]	; (800a274 <inc_lock+0x118>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	440b      	add	r3, r1
 800a1f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	491e      	ldr	r1, [pc, #120]	; (800a274 <inc_lock+0x118>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	440b      	add	r3, r1
 800a200:	3304      	adds	r3, #4
 800a202:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	695a      	ldr	r2, [r3, #20]
 800a208:	491a      	ldr	r1, [pc, #104]	; (800a274 <inc_lock+0x118>)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	440b      	add	r3, r1
 800a210:	3308      	adds	r3, #8
 800a212:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a214:	4a17      	ldr	r2, [pc, #92]	; (800a274 <inc_lock+0x118>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	4413      	add	r3, r2
 800a21c:	330c      	adds	r3, #12
 800a21e:	2200      	movs	r2, #0
 800a220:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d009      	beq.n	800a23c <inc_lock+0xe0>
 800a228:	4a12      	ldr	r2, [pc, #72]	; (800a274 <inc_lock+0x118>)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	4413      	add	r3, r2
 800a230:	330c      	adds	r3, #12
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <inc_lock+0xe0>
 800a238:	2300      	movs	r3, #0
 800a23a:	e015      	b.n	800a268 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d108      	bne.n	800a254 <inc_lock+0xf8>
 800a242:	4a0c      	ldr	r2, [pc, #48]	; (800a274 <inc_lock+0x118>)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	4413      	add	r3, r2
 800a24a:	330c      	adds	r3, #12
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	3301      	adds	r3, #1
 800a250:	b29a      	uxth	r2, r3
 800a252:	e001      	b.n	800a258 <inc_lock+0xfc>
 800a254:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a258:	4906      	ldr	r1, [pc, #24]	; (800a274 <inc_lock+0x118>)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	440b      	add	r3, r1
 800a260:	330c      	adds	r3, #12
 800a262:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3301      	adds	r3, #1
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3714      	adds	r7, #20
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	20001354 	.word	0x20001354

0800a278 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3b01      	subs	r3, #1
 800a284:	607b      	str	r3, [r7, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d825      	bhi.n	800a2d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800a28c:	4a17      	ldr	r2, [pc, #92]	; (800a2ec <dec_lock+0x74>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	4413      	add	r3, r2
 800a294:	330c      	adds	r3, #12
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a29a:	89fb      	ldrh	r3, [r7, #14]
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d101      	bne.n	800a2a6 <dec_lock+0x2e>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a2a6:	89fb      	ldrh	r3, [r7, #14]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <dec_lock+0x3a>
 800a2ac:	89fb      	ldrh	r3, [r7, #14]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a2b2:	4a0e      	ldr	r2, [pc, #56]	; (800a2ec <dec_lock+0x74>)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	4413      	add	r3, r2
 800a2ba:	330c      	adds	r3, #12
 800a2bc:	89fa      	ldrh	r2, [r7, #14]
 800a2be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a2c0:	89fb      	ldrh	r3, [r7, #14]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d105      	bne.n	800a2d2 <dec_lock+0x5a>
 800a2c6:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <dec_lock+0x74>)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	4413      	add	r3, r2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	737b      	strb	r3, [r7, #13]
 800a2d6:	e001      	b.n	800a2dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a2d8:	2302      	movs	r3, #2
 800a2da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a2dc:	7b7b      	ldrb	r3, [r7, #13]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20001354 	.word	0x20001354

0800a2f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	e010      	b.n	800a320 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a2fe:	4a0d      	ldr	r2, [pc, #52]	; (800a334 <clear_lock+0x44>)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	4413      	add	r3, r2
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d105      	bne.n	800a31a <clear_lock+0x2a>
 800a30e:	4a09      	ldr	r2, [pc, #36]	; (800a334 <clear_lock+0x44>)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	4413      	add	r3, r2
 800a316:	2200      	movs	r2, #0
 800a318:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d9eb      	bls.n	800a2fe <clear_lock+0xe>
	}
}
 800a326:	bf00      	nop
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	20001354 	.word	0x20001354

0800a338 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	78db      	ldrb	r3, [r3, #3]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d034      	beq.n	800a3b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	7858      	ldrb	r0, [r3, #1]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a35c:	2301      	movs	r3, #1
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	f7ff fd40 	bl	8009de4 <disk_write>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	e022      	b.n	800a3b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	1ad2      	subs	r2, r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	429a      	cmp	r2, r3
 800a384:	d217      	bcs.n	800a3b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	789b      	ldrb	r3, [r3, #2]
 800a38a:	613b      	str	r3, [r7, #16]
 800a38c:	e010      	b.n	800a3b0 <sync_window+0x78>
					wsect += fs->fsize;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4413      	add	r3, r2
 800a396:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	7858      	ldrb	r0, [r3, #1]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	f7ff fd1d 	bl	8009de4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	613b      	str	r3, [r7, #16]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d8eb      	bhi.n	800a38e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d01b      	beq.n	800a410 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7ff ffad 	bl	800a338 <sync_window>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a3e2:	7bfb      	ldrb	r3, [r7, #15]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d113      	bne.n	800a410 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	7858      	ldrb	r0, [r3, #1]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	f7ff fcd5 	bl	8009da4 <disk_read>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d004      	beq.n	800a40a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a400:	f04f 33ff 	mov.w	r3, #4294967295
 800a404:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ff87 	bl	800a338 <sync_window>
 800a42a:	4603      	mov	r3, r0
 800a42c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d158      	bne.n	800a4e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d148      	bne.n	800a4ce <sync_fs+0xb2>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	791b      	ldrb	r3, [r3, #4]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d144      	bne.n	800a4ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3330      	adds	r3, #48	; 0x30
 800a448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44c:	2100      	movs	r1, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fda9 	bl	8009fa6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3330      	adds	r3, #48	; 0x30
 800a458:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a45c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff fd38 	bl	8009ed6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3330      	adds	r3, #48	; 0x30
 800a46a:	4921      	ldr	r1, [pc, #132]	; (800a4f0 <sync_fs+0xd4>)
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fd4d 	bl	8009f0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3330      	adds	r3, #48	; 0x30
 800a476:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a47a:	491e      	ldr	r1, [pc, #120]	; (800a4f4 <sync_fs+0xd8>)
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fd45 	bl	8009f0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	3330      	adds	r3, #48	; 0x30
 800a486:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	4619      	mov	r1, r3
 800a490:	4610      	mov	r0, r2
 800a492:	f7ff fd3b 	bl	8009f0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3330      	adds	r3, #48	; 0x30
 800a49a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7ff fd31 	bl	8009f0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7858      	ldrb	r0, [r3, #1]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	f7ff fc8e 	bl	8009de4 <disk_write>
			fs->fsi_flag = 0;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7ff fca4 	bl	8009e24 <disk_ioctl>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <sync_fs+0xca>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	41615252 	.word	0x41615252
 800a4f4:	61417272 	.word	0x61417272

0800a4f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	3b02      	subs	r3, #2
 800a506:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	3b02      	subs	r3, #2
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d301      	bcc.n	800a518 <clust2sect+0x20>
 800a514:	2300      	movs	r3, #0
 800a516:	e008      	b.n	800a52a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	895b      	ldrh	r3, [r3, #10]
 800a51c:	461a      	mov	r2, r3
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	fb03 f202 	mul.w	r2, r3, r2
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a528:	4413      	add	r3, r2
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d904      	bls.n	800a556 <get_fat+0x20>
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d302      	bcc.n	800a55c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a556:	2301      	movs	r3, #1
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e08c      	b.n	800a676 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a55c:	f04f 33ff 	mov.w	r3, #4294967295
 800a560:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d045      	beq.n	800a5f6 <get_fat+0xc0>
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d05d      	beq.n	800a62a <get_fat+0xf4>
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d177      	bne.n	800a662 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4413      	add	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	6a1a      	ldr	r2, [r3, #32]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	0a5b      	lsrs	r3, r3, #9
 800a588:	4413      	add	r3, r2
 800a58a:	4619      	mov	r1, r3
 800a58c:	6938      	ldr	r0, [r7, #16]
 800a58e:	f7ff ff17 	bl	800a3c0 <move_window>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d167      	bne.n	800a668 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	60fa      	str	r2, [r7, #12]
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	693a      	ldr	r2, [r7, #16]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6a1a      	ldr	r2, [r3, #32]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	0a5b      	lsrs	r3, r3, #9
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	6938      	ldr	r0, [r7, #16]
 800a5ba:	f7ff ff01 	bl	800a3c0 <move_window>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d153      	bne.n	800a66c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5d2:	021b      	lsls	r3, r3, #8
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	f003 0301 	and.w	r3, r3, #1
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <get_fat+0xb6>
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	091b      	lsrs	r3, r3, #4
 800a5ea:	e002      	b.n	800a5f2 <get_fat+0xbc>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5f2:	617b      	str	r3, [r7, #20]
			break;
 800a5f4:	e03f      	b.n	800a676 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6a1a      	ldr	r2, [r3, #32]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	4413      	add	r3, r2
 800a600:	4619      	mov	r1, r3
 800a602:	6938      	ldr	r0, [r7, #16]
 800a604:	f7ff fedc 	bl	800a3c0 <move_window>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d130      	bne.n	800a670 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a61c:	4413      	add	r3, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff fc1e 	bl	8009e60 <ld_word>
 800a624:	4603      	mov	r3, r0
 800a626:	617b      	str	r3, [r7, #20]
			break;
 800a628:	e025      	b.n	800a676 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	6a1a      	ldr	r2, [r3, #32]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	09db      	lsrs	r3, r3, #7
 800a632:	4413      	add	r3, r2
 800a634:	4619      	mov	r1, r3
 800a636:	6938      	ldr	r0, [r7, #16]
 800a638:	f7ff fec2 	bl	800a3c0 <move_window>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d118      	bne.n	800a674 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a650:	4413      	add	r3, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fc1c 	bl	8009e90 <ld_dword>
 800a658:	4603      	mov	r3, r0
 800a65a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a65e:	617b      	str	r3, [r7, #20]
			break;
 800a660:	e009      	b.n	800a676 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a662:	2301      	movs	r3, #1
 800a664:	617b      	str	r3, [r7, #20]
 800a666:	e006      	b.n	800a676 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a668:	bf00      	nop
 800a66a:	e004      	b.n	800a676 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a66c:	bf00      	nop
 800a66e:	e002      	b.n	800a676 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a670:	bf00      	nop
 800a672:	e000      	b.n	800a676 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a674:	bf00      	nop
		}
	}

	return val;
 800a676:	697b      	ldr	r3, [r7, #20]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a680:	b590      	push	{r4, r7, lr}
 800a682:	b089      	sub	sp, #36	; 0x24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a68c:	2302      	movs	r3, #2
 800a68e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b01      	cmp	r3, #1
 800a694:	f240 80d6 	bls.w	800a844 <put_fat+0x1c4>
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	f080 80d0 	bcs.w	800a844 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d073      	beq.n	800a794 <put_fat+0x114>
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	f000 8091 	beq.w	800a7d4 <put_fat+0x154>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	f040 80c6 	bne.w	800a844 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	61bb      	str	r3, [r7, #24]
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	085b      	lsrs	r3, r3, #1
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a1a      	ldr	r2, [r3, #32]
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	0a5b      	lsrs	r3, r3, #9
 800a6ce:	4413      	add	r3, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fe74 	bl	800a3c0 <move_window>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6dc:	7ffb      	ldrb	r3, [r7, #31]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f040 80a9 	bne.w	800a836 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	1c59      	adds	r1, r3, #1
 800a6ee:	61b9      	str	r1, [r7, #24]
 800a6f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f4:	4413      	add	r3, r2
 800a6f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00d      	beq.n	800a71e <put_fat+0x9e>
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	b25b      	sxtb	r3, r3
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	b25a      	sxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	b2db      	uxtb	r3, r3
 800a712:	011b      	lsls	r3, r3, #4
 800a714:	b25b      	sxtb	r3, r3
 800a716:	4313      	orrs	r3, r2
 800a718:	b25b      	sxtb	r3, r3
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	e001      	b.n	800a722 <put_fat+0xa2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	b2db      	uxtb	r3, r3
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2201      	movs	r2, #1
 800a72a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a1a      	ldr	r2, [r3, #32]
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	0a5b      	lsrs	r3, r3, #9
 800a734:	4413      	add	r3, r2
 800a736:	4619      	mov	r1, r3
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f7ff fe41 	bl	800a3c0 <move_window>
 800a73e:	4603      	mov	r3, r0
 800a740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a742:	7ffb      	ldrb	r3, [r7, #31]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d178      	bne.n	800a83a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a754:	4413      	add	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <put_fat+0xea>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	091b      	lsrs	r3, r3, #4
 800a766:	b2db      	uxtb	r3, r3
 800a768:	e00e      	b.n	800a788 <put_fat+0x108>
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	b25b      	sxtb	r3, r3
 800a770:	f023 030f 	bic.w	r3, r3, #15
 800a774:	b25a      	sxtb	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	0a1b      	lsrs	r3, r3, #8
 800a77a:	b25b      	sxtb	r3, r3
 800a77c:	f003 030f 	and.w	r3, r3, #15
 800a780:	b25b      	sxtb	r3, r3
 800a782:	4313      	orrs	r3, r2
 800a784:	b25b      	sxtb	r3, r3
 800a786:	b2db      	uxtb	r3, r3
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2201      	movs	r2, #1
 800a790:	70da      	strb	r2, [r3, #3]
			break;
 800a792:	e057      	b.n	800a844 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6a1a      	ldr	r2, [r3, #32]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	0a1b      	lsrs	r3, r3, #8
 800a79c:	4413      	add	r3, r2
 800a79e:	4619      	mov	r1, r3
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7ff fe0d 	bl	800a3c0 <move_window>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7aa:	7ffb      	ldrb	r3, [r7, #31]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d146      	bne.n	800a83e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a7be:	4413      	add	r3, r2
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	b292      	uxth	r2, r2
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff fb85 	bl	8009ed6 <st_word>
			fs->wflag = 1;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	70da      	strb	r2, [r3, #3]
			break;
 800a7d2:	e037      	b.n	800a844 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6a1a      	ldr	r2, [r3, #32]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	09db      	lsrs	r3, r3, #7
 800a7dc:	4413      	add	r3, r2
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f7ff fded 	bl	800a3c0 <move_window>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7ea:	7ffb      	ldrb	r3, [r7, #31]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d128      	bne.n	800a842 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a804:	4413      	add	r3, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fb42 	bl	8009e90 <ld_dword>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a812:	4323      	orrs	r3, r4
 800a814:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a824:	4413      	add	r3, r2
 800a826:	6879      	ldr	r1, [r7, #4]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fb6f 	bl	8009f0c <st_dword>
			fs->wflag = 1;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2201      	movs	r2, #1
 800a832:	70da      	strb	r2, [r3, #3]
			break;
 800a834:	e006      	b.n	800a844 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a836:	bf00      	nop
 800a838:	e004      	b.n	800a844 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a83a:	bf00      	nop
 800a83c:	e002      	b.n	800a844 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a83e:	bf00      	nop
 800a840:	e000      	b.n	800a844 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a842:	bf00      	nop
		}
	}
	return res;
 800a844:	7ffb      	ldrb	r3, [r7, #31]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3724      	adds	r7, #36	; 0x24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd90      	pop	{r4, r7, pc}

0800a84e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b088      	sub	sp, #32
 800a852:	af00      	add	r7, sp, #0
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d904      	bls.n	800a874 <remove_chain+0x26>
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	d301      	bcc.n	800a878 <remove_chain+0x2a>
 800a874:	2302      	movs	r3, #2
 800a876:	e04b      	b.n	800a910 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00c      	beq.n	800a898 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a87e:	f04f 32ff 	mov.w	r2, #4294967295
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	69b8      	ldr	r0, [r7, #24]
 800a886:	f7ff fefb 	bl	800a680 <put_fat>
 800a88a:	4603      	mov	r3, r0
 800a88c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a88e:	7ffb      	ldrb	r3, [r7, #31]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <remove_chain+0x4a>
 800a894:	7ffb      	ldrb	r3, [r7, #31]
 800a896:	e03b      	b.n	800a910 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7ff fe4b 	bl	800a536 <get_fat>
 800a8a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d031      	beq.n	800a90c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <remove_chain+0x64>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e02e      	b.n	800a910 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d101      	bne.n	800a8be <remove_chain+0x70>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e028      	b.n	800a910 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a8be:	2200      	movs	r2, #0
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	69b8      	ldr	r0, [r7, #24]
 800a8c4:	f7ff fedc 	bl	800a680 <put_fat>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a8cc:	7ffb      	ldrb	r3, [r7, #31]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <remove_chain+0x88>
 800a8d2:	7ffb      	ldrb	r3, [r7, #31]
 800a8d4:	e01c      	b.n	800a910 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	691a      	ldr	r2, [r3, #16]
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	695b      	ldr	r3, [r3, #20]
 800a8de:	3b02      	subs	r3, #2
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d20b      	bcs.n	800a8fc <remove_chain+0xae>
			fs->free_clst++;
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	791b      	ldrb	r3, [r3, #4]
 800a8f2:	f043 0301 	orr.w	r3, r3, #1
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	429a      	cmp	r2, r3
 800a908:	d3c6      	bcc.n	800a898 <remove_chain+0x4a>
 800a90a:	e000      	b.n	800a90e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a90c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b088      	sub	sp, #32
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10d      	bne.n	800a94a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <create_chain+0x2c>
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	69ba      	ldr	r2, [r7, #24]
 800a940:	429a      	cmp	r2, r3
 800a942:	d31b      	bcc.n	800a97c <create_chain+0x64>
 800a944:	2301      	movs	r3, #1
 800a946:	61bb      	str	r3, [r7, #24]
 800a948:	e018      	b.n	800a97c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff fdf2 	bl	800a536 <get_fat>
 800a952:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d801      	bhi.n	800a95e <create_chain+0x46>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e070      	b.n	800aa40 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a964:	d101      	bne.n	800a96a <create_chain+0x52>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	e06a      	b.n	800aa40 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	429a      	cmp	r2, r3
 800a972:	d201      	bcs.n	800a978 <create_chain+0x60>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	e063      	b.n	800aa40 <create_chain+0x128>
		scl = clst;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	3301      	adds	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	69fa      	ldr	r2, [r7, #28]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d307      	bcc.n	800a9a0 <create_chain+0x88>
				ncl = 2;
 800a990:	2302      	movs	r3, #2
 800a992:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a994:	69fa      	ldr	r2, [r7, #28]
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d901      	bls.n	800a9a0 <create_chain+0x88>
 800a99c:	2300      	movs	r3, #0
 800a99e:	e04f      	b.n	800aa40 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff fdc7 	bl	800a536 <get_fat>
 800a9a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00e      	beq.n	800a9ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d003      	beq.n	800a9be <create_chain+0xa6>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d101      	bne.n	800a9c2 <create_chain+0xaa>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	e03e      	b.n	800aa40 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a9c2:	69fa      	ldr	r2, [r7, #28]
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d1da      	bne.n	800a980 <create_chain+0x68>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e038      	b.n	800aa40 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a9ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d4:	69f9      	ldr	r1, [r7, #28]
 800a9d6:	6938      	ldr	r0, [r7, #16]
 800a9d8:	f7ff fe52 	bl	800a680 <put_fat>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d109      	bne.n	800a9fa <create_chain+0xe2>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d006      	beq.n	800a9fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a9ec:	69fa      	ldr	r2, [r7, #28]
 800a9ee:	6839      	ldr	r1, [r7, #0]
 800a9f0:	6938      	ldr	r0, [r7, #16]
 800a9f2:	f7ff fe45 	bl	800a680 <put_fat>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d116      	bne.n	800aa2e <create_chain+0x116>
		fs->last_clst = ncl;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	691a      	ldr	r2, [r3, #16]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	3b02      	subs	r3, #2
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d804      	bhi.n	800aa1e <create_chain+0x106>
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	791b      	ldrb	r3, [r3, #4]
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	711a      	strb	r2, [r3, #4]
 800aa2c:	e007      	b.n	800aa3e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d102      	bne.n	800aa3a <create_chain+0x122>
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	e000      	b.n	800aa3c <create_chain+0x124>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aa3e:	69fb      	ldr	r3, [r7, #28]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	0a5b      	lsrs	r3, r3, #9
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	8952      	ldrh	r2, [r2, #10]
 800aa68:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	1d1a      	adds	r2, r3, #4
 800aa72:	613a      	str	r2, [r7, #16]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <clmt_clust+0x3a>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e010      	b.n	800aaa4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d307      	bcc.n	800aa9a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	617b      	str	r3, [r7, #20]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3304      	adds	r3, #4
 800aa96:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa98:	e7e9      	b.n	800aa6e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aa9a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	4413      	add	r3, r2
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	371c      	adds	r7, #28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aac6:	d204      	bcs.n	800aad2 <dir_sdi+0x22>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	f003 031f 	and.w	r3, r3, #31
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aad2:	2302      	movs	r3, #2
 800aad4:	e063      	b.n	800ab9e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <dir_sdi+0x46>
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d902      	bls.n	800aaf6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10c      	bne.n	800ab16 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	095b      	lsrs	r3, r3, #5
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	8912      	ldrh	r2, [r2, #8]
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d301      	bcc.n	800ab0c <dir_sdi+0x5c>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e048      	b.n	800ab9e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	61da      	str	r2, [r3, #28]
 800ab14:	e029      	b.n	800ab6a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	895b      	ldrh	r3, [r3, #10]
 800ab1a:	025b      	lsls	r3, r3, #9
 800ab1c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab1e:	e019      	b.n	800ab54 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6979      	ldr	r1, [r7, #20]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff fd06 	bl	800a536 <get_fat>
 800ab2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab32:	d101      	bne.n	800ab38 <dir_sdi+0x88>
 800ab34:	2301      	movs	r3, #1
 800ab36:	e032      	b.n	800ab9e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d904      	bls.n	800ab48 <dir_sdi+0x98>
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d301      	bcc.n	800ab4c <dir_sdi+0x9c>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e028      	b.n	800ab9e <dir_sdi+0xee>
			ofs -= csz;
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d2e1      	bcs.n	800ab20 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ab5c:	6979      	ldr	r1, [r7, #20]
 800ab5e:	6938      	ldr	r0, [r7, #16]
 800ab60:	f7ff fcca 	bl	800a4f8 <clust2sect>
 800ab64:	4602      	mov	r2, r0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d101      	bne.n	800ab7c <dir_sdi+0xcc>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	e010      	b.n	800ab9e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	69da      	ldr	r2, [r3, #28]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	0a5b      	lsrs	r3, r3, #9
 800ab84:	441a      	add	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab96:	441a      	add	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
 800abae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	3320      	adds	r3, #32
 800abbc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	69db      	ldr	r3, [r3, #28]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d003      	beq.n	800abce <dir_next+0x28>
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abcc:	d301      	bcc.n	800abd2 <dir_next+0x2c>
 800abce:	2304      	movs	r3, #4
 800abd0:	e0aa      	b.n	800ad28 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f040 8098 	bne.w	800ad0e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10b      	bne.n	800ac08 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	095b      	lsrs	r3, r3, #5
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	8912      	ldrh	r2, [r2, #8]
 800abf8:	4293      	cmp	r3, r2
 800abfa:	f0c0 8088 	bcc.w	800ad0e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	61da      	str	r2, [r3, #28]
 800ac04:	2304      	movs	r3, #4
 800ac06:	e08f      	b.n	800ad28 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	0a5b      	lsrs	r3, r3, #9
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	8952      	ldrh	r2, [r2, #10]
 800ac10:	3a01      	subs	r2, #1
 800ac12:	4013      	ands	r3, r2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d17a      	bne.n	800ad0e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4610      	mov	r0, r2
 800ac22:	f7ff fc88 	bl	800a536 <get_fat>
 800ac26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d801      	bhi.n	800ac32 <dir_next+0x8c>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	e07a      	b.n	800ad28 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d101      	bne.n	800ac3e <dir_next+0x98>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e074      	b.n	800ad28 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d358      	bcc.n	800acfa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d104      	bne.n	800ac58 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	61da      	str	r2, [r3, #28]
 800ac54:	2304      	movs	r3, #4
 800ac56:	e067      	b.n	800ad28 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4610      	mov	r0, r2
 800ac62:	f7ff fe59 	bl	800a918 <create_chain>
 800ac66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <dir_next+0xcc>
 800ac6e:	2307      	movs	r3, #7
 800ac70:	e05a      	b.n	800ad28 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d101      	bne.n	800ac7c <dir_next+0xd6>
 800ac78:	2302      	movs	r3, #2
 800ac7a:	e055      	b.n	800ad28 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac82:	d101      	bne.n	800ac88 <dir_next+0xe2>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e04f      	b.n	800ad28 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f7ff fb55 	bl	800a338 <sync_window>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <dir_next+0xf2>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e047      	b.n	800ad28 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3330      	adds	r3, #48	; 0x30
 800ac9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aca0:	2100      	movs	r1, #0
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff f97f 	bl	8009fa6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aca8:	2300      	movs	r3, #0
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	6979      	ldr	r1, [r7, #20]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff fc22 	bl	800a4f8 <clust2sect>
 800acb4:	4602      	mov	r2, r0
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	62da      	str	r2, [r3, #44]	; 0x2c
 800acba:	e012      	b.n	800ace2 <dir_next+0x13c>
						fs->wflag = 1;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2201      	movs	r2, #1
 800acc0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff fb38 	bl	800a338 <sync_window>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <dir_next+0x12c>
 800acce:	2301      	movs	r3, #1
 800acd0:	e02a      	b.n	800ad28 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	3301      	adds	r3, #1
 800acd6:	613b      	str	r3, [r7, #16]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	1c5a      	adds	r2, r3, #1
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	62da      	str	r2, [r3, #44]	; 0x2c
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	895b      	ldrh	r3, [r3, #10]
 800ace6:	461a      	mov	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	4293      	cmp	r3, r2
 800acec:	d3e6      	bcc.n	800acbc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	1ad2      	subs	r2, r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ad00:	6979      	ldr	r1, [r7, #20]
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7ff fbf8 	bl	800a4f8 <clust2sect>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad20:	441a      	add	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ad40:	2100      	movs	r1, #0
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff feb4 	bl	800aab0 <dir_sdi>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d12b      	bne.n	800adaa <dir_alloc+0x7a>
		n = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff fb2f 	bl	800a3c0 <move_window>
 800ad62:	4603      	mov	r3, r0
 800ad64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d11d      	bne.n	800ada8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2be5      	cmp	r3, #229	; 0xe5
 800ad74:	d004      	beq.n	800ad80 <dir_alloc+0x50>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d107      	bne.n	800ad90 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	3301      	adds	r3, #1
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d102      	bne.n	800ad94 <dir_alloc+0x64>
 800ad8e:	e00c      	b.n	800adaa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ad90:	2300      	movs	r3, #0
 800ad92:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ad94:	2101      	movs	r1, #1
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ff05 	bl	800aba6 <dir_next>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ada0:	7dfb      	ldrb	r3, [r7, #23]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0d7      	beq.n	800ad56 <dir_alloc+0x26>
 800ada6:	e000      	b.n	800adaa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ada8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
 800adac:	2b04      	cmp	r3, #4
 800adae:	d101      	bne.n	800adb4 <dir_alloc+0x84>
 800adb0:	2307      	movs	r3, #7
 800adb2:	75fb      	strb	r3, [r7, #23]
	return res;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	331a      	adds	r3, #26
 800adcc:	4618      	mov	r0, r3
 800adce:	f7ff f847 	bl	8009e60 <ld_word>
 800add2:	4603      	mov	r3, r0
 800add4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d109      	bne.n	800adf2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	3314      	adds	r3, #20
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff f83c 	bl	8009e60 <ld_word>
 800ade8:	4603      	mov	r3, r0
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800adf2:	68fb      	ldr	r3, [r7, #12]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	331a      	adds	r3, #26
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	b292      	uxth	r2, r2
 800ae10:	4611      	mov	r1, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff f85f 	bl	8009ed6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d109      	bne.n	800ae34 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f103 0214 	add.w	r2, r3, #20
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	0c1b      	lsrs	r3, r3, #16
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7ff f851 	bl	8009ed6 <st_word>
	}
}
 800ae34:	bf00      	nop
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff fe2f 	bl	800aab0 <dir_sdi>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <dir_find+0x24>
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	e03e      	b.n	800aede <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	69db      	ldr	r3, [r3, #28]
 800ae64:	4619      	mov	r1, r3
 800ae66:	6938      	ldr	r0, [r7, #16]
 800ae68:	f7ff faaa 	bl	800a3c0 <move_window>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae70:	7dfb      	ldrb	r3, [r7, #23]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d12f      	bne.n	800aed6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae7e:	7bfb      	ldrb	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d102      	bne.n	800ae8a <dir_find+0x4e>
 800ae84:	2304      	movs	r3, #4
 800ae86:	75fb      	strb	r3, [r7, #23]
 800ae88:	e028      	b.n	800aedc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	330b      	adds	r3, #11
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	330b      	adds	r3, #11
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	f003 0308 	and.w	r3, r3, #8
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <dir_find+0x86>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a18      	ldr	r0, [r3, #32]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3324      	adds	r3, #36	; 0x24
 800aeb4:	220b      	movs	r2, #11
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f7ff f88f 	bl	8009fda <mem_cmp>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00b      	beq.n	800aeda <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aec2:	2100      	movs	r1, #0
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff fe6e 	bl	800aba6 <dir_next>
 800aeca:	4603      	mov	r3, r0
 800aecc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d0c5      	beq.n	800ae60 <dir_find+0x24>
 800aed4:	e002      	b.n	800aedc <dir_find+0xa0>
		if (res != FR_OK) break;
 800aed6:	bf00      	nop
 800aed8:	e000      	b.n	800aedc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aeda:	bf00      	nop

	return res;
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aef4:	2101      	movs	r1, #1
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff ff1a 	bl	800ad30 <dir_alloc>
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d11c      	bne.n	800af40 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	4619      	mov	r1, r3
 800af0c:	68b8      	ldr	r0, [r7, #8]
 800af0e:	f7ff fa57 	bl	800a3c0 <move_window>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d111      	bne.n	800af40 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	2220      	movs	r2, #32
 800af22:	2100      	movs	r1, #0
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff f83e 	bl	8009fa6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a18      	ldr	r0, [r3, #32]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3324      	adds	r3, #36	; 0x24
 800af32:	220b      	movs	r2, #11
 800af34:	4619      	mov	r1, r3
 800af36:	f7ff f815 	bl	8009f64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2201      	movs	r2, #1
 800af3e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
	...

0800af4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3324      	adds	r3, #36	; 0x24
 800af60:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800af62:	220b      	movs	r2, #11
 800af64:	2120      	movs	r1, #32
 800af66:	68b8      	ldr	r0, [r7, #8]
 800af68:	f7ff f81d 	bl	8009fa6 <mem_set>
	si = i = 0; ni = 8;
 800af6c:	2300      	movs	r3, #0
 800af6e:	613b      	str	r3, [r7, #16]
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	2308      	movs	r3, #8
 800af76:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	617a      	str	r2, [r7, #20]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4413      	add	r3, r2
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af86:	7ffb      	ldrb	r3, [r7, #31]
 800af88:	2b20      	cmp	r3, #32
 800af8a:	d94e      	bls.n	800b02a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
 800af8e:	2b2f      	cmp	r3, #47	; 0x2f
 800af90:	d006      	beq.n	800afa0 <create_name+0x54>
 800af92:	7ffb      	ldrb	r3, [r7, #31]
 800af94:	2b5c      	cmp	r3, #92	; 0x5c
 800af96:	d110      	bne.n	800afba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800af98:	e002      	b.n	800afa0 <create_name+0x54>
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	3301      	adds	r3, #1
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	4413      	add	r3, r2
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b2f      	cmp	r3, #47	; 0x2f
 800afaa:	d0f6      	beq.n	800af9a <create_name+0x4e>
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b5c      	cmp	r3, #92	; 0x5c
 800afb6:	d0f0      	beq.n	800af9a <create_name+0x4e>
			break;
 800afb8:	e038      	b.n	800b02c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800afba:	7ffb      	ldrb	r3, [r7, #31]
 800afbc:	2b2e      	cmp	r3, #46	; 0x2e
 800afbe:	d003      	beq.n	800afc8 <create_name+0x7c>
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d30c      	bcc.n	800afe2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b0b      	cmp	r3, #11
 800afcc:	d002      	beq.n	800afd4 <create_name+0x88>
 800afce:	7ffb      	ldrb	r3, [r7, #31]
 800afd0:	2b2e      	cmp	r3, #46	; 0x2e
 800afd2:	d001      	beq.n	800afd8 <create_name+0x8c>
 800afd4:	2306      	movs	r3, #6
 800afd6:	e044      	b.n	800b062 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800afd8:	2308      	movs	r3, #8
 800afda:	613b      	str	r3, [r7, #16]
 800afdc:	230b      	movs	r3, #11
 800afde:	61bb      	str	r3, [r7, #24]
			continue;
 800afe0:	e022      	b.n	800b028 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800afe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da04      	bge.n	800aff4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800afea:	7ffb      	ldrb	r3, [r7, #31]
 800afec:	3b80      	subs	r3, #128	; 0x80
 800afee:	4a1f      	ldr	r2, [pc, #124]	; (800b06c <create_name+0x120>)
 800aff0:	5cd3      	ldrb	r3, [r2, r3]
 800aff2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aff4:	7ffb      	ldrb	r3, [r7, #31]
 800aff6:	4619      	mov	r1, r3
 800aff8:	481d      	ldr	r0, [pc, #116]	; (800b070 <create_name+0x124>)
 800affa:	f7ff f815 	bl	800a028 <chk_chr>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <create_name+0xbc>
 800b004:	2306      	movs	r3, #6
 800b006:	e02c      	b.n	800b062 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b008:	7ffb      	ldrb	r3, [r7, #31]
 800b00a:	2b60      	cmp	r3, #96	; 0x60
 800b00c:	d905      	bls.n	800b01a <create_name+0xce>
 800b00e:	7ffb      	ldrb	r3, [r7, #31]
 800b010:	2b7a      	cmp	r3, #122	; 0x7a
 800b012:	d802      	bhi.n	800b01a <create_name+0xce>
 800b014:	7ffb      	ldrb	r3, [r7, #31]
 800b016:	3b20      	subs	r3, #32
 800b018:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	1c5a      	adds	r2, r3, #1
 800b01e:	613a      	str	r2, [r7, #16]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	4413      	add	r3, r2
 800b024:	7ffa      	ldrb	r2, [r7, #31]
 800b026:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b028:	e7a6      	b.n	800af78 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b02a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	441a      	add	r2, r3
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <create_name+0xf4>
 800b03c:	2306      	movs	r3, #6
 800b03e:	e010      	b.n	800b062 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2be5      	cmp	r3, #229	; 0xe5
 800b046:	d102      	bne.n	800b04e <create_name+0x102>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2205      	movs	r2, #5
 800b04c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b04e:	7ffb      	ldrb	r3, [r7, #31]
 800b050:	2b20      	cmp	r3, #32
 800b052:	d801      	bhi.n	800b058 <create_name+0x10c>
 800b054:	2204      	movs	r2, #4
 800b056:	e000      	b.n	800b05a <create_name+0x10e>
 800b058:	2200      	movs	r2, #0
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	330b      	adds	r3, #11
 800b05e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b060:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	0800cd5c 	.word	0x0800cd5c
 800b070:	0800cce4 	.word	0x0800cce4

0800b074 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b088:	e002      	b.n	800b090 <follow_path+0x1c>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	3301      	adds	r3, #1
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	2b2f      	cmp	r3, #47	; 0x2f
 800b096:	d0f8      	beq.n	800b08a <follow_path+0x16>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b5c      	cmp	r3, #92	; 0x5c
 800b09e:	d0f4      	beq.n	800b08a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b1f      	cmp	r3, #31
 800b0ac:	d80a      	bhi.n	800b0c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2280      	movs	r2, #128	; 0x80
 800b0b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fcf9 	bl	800aab0 <dir_sdi>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]
 800b0c2:	e043      	b.n	800b14c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b0c4:	463b      	mov	r3, r7
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff3f 	bl	800af4c <create_name>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d134      	bne.n	800b142 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f7ff feaf 	bl	800ae3c <dir_find>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d00a      	beq.n	800b106 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b0f0:	7dfb      	ldrb	r3, [r7, #23]
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d127      	bne.n	800b146 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b0f6:	7afb      	ldrb	r3, [r7, #11]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d122      	bne.n	800b146 <follow_path+0xd2>
 800b100:	2305      	movs	r3, #5
 800b102:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b104:	e01f      	b.n	800b146 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b106:	7afb      	ldrb	r3, [r7, #11]
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d11c      	bne.n	800b14a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	799b      	ldrb	r3, [r3, #6]
 800b114:	f003 0310 	and.w	r3, r3, #16
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b11c:	2305      	movs	r3, #5
 800b11e:	75fb      	strb	r3, [r7, #23]
 800b120:	e014      	b.n	800b14c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b130:	4413      	add	r3, r2
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff fe42 	bl	800adbe <ld_clust>
 800b13a:	4602      	mov	r2, r0
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b140:	e7c0      	b.n	800b0c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800b142:	bf00      	nop
 800b144:	e002      	b.n	800b14c <follow_path+0xd8>
				break;
 800b146:	bf00      	nop
 800b148:	e000      	b.n	800b14c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b14a:	bf00      	nop
			}
		}
	}

	return res;
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b156:	b480      	push	{r7}
 800b158:	b087      	sub	sp, #28
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d031      	beq.n	800b1d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	617b      	str	r3, [r7, #20]
 800b172:	e002      	b.n	800b17a <get_ldnumber+0x24>
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	3301      	adds	r3, #1
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b20      	cmp	r3, #32
 800b180:	d903      	bls.n	800b18a <get_ldnumber+0x34>
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b3a      	cmp	r3, #58	; 0x3a
 800b188:	d1f4      	bne.n	800b174 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b3a      	cmp	r3, #58	; 0x3a
 800b190:	d11c      	bne.n	800b1cc <get_ldnumber+0x76>
			tp = *path;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	60fa      	str	r2, [r7, #12]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	3b30      	subs	r3, #48	; 0x30
 800b1a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2b09      	cmp	r3, #9
 800b1a8:	d80e      	bhi.n	800b1c8 <get_ldnumber+0x72>
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d10a      	bne.n	800b1c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d107      	bne.n	800b1c8 <get_ldnumber+0x72>
					vol = (int)i;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	e002      	b.n	800b1d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b1d0:	693b      	ldr	r3, [r7, #16]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	371c      	adds	r7, #28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
	...

0800b1e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	70da      	strb	r2, [r3, #3]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff f8e0 	bl	800a3c0 <move_window>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <check_fs+0x2a>
 800b206:	2304      	movs	r3, #4
 800b208:	e038      	b.n	800b27c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3330      	adds	r3, #48	; 0x30
 800b20e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe fe24 	bl	8009e60 <ld_word>
 800b218:	4603      	mov	r3, r0
 800b21a:	461a      	mov	r2, r3
 800b21c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b220:	429a      	cmp	r2, r3
 800b222:	d001      	beq.n	800b228 <check_fs+0x48>
 800b224:	2303      	movs	r3, #3
 800b226:	e029      	b.n	800b27c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b22e:	2be9      	cmp	r3, #233	; 0xe9
 800b230:	d009      	beq.n	800b246 <check_fs+0x66>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b238:	2beb      	cmp	r3, #235	; 0xeb
 800b23a:	d11e      	bne.n	800b27a <check_fs+0x9a>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b242:	2b90      	cmp	r3, #144	; 0x90
 800b244:	d119      	bne.n	800b27a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3330      	adds	r3, #48	; 0x30
 800b24a:	3336      	adds	r3, #54	; 0x36
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fe1f 	bl	8009e90 <ld_dword>
 800b252:	4603      	mov	r3, r0
 800b254:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b258:	4a0a      	ldr	r2, [pc, #40]	; (800b284 <check_fs+0xa4>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d101      	bne.n	800b262 <check_fs+0x82>
 800b25e:	2300      	movs	r3, #0
 800b260:	e00c      	b.n	800b27c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3330      	adds	r3, #48	; 0x30
 800b266:	3352      	adds	r3, #82	; 0x52
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fe fe11 	bl	8009e90 <ld_dword>
 800b26e:	4602      	mov	r2, r0
 800b270:	4b05      	ldr	r3, [pc, #20]	; (800b288 <check_fs+0xa8>)
 800b272:	429a      	cmp	r2, r3
 800b274:	d101      	bne.n	800b27a <check_fs+0x9a>
 800b276:	2300      	movs	r3, #0
 800b278:	e000      	b.n	800b27c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b27a:	2302      	movs	r3, #2
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	00544146 	.word	0x00544146
 800b288:	33544146 	.word	0x33544146

0800b28c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b096      	sub	sp, #88	; 0x58
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	4613      	mov	r3, r2
 800b298:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff ff58 	bl	800b156 <get_ldnumber>
 800b2a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da01      	bge.n	800b2b2 <find_volume+0x26>
 800b2ae:	230b      	movs	r3, #11
 800b2b0:	e22e      	b.n	800b710 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b2b2:	4aa8      	ldr	r2, [pc, #672]	; (800b554 <find_volume+0x2c8>)
 800b2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <find_volume+0x3a>
 800b2c2:	230c      	movs	r3, #12
 800b2c4:	e224      	b.n	800b710 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b2cc:	79fb      	ldrb	r3, [r7, #7]
 800b2ce:	f023 0301 	bic.w	r3, r3, #1
 800b2d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01a      	beq.n	800b312 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	785b      	ldrb	r3, [r3, #1]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe fd1f 	bl	8009d24 <disk_status>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b2ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10c      	bne.n	800b312 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d007      	beq.n	800b30e <find_volume+0x82>
 800b2fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b30a:	230a      	movs	r3, #10
 800b30c:	e200      	b.n	800b710 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b30e:	2300      	movs	r3, #0
 800b310:	e1fe      	b.n	800b710 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	2200      	movs	r2, #0
 800b316:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	785b      	ldrb	r3, [r3, #1]
 800b324:	4618      	mov	r0, r3
 800b326:	f7fe fd17 	bl	8009d58 <disk_initialize>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b33c:	2303      	movs	r3, #3
 800b33e:	e1e7      	b.n	800b710 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d007      	beq.n	800b356 <find_volume+0xca>
 800b346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b34a:	f003 0304 	and.w	r3, r3, #4
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b352:	230a      	movs	r3, #10
 800b354:	e1dc      	b.n	800b710 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b35a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b35c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b35e:	f7ff ff3f 	bl	800b1e0 <check_fs>
 800b362:	4603      	mov	r3, r0
 800b364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d14b      	bne.n	800b408 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b370:	2300      	movs	r3, #0
 800b372:	643b      	str	r3, [r7, #64]	; 0x40
 800b374:	e01f      	b.n	800b3b6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b378:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b37c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37e:	011b      	lsls	r3, r3, #4
 800b380:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b384:	4413      	add	r3, r2
 800b386:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	3304      	adds	r3, #4
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d006      	beq.n	800b3a0 <find_volume+0x114>
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	3308      	adds	r3, #8
 800b396:	4618      	mov	r0, r3
 800b398:	f7fe fd7a 	bl	8009e90 <ld_dword>
 800b39c:	4602      	mov	r2, r0
 800b39e:	e000      	b.n	800b3a2 <find_volume+0x116>
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b3aa:	440b      	add	r3, r1
 800b3ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800b3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d9dc      	bls.n	800b376 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b3bc:	2300      	movs	r3, #0
 800b3be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <find_volume+0x140>
 800b3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b3da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d005      	beq.n	800b3ee <find_volume+0x162>
 800b3e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3e6:	f7ff fefb 	bl	800b1e0 <check_fs>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	e000      	b.n	800b3f0 <find_volume+0x164>
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d905      	bls.n	800b408 <find_volume+0x17c>
 800b3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3fe:	3301      	adds	r3, #1
 800b400:	643b      	str	r3, [r7, #64]	; 0x40
 800b402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b404:	2b03      	cmp	r3, #3
 800b406:	d9e1      	bls.n	800b3cc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d101      	bne.n	800b414 <find_volume+0x188>
 800b410:	2301      	movs	r3, #1
 800b412:	e17d      	b.n	800b710 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b414:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d901      	bls.n	800b420 <find_volume+0x194>
 800b41c:	230d      	movs	r3, #13
 800b41e:	e177      	b.n	800b710 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	3330      	adds	r3, #48	; 0x30
 800b424:	330b      	adds	r3, #11
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fd1a 	bl	8009e60 <ld_word>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b432:	d001      	beq.n	800b438 <find_volume+0x1ac>
 800b434:	230d      	movs	r3, #13
 800b436:	e16b      	b.n	800b710 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	3330      	adds	r3, #48	; 0x30
 800b43c:	3316      	adds	r3, #22
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fd0e 	bl	8009e60 <ld_word>
 800b444:	4603      	mov	r3, r0
 800b446:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d106      	bne.n	800b45c <find_volume+0x1d0>
 800b44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b450:	3330      	adds	r3, #48	; 0x30
 800b452:	3324      	adds	r3, #36	; 0x24
 800b454:	4618      	mov	r0, r3
 800b456:	f7fe fd1b 	bl	8009e90 <ld_dword>
 800b45a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b460:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	789b      	ldrb	r3, [r3, #2]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d005      	beq.n	800b480 <find_volume+0x1f4>
 800b474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b476:	789b      	ldrb	r3, [r3, #2]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d001      	beq.n	800b480 <find_volume+0x1f4>
 800b47c:	230d      	movs	r3, #13
 800b47e:	e147      	b.n	800b710 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	789b      	ldrb	r3, [r3, #2]
 800b484:	461a      	mov	r2, r3
 800b486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b488:	fb02 f303 	mul.w	r3, r2, r3
 800b48c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b494:	b29a      	uxth	r2, r3
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49c:	895b      	ldrh	r3, [r3, #10]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d008      	beq.n	800b4b4 <find_volume+0x228>
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	895b      	ldrh	r3, [r3, #10]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	895b      	ldrh	r3, [r3, #10]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <find_volume+0x22c>
 800b4b4:	230d      	movs	r3, #13
 800b4b6:	e12b      	b.n	800b710 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	3330      	adds	r3, #48	; 0x30
 800b4bc:	3311      	adds	r3, #17
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fcce 	bl	8009e60 <ld_word>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ce:	891b      	ldrh	r3, [r3, #8]
 800b4d0:	f003 030f 	and.w	r3, r3, #15
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <find_volume+0x252>
 800b4da:	230d      	movs	r3, #13
 800b4dc:	e118      	b.n	800b710 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e0:	3330      	adds	r3, #48	; 0x30
 800b4e2:	3313      	adds	r3, #19
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe fcbb 	bl	8009e60 <ld_word>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b4ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d106      	bne.n	800b502 <find_volume+0x276>
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	3330      	adds	r3, #48	; 0x30
 800b4f8:	3320      	adds	r3, #32
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fe fcc8 	bl	8009e90 <ld_dword>
 800b500:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	3330      	adds	r3, #48	; 0x30
 800b506:	330e      	adds	r3, #14
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe fca9 	bl	8009e60 <ld_word>
 800b50e:	4603      	mov	r3, r0
 800b510:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b512:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <find_volume+0x290>
 800b518:	230d      	movs	r3, #13
 800b51a:	e0f9      	b.n	800b710 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b51c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b520:	4413      	add	r3, r2
 800b522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b524:	8912      	ldrh	r2, [r2, #8]
 800b526:	0912      	lsrs	r2, r2, #4
 800b528:	b292      	uxth	r2, r2
 800b52a:	4413      	add	r3, r2
 800b52c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b52e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	429a      	cmp	r2, r3
 800b534:	d201      	bcs.n	800b53a <find_volume+0x2ae>
 800b536:	230d      	movs	r3, #13
 800b538:	e0ea      	b.n	800b710 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b53a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b542:	8952      	ldrh	r2, [r2, #10]
 800b544:	fbb3 f3f2 	udiv	r3, r3, r2
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d103      	bne.n	800b558 <find_volume+0x2cc>
 800b550:	230d      	movs	r3, #13
 800b552:	e0dd      	b.n	800b710 <find_volume+0x484>
 800b554:	2000134c 	.word	0x2000134c
		fmt = FS_FAT32;
 800b558:	2303      	movs	r3, #3
 800b55a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b564:	4293      	cmp	r3, r2
 800b566:	d802      	bhi.n	800b56e <find_volume+0x2e2>
 800b568:	2302      	movs	r3, #2
 800b56a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b574:	4293      	cmp	r3, r2
 800b576:	d802      	bhi.n	800b57e <find_volume+0x2f2>
 800b578:	2301      	movs	r3, #1
 800b57a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	1c9a      	adds	r2, r3, #2
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b58a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b58c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b590:	441a      	add	r2, r3
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	441a      	add	r2, r3
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b5a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d11e      	bne.n	800b5e6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	3330      	adds	r3, #48	; 0x30
 800b5ac:	332a      	adds	r3, #42	; 0x2a
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe fc56 	bl	8009e60 <ld_word>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <find_volume+0x332>
 800b5ba:	230d      	movs	r3, #13
 800b5bc:	e0a8      	b.n	800b710 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	891b      	ldrh	r3, [r3, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <find_volume+0x33e>
 800b5c6:	230d      	movs	r3, #13
 800b5c8:	e0a2      	b.n	800b710 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	3330      	adds	r3, #48	; 0x30
 800b5ce:	332c      	adds	r3, #44	; 0x2c
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fc5d 	bl	8009e90 <ld_dword>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b5e4:	e01f      	b.n	800b626 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	891b      	ldrh	r3, [r3, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <find_volume+0x366>
 800b5ee:	230d      	movs	r3, #13
 800b5f0:	e08e      	b.n	800b710 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f4:	6a1a      	ldr	r2, [r3, #32]
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f8:	441a      	add	r2, r3
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b602:	2b02      	cmp	r3, #2
 800b604:	d103      	bne.n	800b60e <find_volume+0x382>
 800b606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	e00a      	b.n	800b624 <find_volume+0x398>
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	695a      	ldr	r2, [r3, #20]
 800b612:	4613      	mov	r3, r2
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	4413      	add	r3, r2
 800b618:	085a      	lsrs	r2, r3, #1
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b624:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b628:	699a      	ldr	r2, [r3, #24]
 800b62a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b62c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b630:	0a5b      	lsrs	r3, r3, #9
 800b632:	429a      	cmp	r2, r3
 800b634:	d201      	bcs.n	800b63a <find_volume+0x3ae>
 800b636:	230d      	movs	r3, #13
 800b638:	e06a      	b.n	800b710 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	f04f 32ff 	mov.w	r2, #4294967295
 800b640:	611a      	str	r2, [r3, #16]
 800b642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b644:	691a      	ldr	r2, [r3, #16]
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	2280      	movs	r2, #128	; 0x80
 800b64e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b654:	2b03      	cmp	r3, #3
 800b656:	d149      	bne.n	800b6ec <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	3330      	adds	r3, #48	; 0x30
 800b65c:	3330      	adds	r3, #48	; 0x30
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe fbfe 	bl	8009e60 <ld_word>
 800b664:	4603      	mov	r3, r0
 800b666:	2b01      	cmp	r3, #1
 800b668:	d140      	bne.n	800b6ec <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66c:	3301      	adds	r3, #1
 800b66e:	4619      	mov	r1, r3
 800b670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b672:	f7fe fea5 	bl	800a3c0 <move_window>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d137      	bne.n	800b6ec <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	2200      	movs	r2, #0
 800b680:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b684:	3330      	adds	r3, #48	; 0x30
 800b686:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fbe8 	bl	8009e60 <ld_word>
 800b690:	4603      	mov	r3, r0
 800b692:	461a      	mov	r2, r3
 800b694:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b698:	429a      	cmp	r2, r3
 800b69a:	d127      	bne.n	800b6ec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	3330      	adds	r3, #48	; 0x30
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fbf5 	bl	8009e90 <ld_dword>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	4b1b      	ldr	r3, [pc, #108]	; (800b718 <find_volume+0x48c>)
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d11e      	bne.n	800b6ec <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	3330      	adds	r3, #48	; 0x30
 800b6b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fbea 	bl	8009e90 <ld_dword>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	4b17      	ldr	r3, [pc, #92]	; (800b71c <find_volume+0x490>)
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d113      	bne.n	800b6ec <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c6:	3330      	adds	r3, #48	; 0x30
 800b6c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe fbdf 	bl	8009e90 <ld_dword>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6da:	3330      	adds	r3, #48	; 0x30
 800b6dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fbd5 	bl	8009e90 <ld_dword>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ea:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b6f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b6f4:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <find_volume+0x494>)
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	4b08      	ldr	r3, [pc, #32]	; (800b720 <find_volume+0x494>)
 800b6fe:	801a      	strh	r2, [r3, #0]
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <find_volume+0x494>)
 800b702:	881a      	ldrh	r2, [r3, #0]
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b70a:	f7fe fdf1 	bl	800a2f0 <clear_lock>
#endif
	return FR_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3758      	adds	r7, #88	; 0x58
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	41615252 	.word	0x41615252
 800b71c:	61417272 	.word	0x61417272
 800b720:	20001350 	.word	0x20001350

0800b724 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b72e:	2309      	movs	r3, #9
 800b730:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01c      	beq.n	800b772 <validate+0x4e>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d018      	beq.n	800b772 <validate+0x4e>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d013      	beq.n	800b772 <validate+0x4e>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	889a      	ldrh	r2, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	88db      	ldrh	r3, [r3, #6]
 800b754:	429a      	cmp	r2, r3
 800b756:	d10c      	bne.n	800b772 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fae0 	bl	8009d24 <disk_status>
 800b764:	4603      	mov	r3, r0
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <validate+0x4e>
			res = FR_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <validate+0x5a>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	e000      	b.n	800b780 <validate+0x5c>
 800b77e:	2300      	movs	r3, #0
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	6013      	str	r3, [r2, #0]
	return res;
 800b784:	7bfb      	ldrb	r3, [r7, #15]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b088      	sub	sp, #32
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	4613      	mov	r3, r2
 800b79c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b7a2:	f107 0310 	add.w	r3, r7, #16
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff fcd5 	bl	800b156 <get_ldnumber>
 800b7ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	da01      	bge.n	800b7b8 <f_mount+0x28>
 800b7b4:	230b      	movs	r3, #11
 800b7b6:	e02b      	b.n	800b810 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b7b8:	4a17      	ldr	r2, [pc, #92]	; (800b818 <f_mount+0x88>)
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d005      	beq.n	800b7d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b7c8:	69b8      	ldr	r0, [r7, #24]
 800b7ca:	f7fe fd91 	bl	800a2f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d002      	beq.n	800b7e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	490d      	ldr	r1, [pc, #52]	; (800b818 <f_mount+0x88>)
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <f_mount+0x66>
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d001      	beq.n	800b7fa <f_mount+0x6a>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e00a      	b.n	800b810 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b7fa:	f107 010c 	add.w	r1, r7, #12
 800b7fe:	f107 0308 	add.w	r3, r7, #8
 800b802:	2200      	movs	r2, #0
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff fd41 	bl	800b28c <find_volume>
 800b80a:	4603      	mov	r3, r0
 800b80c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3720      	adds	r7, #32
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	2000134c 	.word	0x2000134c

0800b81c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b098      	sub	sp, #96	; 0x60
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	4613      	mov	r3, r2
 800b828:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <f_open+0x18>
 800b830:	2309      	movs	r3, #9
 800b832:	e1ad      	b.n	800bb90 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b834:	79fb      	ldrb	r3, [r7, #7]
 800b836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b83a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b83c:	79fa      	ldrb	r2, [r7, #7]
 800b83e:	f107 0110 	add.w	r1, r7, #16
 800b842:	f107 0308 	add.w	r3, r7, #8
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff fd20 	bl	800b28c <find_volume>
 800b84c:	4603      	mov	r3, r0
 800b84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b856:	2b00      	cmp	r3, #0
 800b858:	f040 8191 	bne.w	800bb7e <f_open+0x362>
		dj.obj.fs = fs;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	f107 0314 	add.w	r3, r7, #20
 800b866:	4611      	mov	r1, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff fc03 	bl	800b074 <follow_path>
 800b86e:	4603      	mov	r3, r0
 800b870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d11a      	bne.n	800b8b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b87c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b880:	b25b      	sxtb	r3, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	da03      	bge.n	800b88e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b886:	2306      	movs	r3, #6
 800b888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b88c:	e011      	b.n	800b8b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b88e:	79fb      	ldrb	r3, [r7, #7]
 800b890:	f023 0301 	bic.w	r3, r3, #1
 800b894:	2b00      	cmp	r3, #0
 800b896:	bf14      	ite	ne
 800b898:	2301      	movne	r3, #1
 800b89a:	2300      	moveq	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f107 0314 	add.w	r3, r7, #20
 800b8a4:	4611      	mov	r1, r2
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fbda 	bl	800a060 <chk_lock>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	f003 031c 	and.w	r3, r3, #28
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d07f      	beq.n	800b9bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b8bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d017      	beq.n	800b8f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b8c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8c8:	2b04      	cmp	r3, #4
 800b8ca:	d10e      	bne.n	800b8ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b8cc:	f7fe fc24 	bl	800a118 <enq_lock>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d006      	beq.n	800b8e4 <f_open+0xc8>
 800b8d6:	f107 0314 	add.w	r3, r7, #20
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff fb03 	bl	800aee6 <dir_register>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	e000      	b.n	800b8e6 <f_open+0xca>
 800b8e4:	2312      	movs	r3, #18
 800b8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b8ea:	79fb      	ldrb	r3, [r7, #7]
 800b8ec:	f043 0308 	orr.w	r3, r3, #8
 800b8f0:	71fb      	strb	r3, [r7, #7]
 800b8f2:	e010      	b.n	800b916 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b8f4:	7ebb      	ldrb	r3, [r7, #26]
 800b8f6:	f003 0311 	and.w	r3, r3, #17
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d003      	beq.n	800b906 <f_open+0xea>
					res = FR_DENIED;
 800b8fe:	2307      	movs	r3, #7
 800b900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b904:	e007      	b.n	800b916 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <f_open+0xfa>
 800b910:	2308      	movs	r3, #8
 800b912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b916:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d168      	bne.n	800b9f0 <f_open+0x1d4>
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	f003 0308 	and.w	r3, r3, #8
 800b924:	2b00      	cmp	r3, #0
 800b926:	d063      	beq.n	800b9f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b928:	f7fb fa04 	bl	8006d34 <get_fattime>
 800b92c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b930:	330e      	adds	r3, #14
 800b932:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fae9 	bl	8009f0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b93c:	3316      	adds	r3, #22
 800b93e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b940:	4618      	mov	r0, r3
 800b942:	f7fe fae3 	bl	8009f0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b948:	330b      	adds	r3, #11
 800b94a:	2220      	movs	r2, #32
 800b94c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b952:	4611      	mov	r1, r2
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff fa32 	bl	800adbe <ld_clust>
 800b95a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b960:	2200      	movs	r2, #0
 800b962:	4618      	mov	r0, r3
 800b964:	f7ff fa4a 	bl	800adfc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96a:	331c      	adds	r3, #28
 800b96c:	2100      	movs	r1, #0
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe facc 	bl	8009f0c <st_dword>
					fs->wflag = 1;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2201      	movs	r2, #1
 800b978:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d037      	beq.n	800b9f0 <f_open+0x1d4>
						dw = fs->winsect;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b986:	f107 0314 	add.w	r3, r7, #20
 800b98a:	2200      	movs	r2, #0
 800b98c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe ff5d 	bl	800a84e <remove_chain>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b99a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d126      	bne.n	800b9f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe fd0a 	bl	800a3c0 <move_window>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b9b6:	3a01      	subs	r2, #1
 800b9b8:	60da      	str	r2, [r3, #12]
 800b9ba:	e019      	b.n	800b9f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b9bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d115      	bne.n	800b9f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b9c4:	7ebb      	ldrb	r3, [r7, #26]
 800b9c6:	f003 0310 	and.w	r3, r3, #16
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b9ce:	2304      	movs	r3, #4
 800b9d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b9d4:	e00c      	b.n	800b9f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <f_open+0x1d4>
 800b9e0:	7ebb      	ldrb	r3, [r7, #26]
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <f_open+0x1d4>
						res = FR_DENIED;
 800b9ea:	2307      	movs	r3, #7
 800b9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b9f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d128      	bne.n	800ba4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	f003 0308 	and.w	r3, r3, #8
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ba12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	f023 0301 	bic.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bf14      	ite	ne
 800ba22:	2301      	movne	r3, #1
 800ba24:	2300      	moveq	r3, #0
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	461a      	mov	r2, r3
 800ba2a:	f107 0314 	add.w	r3, r7, #20
 800ba2e:	4611      	mov	r1, r2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe fb93 	bl	800a15c <inc_lock>
 800ba36:	4602      	mov	r2, r0
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <f_open+0x22e>
 800ba44:	2302      	movs	r3, #2
 800ba46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ba4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f040 8095 	bne.w	800bb7e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba58:	4611      	mov	r1, r2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff f9af 	bl	800adbe <ld_clust>
 800ba60:	4602      	mov	r2, r0
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ba66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba68:	331c      	adds	r3, #28
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fa10 	bl	8009e90 <ld_dword>
 800ba70:	4602      	mov	r2, r0
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	88da      	ldrh	r2, [r3, #6]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	79fa      	ldrb	r2, [r7, #7]
 800ba8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2200      	movs	r2, #0
 800ba94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	3330      	adds	r3, #48	; 0x30
 800baa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baaa:	2100      	movs	r1, #0
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe fa7a 	bl	8009fa6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	f003 0320 	and.w	r3, r3, #32
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d060      	beq.n	800bb7e <f_open+0x362>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d05c      	beq.n	800bb7e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	68da      	ldr	r2, [r3, #12]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	895b      	ldrh	r3, [r3, #10]
 800bad0:	025b      	lsls	r3, r3, #9
 800bad2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	657b      	str	r3, [r7, #84]	; 0x54
 800bae0:	e016      	b.n	800bb10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fd25 	bl	800a536 <get_fat>
 800baec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800baee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d802      	bhi.n	800bafa <f_open+0x2de>
 800baf4:	2302      	movs	r3, #2
 800baf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb00:	d102      	bne.n	800bb08 <f_open+0x2ec>
 800bb02:	2301      	movs	r3, #1
 800bb04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bb08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	657b      	str	r3, [r7, #84]	; 0x54
 800bb10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d103      	bne.n	800bb20 <f_open+0x304>
 800bb18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d8e0      	bhi.n	800bae2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bb26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d127      	bne.n	800bb7e <f_open+0x362>
 800bb2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d022      	beq.n	800bb7e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fcdb 	bl	800a4f8 <clust2sect>
 800bb42:	6478      	str	r0, [r7, #68]	; 0x44
 800bb44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d103      	bne.n	800bb52 <f_open+0x336>
						res = FR_INT_ERR;
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb50:	e015      	b.n	800bb7e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb54:	0a5a      	lsrs	r2, r3, #9
 800bb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb58:	441a      	add	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	7858      	ldrb	r0, [r3, #1]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a1a      	ldr	r2, [r3, #32]
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	f7fe f919 	bl	8009da4 <disk_read>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <f_open+0x362>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <f_open+0x370>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3760      	adds	r7, #96	; 0x60
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08e      	sub	sp, #56	; 0x38
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f107 0214 	add.w	r2, r7, #20
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7ff fdb3 	bl	800b724 <validate>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d107      	bne.n	800bbdc <f_read+0x44>
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	7d5b      	ldrb	r3, [r3, #21]
 800bbd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bbd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d002      	beq.n	800bbe2 <f_read+0x4a>
 800bbdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbe0:	e115      	b.n	800be0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	7d1b      	ldrb	r3, [r3, #20]
 800bbe6:	f003 0301 	and.w	r3, r3, #1
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <f_read+0x5a>
 800bbee:	2307      	movs	r3, #7
 800bbf0:	e10d      	b.n	800be0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	68da      	ldr	r2, [r3, #12]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6a3b      	ldr	r3, [r7, #32]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	f240 80fe 	bls.w	800be04 <f_read+0x26c>
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bc0c:	e0fa      	b.n	800be04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f040 80c6 	bne.w	800bda8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	0a5b      	lsrs	r3, r3, #9
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	8952      	ldrh	r2, [r2, #10]
 800bc26:	3a01      	subs	r2, #1
 800bc28:	4013      	ands	r3, r2
 800bc2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d12f      	bne.n	800bc92 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d103      	bne.n	800bc42 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc40:	e013      	b.n	800bc6a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d007      	beq.n	800bc5a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	699b      	ldr	r3, [r3, #24]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f7fe fef9 	bl	800aa48 <clmt_clust>
 800bc56:	6338      	str	r0, [r7, #48]	; 0x30
 800bc58:	e007      	b.n	800bc6a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	69db      	ldr	r3, [r3, #28]
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	f7fe fc67 	bl	800a536 <get_fat>
 800bc68:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d804      	bhi.n	800bc7a <f_read+0xe2>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2202      	movs	r2, #2
 800bc74:	755a      	strb	r2, [r3, #21]
 800bc76:	2302      	movs	r3, #2
 800bc78:	e0c9      	b.n	800be0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d104      	bne.n	800bc8c <f_read+0xf4>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2201      	movs	r2, #1
 800bc86:	755a      	strb	r2, [r3, #21]
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e0c0      	b.n	800be0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f7fe fc2c 	bl	800a4f8 <clust2sect>
 800bca0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d104      	bne.n	800bcb2 <f_read+0x11a>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	755a      	strb	r2, [r3, #21]
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e0ad      	b.n	800be0e <f_read+0x276>
			sect += csect;
 800bcb2:	69ba      	ldr	r2, [r7, #24]
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	0a5b      	lsrs	r3, r3, #9
 800bcbe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d039      	beq.n	800bd3a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	4413      	add	r3, r2
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	8952      	ldrh	r2, [r2, #10]
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d905      	bls.n	800bce0 <f_read+0x148>
					cc = fs->csize - csect;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	895b      	ldrh	r3, [r3, #10]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	7858      	ldrb	r0, [r3, #1]
 800bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce6:	69ba      	ldr	r2, [r7, #24]
 800bce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcea:	f7fe f85b 	bl	8009da4 <disk_read>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <f_read+0x166>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	755a      	strb	r2, [r3, #21]
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e087      	b.n	800be0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	7d1b      	ldrb	r3, [r3, #20]
 800bd02:	b25b      	sxtb	r3, r3
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	da14      	bge.n	800bd32 <f_read+0x19a>
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	6a1a      	ldr	r2, [r3, #32]
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d90d      	bls.n	800bd32 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a1a      	ldr	r2, [r3, #32]
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	025b      	lsls	r3, r3, #9
 800bd20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd22:	18d0      	adds	r0, r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3330      	adds	r3, #48	; 0x30
 800bd28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	f7fe f919 	bl	8009f64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	025b      	lsls	r3, r3, #9
 800bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bd38:	e050      	b.n	800bddc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d02e      	beq.n	800bda2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	7d1b      	ldrb	r3, [r3, #20]
 800bd48:	b25b      	sxtb	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da18      	bge.n	800bd80 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	7858      	ldrb	r0, [r3, #1]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6a1a      	ldr	r2, [r3, #32]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	f7fe f841 	bl	8009de4 <disk_write>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <f_read+0x1da>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	755a      	strb	r2, [r3, #21]
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e04d      	b.n	800be0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	7d1b      	ldrb	r3, [r3, #20]
 800bd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	7858      	ldrb	r0, [r3, #1]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	f7fe f809 	bl	8009da4 <disk_read>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d004      	beq.n	800bda2 <f_read+0x20a>
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	755a      	strb	r2, [r3, #21]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e035      	b.n	800be0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bdb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bdb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d901      	bls.n	800bdc2 <f_read+0x22a>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd0:	4413      	add	r3, r2
 800bdd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdd8:	f7fe f8c4 	bl	8009f64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	4413      	add	r3, r2
 800bde2:	627b      	str	r3, [r7, #36]	; 0x24
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	699a      	ldr	r2, [r3, #24]
 800bde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdea:	441a      	add	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	619a      	str	r2, [r3, #24]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	441a      	add	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	601a      	str	r2, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	f47f af01 	bne.w	800bc0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3738      	adds	r7, #56	; 0x38
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b086      	sub	sp, #24
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f107 0208 	add.w	r2, r7, #8
 800be24:	4611      	mov	r1, r2
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff fc7c 	bl	800b724 <validate>
 800be2c:	4603      	mov	r3, r0
 800be2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d168      	bne.n	800bf08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7d1b      	ldrb	r3, [r3, #20]
 800be3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d062      	beq.n	800bf08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	7d1b      	ldrb	r3, [r3, #20]
 800be46:	b25b      	sxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	da15      	bge.n	800be78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	7858      	ldrb	r0, [r3, #1]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1a      	ldr	r2, [r3, #32]
 800be5a:	2301      	movs	r3, #1
 800be5c:	f7fd ffc2 	bl	8009de4 <disk_write>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <f_sync+0x54>
 800be66:	2301      	movs	r3, #1
 800be68:	e04f      	b.n	800bf0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7d1b      	ldrb	r3, [r3, #20]
 800be6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be72:	b2da      	uxtb	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be78:	f7fa ff5c 	bl	8006d34 <get_fattime>
 800be7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be84:	4619      	mov	r1, r3
 800be86:	4610      	mov	r0, r2
 800be88:	f7fe fa9a 	bl	800a3c0 <move_window>
 800be8c:	4603      	mov	r3, r0
 800be8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d138      	bne.n	800bf08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	330b      	adds	r3, #11
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	330b      	adds	r3, #11
 800bea6:	f042 0220 	orr.w	r2, r2, #32
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	461a      	mov	r2, r3
 800beb8:	68f9      	ldr	r1, [r7, #12]
 800beba:	f7fe ff9f 	bl	800adfc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f103 021c 	add.w	r2, r3, #28
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f7fe f81e 	bl	8009f0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3316      	adds	r3, #22
 800bed4:	6939      	ldr	r1, [r7, #16]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe f818 	bl	8009f0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3312      	adds	r3, #18
 800bee0:	2100      	movs	r1, #0
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fd fff7 	bl	8009ed6 <st_word>
					fs->wflag = 1;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2201      	movs	r2, #1
 800beec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fe fa93 	bl	800a41c <sync_fs>
 800bef6:	4603      	mov	r3, r0
 800bef8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	7d1b      	ldrb	r3, [r3, #20]
 800befe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf02:	b2da      	uxtb	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7ff ff7b 	bl	800be16 <f_sync>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d118      	bne.n	800bf5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f107 0208 	add.w	r2, r7, #8
 800bf30:	4611      	mov	r1, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fbf6 	bl	800b724 <validate>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10c      	bne.n	800bf5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe f996 	bl	800a278 <dec_lock>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d102      	bne.n	800bf5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b090      	sub	sp, #64	; 0x40
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f107 0208 	add.w	r2, r7, #8
 800bf76:	4611      	mov	r1, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff fbd3 	bl	800b724 <validate>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bf84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <f_lseek+0x2e>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7d5b      	ldrb	r3, [r3, #21]
 800bf90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bf94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <f_lseek+0x3c>
 800bf9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfa0:	e1e6      	b.n	800c370 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 80d1 	beq.w	800c14e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb2:	d15a      	bne.n	800c06a <f_lseek+0x104>
			tbl = fp->cltbl;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	1d1a      	adds	r2, r3, #4
 800bfbe:	627a      	str	r2, [r7, #36]	; 0x24
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	617b      	str	r3, [r7, #20]
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d03a      	beq.n	800c04a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	613b      	str	r3, [r7, #16]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	3302      	adds	r3, #2
 800bfe0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bfe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	3301      	adds	r3, #1
 800bfea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe faa0 	bl	800a536 <get_fat>
 800bff6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d804      	bhi.n	800c008 <f_lseek+0xa2>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2202      	movs	r2, #2
 800c002:	755a      	strb	r2, [r3, #21]
 800c004:	2302      	movs	r3, #2
 800c006:	e1b3      	b.n	800c370 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00e:	d104      	bne.n	800c01a <f_lseek+0xb4>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	755a      	strb	r2, [r3, #21]
 800c016:	2301      	movs	r3, #1
 800c018:	e1aa      	b.n	800c370 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3301      	adds	r3, #1
 800c01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c020:	429a      	cmp	r2, r3
 800c022:	d0de      	beq.n	800bfe2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d809      	bhi.n	800c040 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	627a      	str	r2, [r7, #36]	; 0x24
 800c032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c038:	1d1a      	adds	r2, r3, #4
 800c03a:	627a      	str	r2, [r7, #36]	; 0x24
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c046:	429a      	cmp	r2, r3
 800c048:	d3c4      	bcc.n	800bfd4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c050:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	429a      	cmp	r2, r3
 800c058:	d803      	bhi.n	800c062 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	2200      	movs	r2, #0
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	e184      	b.n	800c36c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c062:	2311      	movs	r3, #17
 800c064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c068:	e180      	b.n	800c36c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d902      	bls.n	800c07a <f_lseek+0x114>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8172 	beq.w	800c36c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7fe fcda 	bl	800aa48 <clmt_clust>
 800c094:	4602      	mov	r2, r0
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	69db      	ldr	r3, [r3, #28]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	f7fe fa28 	bl	800a4f8 <clust2sect>
 800c0a8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d104      	bne.n	800c0ba <f_lseek+0x154>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	755a      	strb	r2, [r3, #21]
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	e15a      	b.n	800c370 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	0a5b      	lsrs	r3, r3, #9
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	8952      	ldrh	r2, [r2, #10]
 800c0c4:	3a01      	subs	r2, #1
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8148 	beq.w	800c36c <f_lseek+0x406>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	69ba      	ldr	r2, [r7, #24]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	f000 8142 	beq.w	800c36c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7d1b      	ldrb	r3, [r3, #20]
 800c0ec:	b25b      	sxtb	r3, r3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	da18      	bge.n	800c124 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	7858      	ldrb	r0, [r3, #1]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a1a      	ldr	r2, [r3, #32]
 800c100:	2301      	movs	r3, #1
 800c102:	f7fd fe6f 	bl	8009de4 <disk_write>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d004      	beq.n	800c116 <f_lseek+0x1b0>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	755a      	strb	r2, [r3, #21]
 800c112:	2301      	movs	r3, #1
 800c114:	e12c      	b.n	800c370 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	7d1b      	ldrb	r3, [r3, #20]
 800c11a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	7858      	ldrb	r0, [r3, #1]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c12e:	2301      	movs	r3, #1
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	f7fd fe37 	bl	8009da4 <disk_read>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d004      	beq.n	800c146 <f_lseek+0x1e0>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	755a      	strb	r2, [r3, #21]
 800c142:	2301      	movs	r3, #1
 800c144:	e114      	b.n	800c370 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	69ba      	ldr	r2, [r7, #24]
 800c14a:	621a      	str	r2, [r3, #32]
 800c14c:	e10e      	b.n	800c36c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	429a      	cmp	r2, r3
 800c156:	d908      	bls.n	800c16a <f_lseek+0x204>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7d1b      	ldrb	r3, [r3, #20]
 800c15c:	f003 0302 	and.w	r3, r3, #2
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	699b      	ldr	r3, [r3, #24]
 800c16e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	637b      	str	r3, [r7, #52]	; 0x34
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c178:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 80a7 	beq.w	800c2d0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	895b      	ldrh	r3, [r3, #10]
 800c186:	025b      	lsls	r3, r3, #9
 800c188:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d01b      	beq.n	800c1c8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	1e5a      	subs	r2, r3, #1
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	fbb2 f2f3 	udiv	r2, r2, r3
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	1e59      	subs	r1, r3, #1
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d30f      	bcc.n	800c1c8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c1a8:	6a3b      	ldr	r3, [r7, #32]
 800c1aa:	1e5a      	subs	r2, r3, #1
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	425b      	negs	r3, r3
 800c1b0:	401a      	ands	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1c6:	e022      	b.n	800c20e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d119      	bne.n	800c208 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe fb9d 	bl	800a918 <create_chain>
 800c1de:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d104      	bne.n	800c1f0 <f_lseek+0x28a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	755a      	strb	r2, [r3, #21]
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e0bf      	b.n	800c370 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f6:	d104      	bne.n	800c202 <f_lseek+0x29c>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	755a      	strb	r2, [r3, #21]
 800c1fe:	2301      	movs	r3, #1
 800c200:	e0b6      	b.n	800c370 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c206:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c20c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c210:	2b00      	cmp	r3, #0
 800c212:	d05d      	beq.n	800c2d0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c214:	e03a      	b.n	800c28c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	603b      	str	r3, [r7, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699a      	ldr	r2, [r3, #24]
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	441a      	add	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7d1b      	ldrb	r3, [r3, #20]
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe fb6c 	bl	800a918 <create_chain>
 800c240:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	2b00      	cmp	r3, #0
 800c246:	d108      	bne.n	800c25a <f_lseek+0x2f4>
							ofs = 0; break;
 800c248:	2300      	movs	r3, #0
 800c24a:	603b      	str	r3, [r7, #0]
 800c24c:	e022      	b.n	800c294 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe f96f 	bl	800a536 <get_fat>
 800c258:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d104      	bne.n	800c26c <f_lseek+0x306>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	755a      	strb	r2, [r3, #21]
 800c268:	2301      	movs	r3, #1
 800c26a:	e081      	b.n	800c370 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d904      	bls.n	800c27c <f_lseek+0x316>
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c278:	429a      	cmp	r2, r3
 800c27a:	d304      	bcc.n	800c286 <f_lseek+0x320>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2202      	movs	r2, #2
 800c280:	755a      	strb	r2, [r3, #21]
 800c282:	2302      	movs	r3, #2
 800c284:	e074      	b.n	800c370 <f_lseek+0x40a>
					fp->clust = clst;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c28a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c28c:	683a      	ldr	r2, [r7, #0]
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	429a      	cmp	r2, r3
 800c292:	d8c0      	bhi.n	800c216 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	699a      	ldr	r2, [r3, #24]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	441a      	add	r2, r3
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d012      	beq.n	800c2d0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe f922 	bl	800a4f8 <clust2sect>
 800c2b4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d104      	bne.n	800c2c6 <f_lseek+0x360>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	755a      	strb	r2, [r3, #21]
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	e054      	b.n	800c370 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	0a5b      	lsrs	r3, r3, #9
 800c2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2cc:	4413      	add	r3, r2
 800c2ce:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	699a      	ldr	r2, [r3, #24]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d90a      	bls.n	800c2f2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	699a      	ldr	r2, [r3, #24]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	7d1b      	ldrb	r3, [r3, #20]
 800c2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d036      	beq.n	800c36c <f_lseek+0x406>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c304:	429a      	cmp	r2, r3
 800c306:	d031      	beq.n	800c36c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da18      	bge.n	800c344 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	7858      	ldrb	r0, [r3, #1]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a1a      	ldr	r2, [r3, #32]
 800c320:	2301      	movs	r3, #1
 800c322:	f7fd fd5f 	bl	8009de4 <disk_write>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <f_lseek+0x3d0>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	755a      	strb	r2, [r3, #21]
 800c332:	2301      	movs	r3, #1
 800c334:	e01c      	b.n	800c370 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	7d1b      	ldrb	r3, [r3, #20]
 800c33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	7858      	ldrb	r0, [r3, #1]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c34e:	2301      	movs	r3, #1
 800c350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c352:	f7fd fd27 	bl	8009da4 <disk_read>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d004      	beq.n	800c366 <f_lseek+0x400>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	755a      	strb	r2, [r3, #21]
 800c362:	2301      	movs	r3, #1
 800c364:	e004      	b.n	800c370 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c36a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c36c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c370:	4618      	mov	r0, r3
 800c372:	3740      	adds	r7, #64	; 0x40
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c378:	b480      	push	{r7}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	4613      	mov	r3, r2
 800c384:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c386:	2301      	movs	r3, #1
 800c388:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c38a:	2300      	movs	r3, #0
 800c38c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c38e:	4b1f      	ldr	r3, [pc, #124]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c390:	7a5b      	ldrb	r3, [r3, #9]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d131      	bne.n	800c3fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c398:	4b1c      	ldr	r3, [pc, #112]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c39a:	7a5b      	ldrb	r3, [r3, #9]
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	461a      	mov	r2, r3
 800c3a0:	4b1a      	ldr	r3, [pc, #104]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c3a6:	4b19      	ldr	r3, [pc, #100]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3a8:	7a5b      	ldrb	r3, [r3, #9]
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	4a17      	ldr	r2, [pc, #92]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c3b6:	4b15      	ldr	r3, [pc, #84]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3b8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	461a      	mov	r2, r3
 800c3be:	4b13      	ldr	r3, [pc, #76]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3c0:	4413      	add	r3, r2
 800c3c2:	79fa      	ldrb	r2, [r7, #7]
 800c3c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3c6:	4b11      	ldr	r3, [pc, #68]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3c8:	7a5b      	ldrb	r3, [r3, #9]
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	b2d1      	uxtb	r1, r2
 800c3d0:	4a0e      	ldr	r2, [pc, #56]	; (800c40c <FATFS_LinkDriverEx+0x94>)
 800c3d2:	7251      	strb	r1, [r2, #9]
 800c3d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
 800c3d8:	3330      	adds	r3, #48	; 0x30
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	223a      	movs	r2, #58	; 0x3a
 800c3e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3302      	adds	r3, #2
 800c3ec:	222f      	movs	r2, #47	; 0x2f
 800c3ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	3303      	adds	r3, #3
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	20001374 	.word	0x20001374

0800c410 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c41a:	2200      	movs	r2, #0
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff ffaa 	bl	800c378 <FATFS_LinkDriverEx>
 800c424:	4603      	mov	r3, r0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
	...

0800c430 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c434:	2201      	movs	r2, #1
 800c436:	490e      	ldr	r1, [pc, #56]	; (800c470 <MX_USB_HOST_Init+0x40>)
 800c438:	480e      	ldr	r0, [pc, #56]	; (800c474 <MX_USB_HOST_Init+0x44>)
 800c43a:	f7fc f919 	bl	8008670 <USBH_Init>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c444:	f7f4 fb40 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800c448:	490b      	ldr	r1, [pc, #44]	; (800c478 <MX_USB_HOST_Init+0x48>)
 800c44a:	480a      	ldr	r0, [pc, #40]	; (800c474 <MX_USB_HOST_Init+0x44>)
 800c44c:	f7fc f99e 	bl	800878c <USBH_RegisterClass>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c456:	f7f4 fb37 	bl	8000ac8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c45a:	4806      	ldr	r0, [pc, #24]	; (800c474 <MX_USB_HOST_Init+0x44>)
 800c45c:	f7fc fa22 	bl	80088a4 <USBH_Start>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c466:	f7f4 fb2f 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c46a:	bf00      	nop
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	0800c491 	.word	0x0800c491
 800c474:	200018f4 	.word	0x200018f4
 800c478:	2000000c 	.word	0x2000000c

0800c47c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c480:	4802      	ldr	r0, [pc, #8]	; (800c48c <MX_USB_HOST_Process+0x10>)
 800c482:	f7fc fa1f 	bl	80088c4 <USBH_Process>
}
 800c486:	bf00      	nop
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	200018f4 	.word	0x200018f4

0800c490 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	460b      	mov	r3, r1
 800c49a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c49c:	78fb      	ldrb	r3, [r7, #3]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d819      	bhi.n	800c4d8 <USBH_UserProcess+0x48>
 800c4a4:	a201      	add	r2, pc, #4	; (adr r2, 800c4ac <USBH_UserProcess+0x1c>)
 800c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4aa:	bf00      	nop
 800c4ac:	0800c4d9 	.word	0x0800c4d9
 800c4b0:	0800c4c9 	.word	0x0800c4c9
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4d1 	.word	0x0800c4d1
 800c4bc:	0800c4c1 	.word	0x0800c4c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c4c0:	4b09      	ldr	r3, [pc, #36]	; (800c4e8 <USBH_UserProcess+0x58>)
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	701a      	strb	r2, [r3, #0]
  break;
 800c4c6:	e008      	b.n	800c4da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c4c8:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <USBH_UserProcess+0x58>)
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	701a      	strb	r2, [r3, #0]
  break;
 800c4ce:	e004      	b.n	800c4da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c4d0:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <USBH_UserProcess+0x58>)
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	701a      	strb	r2, [r3, #0]
  break;
 800c4d6:	e000      	b.n	800c4da <USBH_UserProcess+0x4a>

  default:
  break;
 800c4d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	20001380 	.word	0x20001380

0800c4ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08a      	sub	sp, #40	; 0x28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4f4:	f107 0314 	add.w	r3, r7, #20
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]
 800c4fc:	605a      	str	r2, [r3, #4]
 800c4fe:	609a      	str	r2, [r3, #8]
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c50c:	d147      	bne.n	800c59e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c50e:	2300      	movs	r3, #0
 800c510:	613b      	str	r3, [r7, #16]
 800c512:	4b25      	ldr	r3, [pc, #148]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c516:	4a24      	ldr	r2, [pc, #144]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c518:	f043 0301 	orr.w	r3, r3, #1
 800c51c:	6313      	str	r3, [r2, #48]	; 0x30
 800c51e:	4b22      	ldr	r3, [pc, #136]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c522:	f003 0301 	and.w	r3, r3, #1
 800c526:	613b      	str	r3, [r7, #16]
 800c528:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c52a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c52e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c530:	2300      	movs	r3, #0
 800c532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c534:	2300      	movs	r3, #0
 800c536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c538:	f107 0314 	add.w	r3, r7, #20
 800c53c:	4619      	mov	r1, r3
 800c53e:	481b      	ldr	r0, [pc, #108]	; (800c5ac <HAL_HCD_MspInit+0xc0>)
 800c540:	f7f5 fb6c 	bl	8001c1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c544:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c54a:	2302      	movs	r3, #2
 800c54c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c552:	2303      	movs	r3, #3
 800c554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c556:	230a      	movs	r3, #10
 800c558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c55a:	f107 0314 	add.w	r3, r7, #20
 800c55e:	4619      	mov	r1, r3
 800c560:	4812      	ldr	r0, [pc, #72]	; (800c5ac <HAL_HCD_MspInit+0xc0>)
 800c562:	f7f5 fb5b 	bl	8001c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56a:	4a0f      	ldr	r2, [pc, #60]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c570:	6353      	str	r3, [r2, #52]	; 0x34
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]
 800c576:	4b0c      	ldr	r3, [pc, #48]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c57a:	4a0b      	ldr	r2, [pc, #44]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c57c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c580:	6453      	str	r3, [r2, #68]	; 0x44
 800c582:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <HAL_HCD_MspInit+0xbc>)
 800c584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c58e:	2200      	movs	r2, #0
 800c590:	2100      	movs	r1, #0
 800c592:	2043      	movs	r0, #67	; 0x43
 800c594:	f7f4 ff2d 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c598:	2043      	movs	r0, #67	; 0x43
 800c59a:	f7f4 ff46 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c59e:	bf00      	nop
 800c5a0:	3728      	adds	r7, #40	; 0x28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	40023800 	.word	0x40023800
 800c5ac:	40020000 	.word	0x40020000

0800c5b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fc fd53 	bl	800906a <USBH_LL_IncTimer>
}
 800c5c4:	bf00      	nop
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fc fd8b 	bl	80090f6 <USBH_LL_Connect>
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fc fd94 	bl	8009124 <USBH_LL_Disconnect>
}
 800c5fc:	bf00      	nop
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
 800c610:	4613      	mov	r3, r2
 800c612:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c614:	bf00      	nop
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fc fd45 	bl	80090be <USBH_LL_PortEnabled>
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fc fd45 	bl	80090da <USBH_LL_PortDisabled>
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c666:	2b01      	cmp	r3, #1
 800c668:	d12a      	bne.n	800c6c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c66a:	4a18      	ldr	r2, [pc, #96]	; (800c6cc <USBH_LL_Init+0x74>)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a15      	ldr	r2, [pc, #84]	; (800c6cc <USBH_LL_Init+0x74>)
 800c676:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c67a:	4b14      	ldr	r3, [pc, #80]	; (800c6cc <USBH_LL_Init+0x74>)
 800c67c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c680:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c682:	4b12      	ldr	r3, [pc, #72]	; (800c6cc <USBH_LL_Init+0x74>)
 800c684:	2208      	movs	r2, #8
 800c686:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c688:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <USBH_LL_Init+0x74>)
 800c68a:	2201      	movs	r2, #1
 800c68c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c68e:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <USBH_LL_Init+0x74>)
 800c690:	2200      	movs	r2, #0
 800c692:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c694:	4b0d      	ldr	r3, [pc, #52]	; (800c6cc <USBH_LL_Init+0x74>)
 800c696:	2202      	movs	r2, #2
 800c698:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c69a:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <USBH_LL_Init+0x74>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c6a0:	480a      	ldr	r0, [pc, #40]	; (800c6cc <USBH_LL_Init+0x74>)
 800c6a2:	f7f5 fc6e 	bl	8001f82 <HAL_HCD_Init>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c6ac:	f7f4 fa0c 	bl	8000ac8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c6b0:	4806      	ldr	r0, [pc, #24]	; (800c6cc <USBH_LL_Init+0x74>)
 800c6b2:	f7f6 f871 	bl	8002798 <HAL_HCD_GetCurrentFrame>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7fc fcc6 	bl	800904c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20001ccc 	.word	0x20001ccc

0800c6d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7f5 ffde 	bl	80026a8 <HAL_HCD_Start>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 f990 	bl	800ca18 <USBH_Get_USB_Status>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7f5 ffe6 	bl	80026ee <HAL_HCD_Stop>
 800c722:	4603      	mov	r3, r0
 800c724:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c726:	7bfb      	ldrb	r3, [r7, #15]
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 f975 	bl	800ca18 <USBH_Get_USB_Status>
 800c72e:	4603      	mov	r3, r0
 800c730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c732:	7bbb      	ldrb	r3, [r7, #14]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c744:	2301      	movs	r3, #1
 800c746:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c74e:	4618      	mov	r0, r3
 800c750:	f7f6 f830 	bl	80027b4 <HAL_HCD_GetCurrentSpeed>
 800c754:	4603      	mov	r3, r0
 800c756:	2b01      	cmp	r3, #1
 800c758:	d007      	beq.n	800c76a <USBH_LL_GetSpeed+0x2e>
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d302      	bcc.n	800c764 <USBH_LL_GetSpeed+0x28>
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d006      	beq.n	800c770 <USBH_LL_GetSpeed+0x34>
 800c762:	e008      	b.n	800c776 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]
    break;
 800c768:	e008      	b.n	800c77c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c76a:	2301      	movs	r3, #1
 800c76c:	73fb      	strb	r3, [r7, #15]
    break;
 800c76e:	e005      	b.n	800c77c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c770:	2302      	movs	r3, #2
 800c772:	73fb      	strb	r3, [r7, #15]
    break;
 800c774:	e002      	b.n	800c77c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c776:	2301      	movs	r3, #1
 800c778:	73fb      	strb	r3, [r7, #15]
    break;
 800c77a:	bf00      	nop
  }
  return  speed;
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c792:	2300      	movs	r3, #0
 800c794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7f5 ffc3 	bl	8002728 <HAL_HCD_ResetPort>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 f935 	bl	800ca18 <USBH_Get_USB_Status>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7ce:	78fa      	ldrb	r2, [r7, #3]
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f5 ffcb 	bl	800276e <HAL_HCD_HC_GetXferCount>
 800c7d8:	4603      	mov	r3, r0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c7e2:	b590      	push	{r4, r7, lr}
 800c7e4:	b089      	sub	sp, #36	; 0x24
 800c7e6:	af04      	add	r7, sp, #16
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	4608      	mov	r0, r1
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	70fb      	strb	r3, [r7, #3]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70bb      	strb	r3, [r7, #2]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c800:	2300      	movs	r3, #0
 800c802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c80a:	787c      	ldrb	r4, [r7, #1]
 800c80c:	78ba      	ldrb	r2, [r7, #2]
 800c80e:	78f9      	ldrb	r1, [r7, #3]
 800c810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c812:	9302      	str	r3, [sp, #8]
 800c814:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	4623      	mov	r3, r4
 800c822:	f7f5 fc10 	bl	8002046 <HAL_HCD_HC_Init>
 800c826:	4603      	mov	r3, r0
 800c828:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 f8f3 	bl	800ca18 <USBH_Get_USB_Status>
 800c832:	4603      	mov	r3, r0
 800c834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c836:	7bbb      	ldrb	r3, [r7, #14]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd90      	pop	{r4, r7, pc}

0800c840 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	460b      	mov	r3, r1
 800c84a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c85a:	78fa      	ldrb	r2, [r7, #3]
 800c85c:	4611      	mov	r1, r2
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f5 fc89 	bl	8002176 <HAL_HCD_HC_Halt>
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c868:	7bfb      	ldrb	r3, [r7, #15]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 f8d4 	bl	800ca18 <USBH_Get_USB_Status>
 800c870:	4603      	mov	r3, r0
 800c872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c874:	7bbb      	ldrb	r3, [r7, #14]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c87e:	b590      	push	{r4, r7, lr}
 800c880:	b089      	sub	sp, #36	; 0x24
 800c882:	af04      	add	r7, sp, #16
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	4608      	mov	r0, r1
 800c888:	4611      	mov	r1, r2
 800c88a:	461a      	mov	r2, r3
 800c88c:	4603      	mov	r3, r0
 800c88e:	70fb      	strb	r3, [r7, #3]
 800c890:	460b      	mov	r3, r1
 800c892:	70bb      	strb	r3, [r7, #2]
 800c894:	4613      	mov	r3, r2
 800c896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c898:	2300      	movs	r3, #0
 800c89a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c8a6:	787c      	ldrb	r4, [r7, #1]
 800c8a8:	78ba      	ldrb	r2, [r7, #2]
 800c8aa:	78f9      	ldrb	r1, [r7, #3]
 800c8ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c8b0:	9303      	str	r3, [sp, #12]
 800c8b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8b4:	9302      	str	r3, [sp, #8]
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b8:	9301      	str	r3, [sp, #4]
 800c8ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	f7f5 fc7b 	bl	80021bc <HAL_HCD_HC_SubmitRequest>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 f8a3 	bl	800ca18 <USBH_Get_USB_Status>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd90      	pop	{r4, r7, pc}

0800c8e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8f2:	78fa      	ldrb	r2, [r7, #3]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7f5 ff24 	bl	8002744 <HAL_HCD_HC_GetURBState>
 800c8fc:	4603      	mov	r3, r0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d103      	bne.n	800c924 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c91c:	78fb      	ldrb	r3, [r7, #3]
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 f8a6 	bl	800ca70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c924:	20c8      	movs	r0, #200	; 0xc8
 800c926:	f7f4 fc67 	bl	80011f8 <HAL_Delay>
  return USBH_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
 800c940:	4613      	mov	r3, r2
 800c942:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c94a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c94c:	78fa      	ldrb	r2, [r7, #3]
 800c94e:	68f9      	ldr	r1, [r7, #12]
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	440b      	add	r3, r1
 800c95a:	333b      	adds	r3, #59	; 0x3b
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00a      	beq.n	800c978 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c962:	78fa      	ldrb	r2, [r7, #3]
 800c964:	68f9      	ldr	r1, [r7, #12]
 800c966:	4613      	mov	r3, r2
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	00db      	lsls	r3, r3, #3
 800c96e:	440b      	add	r3, r1
 800c970:	3350      	adds	r3, #80	; 0x50
 800c972:	78ba      	ldrb	r2, [r7, #2]
 800c974:	701a      	strb	r2, [r3, #0]
 800c976:	e009      	b.n	800c98c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c978:	78fa      	ldrb	r2, [r7, #3]
 800c97a:	68f9      	ldr	r1, [r7, #12]
 800c97c:	4613      	mov	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	440b      	add	r3, r1
 800c986:	3351      	adds	r3, #81	; 0x51
 800c988:	78ba      	ldrb	r2, [r7, #2]
 800c98a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3714      	adds	r7, #20
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c99a:	b480      	push	{r7}
 800c99c:	b085      	sub	sp, #20
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9b0:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800c9b2:	78fa      	ldrb	r2, [r7, #3]
 800c9b4:	68b9      	ldr	r1, [r7, #8]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	440b      	add	r3, r1
 800c9c0:	333b      	adds	r3, #59	; 0x3b
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d00a      	beq.n	800c9de <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800c9c8:	78fa      	ldrb	r2, [r7, #3]
 800c9ca:	68b9      	ldr	r1, [r7, #8]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	00db      	lsls	r3, r3, #3
 800c9d4:	440b      	add	r3, r1
 800c9d6:	3350      	adds	r3, #80	; 0x50
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	73fb      	strb	r3, [r7, #15]
 800c9dc:	e009      	b.n	800c9f2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800c9de:	78fa      	ldrb	r2, [r7, #3]
 800c9e0:	68b9      	ldr	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	440b      	add	r3, r1
 800c9ec:	3351      	adds	r3, #81	; 0x51
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3714      	adds	r7, #20
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7f4 fbf5 	bl	80011f8 <HAL_Delay>
}
 800ca0e:	bf00      	nop
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
	...

0800ca18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	4603      	mov	r3, r0
 800ca20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca22:	2300      	movs	r3, #0
 800ca24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	2b03      	cmp	r3, #3
 800ca2a:	d817      	bhi.n	800ca5c <USBH_Get_USB_Status+0x44>
 800ca2c:	a201      	add	r2, pc, #4	; (adr r2, 800ca34 <USBH_Get_USB_Status+0x1c>)
 800ca2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca32:	bf00      	nop
 800ca34:	0800ca45 	.word	0x0800ca45
 800ca38:	0800ca4b 	.word	0x0800ca4b
 800ca3c:	0800ca51 	.word	0x0800ca51
 800ca40:	0800ca57 	.word	0x0800ca57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]
    break;
 800ca48:	e00b      	b.n	800ca62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca4e:	e008      	b.n	800ca62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ca50:	2301      	movs	r3, #1
 800ca52:	73fb      	strb	r3, [r7, #15]
    break;
 800ca54:	e005      	b.n	800ca62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ca56:	2302      	movs	r3, #2
 800ca58:	73fb      	strb	r3, [r7, #15]
    break;
 800ca5a:	e002      	b.n	800ca62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca60:	bf00      	nop
  }
  return usb_status;
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ca84:	2301      	movs	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
 800ca88:	e001      	b.n	800ca8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	461a      	mov	r2, r3
 800ca92:	2101      	movs	r1, #1
 800ca94:	4803      	ldr	r0, [pc, #12]	; (800caa4 <MX_DriverVbusFS+0x34>)
 800ca96:	f7f5 fa5b 	bl	8001f50 <HAL_GPIO_WritePin>
}
 800ca9a:	bf00      	nop
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	40020800 	.word	0x40020800

0800caa8 <__errno>:
 800caa8:	4b01      	ldr	r3, [pc, #4]	; (800cab0 <__errno+0x8>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	2000002c 	.word	0x2000002c

0800cab4 <__libc_init_array>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	4e0d      	ldr	r6, [pc, #52]	; (800caec <__libc_init_array+0x38>)
 800cab8:	4c0d      	ldr	r4, [pc, #52]	; (800caf0 <__libc_init_array+0x3c>)
 800caba:	1ba4      	subs	r4, r4, r6
 800cabc:	10a4      	asrs	r4, r4, #2
 800cabe:	2500      	movs	r5, #0
 800cac0:	42a5      	cmp	r5, r4
 800cac2:	d109      	bne.n	800cad8 <__libc_init_array+0x24>
 800cac4:	4e0b      	ldr	r6, [pc, #44]	; (800caf4 <__libc_init_array+0x40>)
 800cac6:	4c0c      	ldr	r4, [pc, #48]	; (800caf8 <__libc_init_array+0x44>)
 800cac8:	f000 f8f6 	bl	800ccb8 <_init>
 800cacc:	1ba4      	subs	r4, r4, r6
 800cace:	10a4      	asrs	r4, r4, #2
 800cad0:	2500      	movs	r5, #0
 800cad2:	42a5      	cmp	r5, r4
 800cad4:	d105      	bne.n	800cae2 <__libc_init_array+0x2e>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cadc:	4798      	blx	r3
 800cade:	3501      	adds	r5, #1
 800cae0:	e7ee      	b.n	800cac0 <__libc_init_array+0xc>
 800cae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cae6:	4798      	blx	r3
 800cae8:	3501      	adds	r5, #1
 800caea:	e7f2      	b.n	800cad2 <__libc_init_array+0x1e>
 800caec:	0800cde4 	.word	0x0800cde4
 800caf0:	0800cde4 	.word	0x0800cde4
 800caf4:	0800cde4 	.word	0x0800cde4
 800caf8:	0800cde8 	.word	0x0800cde8

0800cafc <malloc>:
 800cafc:	4b02      	ldr	r3, [pc, #8]	; (800cb08 <malloc+0xc>)
 800cafe:	4601      	mov	r1, r0
 800cb00:	6818      	ldr	r0, [r3, #0]
 800cb02:	f000 b86d 	b.w	800cbe0 <_malloc_r>
 800cb06:	bf00      	nop
 800cb08:	2000002c 	.word	0x2000002c

0800cb0c <free>:
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <free+0xc>)
 800cb0e:	4601      	mov	r1, r0
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	f000 b817 	b.w	800cb44 <_free_r>
 800cb16:	bf00      	nop
 800cb18:	2000002c 	.word	0x2000002c

0800cb1c <memcpy>:
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	1e43      	subs	r3, r0, #1
 800cb20:	440a      	add	r2, r1
 800cb22:	4291      	cmp	r1, r2
 800cb24:	d100      	bne.n	800cb28 <memcpy+0xc>
 800cb26:	bd10      	pop	{r4, pc}
 800cb28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb30:	e7f7      	b.n	800cb22 <memcpy+0x6>

0800cb32 <memset>:
 800cb32:	4402      	add	r2, r0
 800cb34:	4603      	mov	r3, r0
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d100      	bne.n	800cb3c <memset+0xa>
 800cb3a:	4770      	bx	lr
 800cb3c:	f803 1b01 	strb.w	r1, [r3], #1
 800cb40:	e7f9      	b.n	800cb36 <memset+0x4>
	...

0800cb44 <_free_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	4605      	mov	r5, r0
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	d045      	beq.n	800cbd8 <_free_r+0x94>
 800cb4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb50:	1f0c      	subs	r4, r1, #4
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bfb8      	it	lt
 800cb56:	18e4      	addlt	r4, r4, r3
 800cb58:	f000 f8ac 	bl	800ccb4 <__malloc_lock>
 800cb5c:	4a1f      	ldr	r2, [pc, #124]	; (800cbdc <_free_r+0x98>)
 800cb5e:	6813      	ldr	r3, [r2, #0]
 800cb60:	4610      	mov	r0, r2
 800cb62:	b933      	cbnz	r3, 800cb72 <_free_r+0x2e>
 800cb64:	6063      	str	r3, [r4, #4]
 800cb66:	6014      	str	r4, [r2, #0]
 800cb68:	4628      	mov	r0, r5
 800cb6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb6e:	f000 b8a2 	b.w	800ccb6 <__malloc_unlock>
 800cb72:	42a3      	cmp	r3, r4
 800cb74:	d90c      	bls.n	800cb90 <_free_r+0x4c>
 800cb76:	6821      	ldr	r1, [r4, #0]
 800cb78:	1862      	adds	r2, r4, r1
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	bf04      	itt	eq
 800cb7e:	681a      	ldreq	r2, [r3, #0]
 800cb80:	685b      	ldreq	r3, [r3, #4]
 800cb82:	6063      	str	r3, [r4, #4]
 800cb84:	bf04      	itt	eq
 800cb86:	1852      	addeq	r2, r2, r1
 800cb88:	6022      	streq	r2, [r4, #0]
 800cb8a:	6004      	str	r4, [r0, #0]
 800cb8c:	e7ec      	b.n	800cb68 <_free_r+0x24>
 800cb8e:	4613      	mov	r3, r2
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	b10a      	cbz	r2, 800cb98 <_free_r+0x54>
 800cb94:	42a2      	cmp	r2, r4
 800cb96:	d9fa      	bls.n	800cb8e <_free_r+0x4a>
 800cb98:	6819      	ldr	r1, [r3, #0]
 800cb9a:	1858      	adds	r0, r3, r1
 800cb9c:	42a0      	cmp	r0, r4
 800cb9e:	d10b      	bne.n	800cbb8 <_free_r+0x74>
 800cba0:	6820      	ldr	r0, [r4, #0]
 800cba2:	4401      	add	r1, r0
 800cba4:	1858      	adds	r0, r3, r1
 800cba6:	4282      	cmp	r2, r0
 800cba8:	6019      	str	r1, [r3, #0]
 800cbaa:	d1dd      	bne.n	800cb68 <_free_r+0x24>
 800cbac:	6810      	ldr	r0, [r2, #0]
 800cbae:	6852      	ldr	r2, [r2, #4]
 800cbb0:	605a      	str	r2, [r3, #4]
 800cbb2:	4401      	add	r1, r0
 800cbb4:	6019      	str	r1, [r3, #0]
 800cbb6:	e7d7      	b.n	800cb68 <_free_r+0x24>
 800cbb8:	d902      	bls.n	800cbc0 <_free_r+0x7c>
 800cbba:	230c      	movs	r3, #12
 800cbbc:	602b      	str	r3, [r5, #0]
 800cbbe:	e7d3      	b.n	800cb68 <_free_r+0x24>
 800cbc0:	6820      	ldr	r0, [r4, #0]
 800cbc2:	1821      	adds	r1, r4, r0
 800cbc4:	428a      	cmp	r2, r1
 800cbc6:	bf04      	itt	eq
 800cbc8:	6811      	ldreq	r1, [r2, #0]
 800cbca:	6852      	ldreq	r2, [r2, #4]
 800cbcc:	6062      	str	r2, [r4, #4]
 800cbce:	bf04      	itt	eq
 800cbd0:	1809      	addeq	r1, r1, r0
 800cbd2:	6021      	streq	r1, [r4, #0]
 800cbd4:	605c      	str	r4, [r3, #4]
 800cbd6:	e7c7      	b.n	800cb68 <_free_r+0x24>
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	bf00      	nop
 800cbdc:	20001384 	.word	0x20001384

0800cbe0 <_malloc_r>:
 800cbe0:	b570      	push	{r4, r5, r6, lr}
 800cbe2:	1ccd      	adds	r5, r1, #3
 800cbe4:	f025 0503 	bic.w	r5, r5, #3
 800cbe8:	3508      	adds	r5, #8
 800cbea:	2d0c      	cmp	r5, #12
 800cbec:	bf38      	it	cc
 800cbee:	250c      	movcc	r5, #12
 800cbf0:	2d00      	cmp	r5, #0
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	db01      	blt.n	800cbfa <_malloc_r+0x1a>
 800cbf6:	42a9      	cmp	r1, r5
 800cbf8:	d903      	bls.n	800cc02 <_malloc_r+0x22>
 800cbfa:	230c      	movs	r3, #12
 800cbfc:	6033      	str	r3, [r6, #0]
 800cbfe:	2000      	movs	r0, #0
 800cc00:	bd70      	pop	{r4, r5, r6, pc}
 800cc02:	f000 f857 	bl	800ccb4 <__malloc_lock>
 800cc06:	4a21      	ldr	r2, [pc, #132]	; (800cc8c <_malloc_r+0xac>)
 800cc08:	6814      	ldr	r4, [r2, #0]
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	b991      	cbnz	r1, 800cc34 <_malloc_r+0x54>
 800cc0e:	4c20      	ldr	r4, [pc, #128]	; (800cc90 <_malloc_r+0xb0>)
 800cc10:	6823      	ldr	r3, [r4, #0]
 800cc12:	b91b      	cbnz	r3, 800cc1c <_malloc_r+0x3c>
 800cc14:	4630      	mov	r0, r6
 800cc16:	f000 f83d 	bl	800cc94 <_sbrk_r>
 800cc1a:	6020      	str	r0, [r4, #0]
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f000 f838 	bl	800cc94 <_sbrk_r>
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	d124      	bne.n	800cc72 <_malloc_r+0x92>
 800cc28:	230c      	movs	r3, #12
 800cc2a:	6033      	str	r3, [r6, #0]
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f000 f842 	bl	800ccb6 <__malloc_unlock>
 800cc32:	e7e4      	b.n	800cbfe <_malloc_r+0x1e>
 800cc34:	680b      	ldr	r3, [r1, #0]
 800cc36:	1b5b      	subs	r3, r3, r5
 800cc38:	d418      	bmi.n	800cc6c <_malloc_r+0x8c>
 800cc3a:	2b0b      	cmp	r3, #11
 800cc3c:	d90f      	bls.n	800cc5e <_malloc_r+0x7e>
 800cc3e:	600b      	str	r3, [r1, #0]
 800cc40:	50cd      	str	r5, [r1, r3]
 800cc42:	18cc      	adds	r4, r1, r3
 800cc44:	4630      	mov	r0, r6
 800cc46:	f000 f836 	bl	800ccb6 <__malloc_unlock>
 800cc4a:	f104 000b 	add.w	r0, r4, #11
 800cc4e:	1d23      	adds	r3, r4, #4
 800cc50:	f020 0007 	bic.w	r0, r0, #7
 800cc54:	1ac3      	subs	r3, r0, r3
 800cc56:	d0d3      	beq.n	800cc00 <_malloc_r+0x20>
 800cc58:	425a      	negs	r2, r3
 800cc5a:	50e2      	str	r2, [r4, r3]
 800cc5c:	e7d0      	b.n	800cc00 <_malloc_r+0x20>
 800cc5e:	428c      	cmp	r4, r1
 800cc60:	684b      	ldr	r3, [r1, #4]
 800cc62:	bf16      	itet	ne
 800cc64:	6063      	strne	r3, [r4, #4]
 800cc66:	6013      	streq	r3, [r2, #0]
 800cc68:	460c      	movne	r4, r1
 800cc6a:	e7eb      	b.n	800cc44 <_malloc_r+0x64>
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	6849      	ldr	r1, [r1, #4]
 800cc70:	e7cc      	b.n	800cc0c <_malloc_r+0x2c>
 800cc72:	1cc4      	adds	r4, r0, #3
 800cc74:	f024 0403 	bic.w	r4, r4, #3
 800cc78:	42a0      	cmp	r0, r4
 800cc7a:	d005      	beq.n	800cc88 <_malloc_r+0xa8>
 800cc7c:	1a21      	subs	r1, r4, r0
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f000 f808 	bl	800cc94 <_sbrk_r>
 800cc84:	3001      	adds	r0, #1
 800cc86:	d0cf      	beq.n	800cc28 <_malloc_r+0x48>
 800cc88:	6025      	str	r5, [r4, #0]
 800cc8a:	e7db      	b.n	800cc44 <_malloc_r+0x64>
 800cc8c:	20001384 	.word	0x20001384
 800cc90:	20001388 	.word	0x20001388

0800cc94 <_sbrk_r>:
 800cc94:	b538      	push	{r3, r4, r5, lr}
 800cc96:	4c06      	ldr	r4, [pc, #24]	; (800ccb0 <_sbrk_r+0x1c>)
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	4608      	mov	r0, r1
 800cc9e:	6023      	str	r3, [r4, #0]
 800cca0:	f7f4 f872 	bl	8000d88 <_sbrk>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d102      	bne.n	800ccae <_sbrk_r+0x1a>
 800cca8:	6823      	ldr	r3, [r4, #0]
 800ccaa:	b103      	cbz	r3, 800ccae <_sbrk_r+0x1a>
 800ccac:	602b      	str	r3, [r5, #0]
 800ccae:	bd38      	pop	{r3, r4, r5, pc}
 800ccb0:	20001f90 	.word	0x20001f90

0800ccb4 <__malloc_lock>:
 800ccb4:	4770      	bx	lr

0800ccb6 <__malloc_unlock>:
 800ccb6:	4770      	bx	lr

0800ccb8 <_init>:
 800ccb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccba:	bf00      	nop
 800ccbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccbe:	bc08      	pop	{r3}
 800ccc0:	469e      	mov	lr, r3
 800ccc2:	4770      	bx	lr

0800ccc4 <_fini>:
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc6:	bf00      	nop
 800ccc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccca:	bc08      	pop	{r3}
 800cccc:	469e      	mov	lr, r3
 800ccce:	4770      	bx	lr
